{"remainingRequest":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/huangrong/workspace/apitest/apitest-web/src/views/project/auto/publishList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/huangrong/workspace/apitest/apitest-web/src/views/project/auto/publishList.vue","mtime":1588821312812},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n    import { test,getProjectConfig,getGlobalPublish} from '../../../api/api'\n    import $ from 'jquery'\n    import moment from \"moment\"\n    import axios from \"axios\"\n    export default {\n        data() {\n            return {\n                status: [{value: true, label: '启动'},\n                    {value: false, label: '停止'}],\n                sendEmail: [{value: 0, label: '不发送'},\n                    {value: 1, label: '发送'}],\n                filters: {\n                    name: ''\n                },\n                env: '',\n                EnvList: [],\n                automationlist: [],\n                memberData: [],\n                publishlist: [],\n                publishConfigList: [],\n                total: 0,\n                page: 1,\n                pages: 0,\n                listLoading: false,\n                editLoading: false,\n                sels: [],//列表选中列\n                publishVShow: false,\n                publishVType: \"add\",\n                formTitle: \"发布项目配置\",\n                delLoading: false,\n                disDel: true,\n                form: {\n                    id: \"\",\n                    name: \"\",\n                    env: \"\",\n                    automations: [],\n                    params: \"{}\",\n                    status: \"true\",\n                    sendEmail: 0,\n                    emails: [],\n                    publishId: \"\",\n                },\n                formRules: {\n                    name: [\n                        { required: true, message: '请选择发布项目'},\n                    ],\n                    env: [\n                        { required: true, message: '请选择执行环境'},\n                    ],\n                    automation: [\n                        { required: true, message: '请选择执行的用例'},\n                    ]\n                },\n            }\n        },\n        methods: {\n            getPublish() {\n                if(this.publishlist.length==0){\n                    let self = this;\n                    let headers = {\n                        Authorization: 'Token '+sessionStorage.getItem('token')\n                    };\n                    getGlobalPublish(headers, {}).then(data => {\n                        if (data.code === '999999') {\n                            data.data.forEach((item) => {\n                                self.publishlist.push(item);\n                            })\n                        }else {\n                            self.$message.error({\n                                message: data.msg,\n                                center: true,\n                            })\n                        }\n                    });\n                }\n            },\n            // 获取用例列表\n            getAutomationList() {\n                let self = this;\n                let param = { project_id: this.$route.params.project_id, page: self.page, page_size:1000};\n                axios.get(test+\"/api/automation/automation_list\",{params:param,headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                    let data=response.data;\n                    if (data.code === '999999') {\n                        self.automationlist=[];\n                        data.data.data.forEach((item) =>{\n                            self.automationlist.push(item)\n                        });\n                    }\n                    else {\n                        self.$message.error({\n                            message: data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            // 获取成员列表\n            getProjectMember() {\n                let self = this;\n                let params = {\n                    project_id: this.$route.params.project_id,\n                    page: self.page,\n                    page_size: 100\n                };\n                let headers = {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: 'Token '+sessionStorage.getItem('token')\n                };\n                axios.get(`${test}/api/member/project_member`, { params: params, headers:headers}).then(res => {\n                    let {msg, code, data} = res.data;\n                    if (code === '999999') {\n                        self.memberData = data.data\n                    }\n                    else {\n                        self.$message.error({\n                            message: msg,\n                            center: true,\n                        })\n                    }\n                })\n            },\n            handleSearch(){\n                this.page=1;\n                this.getPublishList();\n            },\n            // 获取用例列表\n            getPublishList() {\n                let self = this;\n                let param = { project_id: this.$route.params.project_id, page: self.page, name: self.filters.name};\n                axios.get(test+\"/api/automation/publish_list\",{params:param,headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                    let data=response.data;\n                    if (data.code === '999999') {\n                        self.total = data.data.total;\n                        self.pages=data.data.pages;\n                        self.publishConfigList=[];\n                        data.data.data.forEach((item) =>{\n                            self.publishConfigList.push(item)\n                        });\n                    }else {\n                        self.$message.error({\n                            message: data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            //删除\n            handleDel: function (index, row) {\n                this.$confirm('确认删除发布项目配置[' + row.name + ',' + row.env + ']吗?', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    this.listLoading = true;\n                    //NProgress.start();\n                    let self = this;\n                    let param=JSON.stringify({\n                                project_id: Number(this.$route.params.project_id),\n                                ids: [row.id] });\n                    axios.post(test+\"/api/automation/del_publish\",param,{headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                        this.listLoading = false;\n                        let data=response.data;\n                        if (data.code === '999999') {\n                            self.$message({\n                                message: '删除成功',\n                                center: true,\n                                type: 'success'\n                            })\n                        } else {\n                            self.$message.error({\n                                message: data.msg,\n                                center: true,\n                            })\n                        }\n                        self.getPublishList();\n                    }).catch(error=>{\n\n                    });\n                }).catch(() => {\n                });\n            },\n            handleCurrentChange(val) {\n                this.page = val;\n                this.getPublishList()\n            },\n            selsChange: function (sels) {\n                if (sels.length>0) {\n                    this.sels = sels;\n                }\n            },\n            //批量删除\n            batchRemove: function () {\n                let ids = this.sels.map(item => item.id);\n                let self = this;\n                this.$confirm('确认删除选中发布项目配置吗？', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    self.listLoading = true;\n                    //NProgress.start();\n                    axios.post(test+\"/api/automation/del_publish\",JSON.stringify({ project_id: Number(this.$route.params.project_id), ids: ids}),{headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                        let data=response.data;\n                        self.listLoading = false;\n                        if (data.code === '999999') {\n                            self.$message({\n                                message: '删除成功',\n                                center: true,\n                                type: 'success'\n                            })\n                        }\n                        else {\n                            self.$message.error({\n                                message: data.msg,\n                                center: true,\n                            })\n                        }\n                        self.getPublishList();\n                    }).catch(error=>{\n\n                    });\n                }).catch(() => {\n\n                });\n            },\n            //显示编辑界面\n            handleEdit: function (index, row) {\n                this.formTitle=\"编辑\";\n                this.publishVShow = true;\n                this.publishVType=\"update\";\n                this.form=Object.assign({}, row);\n//                this.form = {\"id\":row.id,\"name\":row.name,\"type\":row.type,\"params\":row.params,\"group\":row.group,\"description\":row.description};\n            },\n            //显示编辑界面\n            handleRun: function (index, row) {\n                this.formTitle=\"执行\";\n                this.publishVShow = true;\n                this.publishVType=\"run\";\n                this.form=Object.assign({}, row);\n//                this.form = {\"id\":row.id,\"name\":row.name,\"type\":row.type,\"params\":row.params,\"group\":row.group,\"description\":row.description};\n            },\n            //显示新增界面\n            handleAdd: function () {\n                this.formTitle=\"新增\";\n                this.publishVShow = true;\n                this.publishVType=\"add\";\n                this.form={name: \"\", env: \"\", automations: [], params: \"{}\", status: true, sendEmail: 0, emails: []};\n            },\n            //显示新增页面,复制用例\n            handleCopy: function (index, row) {\n                this.formTitle=\"复制\";\n                this.publishVType=\"copy\";\n                //this.form={\"name\":row.name,\"type\":row.type,\"params\":row.params,\"group\":row.group,\"description\":row.description};\n                let form=(Object.assign({}, row));\n                delete form[\"id\"];\n                this.form=form;\n                this.publishVShow = true;\n            },\n            // 修改任务\n            editSubmit: function () {\n                if(this.form.automations.length==0){\n                    this.$message.error({\n                        message: \"请选择用例!\",\n                        center: true,\n                    })\n                    return;\n                }\n                let self = this;\n                this.$refs.form.validate((valid) => {\n                    if (valid) {\n                        this.$confirm('确认提交吗？', '提示', {}).then(() => {\n                            self.editLoading = true;\n                            //NProgress.start();\n                            let param = {\n                              project_id: Number(this.$route.params.project_id),\n                              automations: JSON.stringify(self.form.automations),\n                              name: self.form.name,\n                              params: self.form.params,\n                              env: self.form.env,\n                              status: self.form.status,\n                              sendEmail: self.form.sendEmail,\n                              emails: JSON.stringify(self.form.emails)};\n                            let url=test+\"/api/automation/add_publish\";\n                            if(self.form.id!=null){\n                                param[\"id\"]=Number(self.form.id);\n                                url=test+\"/api/automation/update_publish\";\n                            }\n                            axios.post(url,param,{headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                                let data=response.data;\n                                self.editLoading = false;\n                                if (data.code === '999999') {\n                                    self.$message({\n                                        message: '执行成功',\n                                        center: true,\n                                        type: 'success'\n                                    });\n                                    self.$refs['form'].resetFields();\n                                    self.publishVShow = false;\n                                    self.getPublishList();\n                                } else if (data.code === '999997'){\n                                    self.$message.error({\n                                        message: data.msg,\n                                        center: true,\n                                    })\n                                } else {\n                                    self.$message.error({\n                                        message: data.msg,\n                                        center: true,\n                                    })\n                                }\n                            }).catch(error=>{});\n                        }).catch(() => {});\n                    }\n                });\n            },\n            // 改变任务状态\n            handleChangeStatus: function(index, row) {\n                let self = this;\n                let url=\"\";\n                let message=\"\";\n                this.listLoading = true;\n                let param = JSON.stringify({ project_id: Number(this.$route.params.project_id),id: row.id});\n                if (row.status) {\n                    url=test+\"/api/automation/disable_publish\";\n                    message='禁用成功';\n                } else {\n                    url=test+\"/api/automation/enable_publish\";\n                    message='启用成功';\n                }\n                axios.post(url,param,{headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                    let { msg, code, data }=response.data;\n                    self.listLoading = false;\n                    if (code === '999999') {\n                        self.$message({\n                            message: message,\n                            center: true,\n                            type: 'success'\n                        });\n                        row.status = !row.status;\n                    }\n                    else {\n                        self.$message.error({\n                            message: msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            runSubmit: function() {\n                if(!this.form.publishId){\n                    this.$message.error({\n                        message: \"请填写上线单ID!\",\n                        center: true,\n                    })\n                    return;\n                }\n                this.$confirm('确认测试发布项目' + this.form.name + ',' + this.form.env + '环境,上线单' + this.form.publishId + '吗?', '提示', {}).then(() => {\n                    let self = this;\n                    let url=\"\";\n                    let message=\"\";\n                    this.listLoading = true;\n                    let param = { project_id: Number(this.$route.params.project_id),publish:self.form.id,id: self.form.publishId,sendEmail:self.form.sendEmail,emails:self.form.emails};\n                    axios.post(test+\"/api/automation/test_publish\",param,{headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                        let { msg, code, data }=response.data;\n                        self.listLoading = false;\n                        self.publishVShow = false;\n                        if (code === '999999') {\n                            self.$message({\n                                message: \"开始执行\",\n                                center: true,\n                                type: 'success'\n                            });\n                        }\n                        else {\n                            self.$message.error({\n                                message: msg,\n                                center: true,\n                            })\n                        }\n                    }).catch(error=>{\n\n                    });\n                }).catch(() => {});\n            },\n            getEnv() {\n                let self = this;\n                let headers = {\n                    Authorization: 'Token '+sessionStorage.getItem('token')\n                };\n                getProjectConfig(headers, {project_id: self.$route.params.project_id,page: self.page, name: \"\", type: \"env\"}).then(data => {\n                    if (data.code === '999999') {\n                        data.data.data.forEach((item) => {\n                            if (item.status) {\n                                self.EnvList.push(item)\n                            }\n                        })\n                    }else {\n                        self.$message.error({\n                            message: data.msg,\n                            center: true,\n                        })\n                    }\n                });\n            },\n            init(){\n                this.getPublishList();\n                this.getAutomationList();\n                this.getProjectMember();\n                this.getEnv();\n                this.getPublish();\n            },\n        },\n        mounted() {\n            this.init();\n        },\n        watch: {\n            '$route' (to, from) { //监听路由是否变化\n              if(to.query!= from.query){\n                this.init();//重新加载数据\n              }\n            }\n        },\n    }\n",null]}