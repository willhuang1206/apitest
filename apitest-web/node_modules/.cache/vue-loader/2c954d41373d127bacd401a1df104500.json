{"remainingRequest":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/huangrong/workspace/apitest/apitest-web/src/views/project/api/testApi.vue?vue&type=style&index=1&lang=scss&","dependencies":[{"path":"/Users/huangrong/workspace/apitest/apitest-web/src/views/project/api/testApi.vue","mtime":1588816148402},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.selectInput{\n    input{\n        border-right: 0px;\n        border-radius: 4px 0px 0px 4px;\n    }\n}\n",{"version":3,"sources":["testApi.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+XA;AACA;AACA;AACA;AACA;AACA","file":"testApi.vue","sourceRoot":"src/views/project/api","sourcesContent":["<template>\n    <section>\n        <el-form :model=\"form\" ref=\"form\" :rules=\"formRules\">\n            <el-col :span=\"3\" class=\"HOST\">\n                <el-form-item prop=\"env\">\n                    <el-select v-model=\"form.env\"  placeholder=\"测试环境\">\n                        <el-option v-for=\"(item,index) in Host\" :key=\"index+''\" :label=\"item.name\" :value=\"item.name\"></el-option>\n                    </el-select>\n                </el-form-item>\n            </el-col>\n            <div style=\"border: 1px solid #e6e6e6;margin-bottom: 10px; padding:15px; padding-bottom: 0px\">\n                <el-row :gutter=\"10\">\n                    <el-col :span=\"3\">\n                        <el-form-item >\n                            <el-select v-model=\"form.method\"  placeholder=\"请求方式\">\n                                <el-option v-for=\"(item,index) in request\" :key=\"index+''\" :label=\"item.label\" :value=\"item.value\"></el-option>\n                            </el-select>\n                        </el-form-item>\n                    </el-col>\n                    <el-col :span='18'>\n                        <el-form-item prop=\"addr\">\n                            <el-input v-model.trim=\"form.addr\" placeholder=\"地址\" auto-complete></el-input>\n                        </el-form-item>\n                    </el-col>\n                    <el-col :span='2'>\n                        <el-button type=\"primary\" @click=\"Test\" :loading=\"loadingSend\">执行</el-button>\n                    </el-col>\n                </el-row>\n            </div>\n            <el-row :span=\"24\">\n                <el-collapse v-model=\"activeNames\" @change=\"handleChange\">\n                    <ApiRequest ref=\"apiRequest\"/>\n                    <el-collapse-item title=\"响应结果\" name=\"4\">\n                        <div style=\"margin-bottom: 10px\">\n                            <el-button @click=\"showBody\">Body</el-button>\n                            <el-button @click=\"showHeader\">Head</el-button>\n                            <el-button type=\"primary\" @click=\"format = !format\">格式转换</el-button>\n                        </div>\n                        <el-card class=\"box-card\">\n                            <!--<div slot=\"header\" class=\"clearfix\">-->\n                                <!--<span v-model=\"form.statusCode\" style=\"font-size: 25px\">{{form.statusCode}}</span>-->\n                            <!--</div>-->\n                            <div v-model=\"form.resultData\" :class=\"resultShow? 'parameter-a': 'parameter-b'\" v-show=\"!format\">\n                                <div style=\"word-break: break-all;overflow:auto;overflow-x:hidden\">\n                                    {{form.resultData}}\n                                </div>\n                            </div>\n                            <div v-model=\"form.resultHead\" :class=\"resultShow? 'parameter-b': 'parameter-a'\">{{form.resultHead}}</div>\n                            <div :class=\"resultShow? 'parameter-a': 'parameter-b'\" v-show=\"format\">\n                              <json-viewer :value=\"form.resultData\" :expand-depth=5 copyable></json-viewer>\n                            </div>\n                            <div v-show=\"!form.resultData&&!form.resultHead\" class=\"raw\">暂无数据</div>\n                        </el-card>\n                    </el-collapse-item>\n                    <el-collapse-item title=\"请求历史\" name=\"5\" v-show=\"false\">\n                        <el-table :data=\"requestHistory\" stripe style=\"width: 100%\" v-loading=\"listLoading\">\n                            <el-table-column prop=\"requestTime\" label=\"操作时间\" min-width=\"20%\">\n                            </el-table-column>\n                            <el-table-column prop=\"requestType\" label=\"请求方式\" min-width=\"10%\">\n                            </el-table-column>\n                            <el-table-column prop=\"requestAddress\" label=\"请求地址\" min-width=\"49%\">\n                            </el-table-column>\n                            <el-table-column prop=\"httpCode\" label=\"HTTP状态\" min-width=\"11%\">\n                            </el-table-column>\n                            <el-table-column min-width=\"10%\" label=\"操作\">\n                                <template slot-scope=\"scope\">\n                                    <i class=\"el-icon-delete\" style=\"font-size:30px;cursor:pointer;\" @click=\"delHistory(scope.row)\"></i>\n                                </template>\n                            </el-table-column>\n                        </el-table>\n                    </el-collapse-item>\n                </el-collapse>\n            </el-row>\n        </el-form>\n    </section>\n</template>\n<script>\n    import { test } from '@/api/api'\n    import ApiRequest from './apiRequest.vue'\n    import $ from 'jquery'\n    import axios from 'axios'\n    export default {\n        components: {ApiRequest},\n        data() {\n            return {\n                request: [{value: 'GET', label: 'GET'},\n                    {value: 'POST', label: 'POST'},\n                    {value: 'PUT', label: 'PUT'},\n                    {value: 'DELETE', label: 'DELETE'}],\n                Http: [{value: 'http', label: 'HTTP'},\n                    {value: 'https', label: 'HTTPS'}],\n                loadingSend: false,\n                result: true,\n                activeNames: ['2', '3', '4', '5'],\n                id: \"\",\n                Host: [],\n                form: {\n                    url: \"\",\n                    method: 'POST',\n                    http: 'http',\n                    addr: '',\n                    statusCode: \"\",\n                    resultData: \"\",\n                    resultHead: \"\",\n                },\n                formRules: {\n                    env: [\n                        { required: true, message: '请选择测试环境', trigger: 'blur'}\n                    ],\n                    addr: [\n                        { required: true, message: '请输入地址', trigger: 'blur' },\n                    ]\n                },\n                requestHistory: [],\n                listLoading: false,\n                headers: \"\",\n                parameters: \"\",\n                resultShow: true,\n                format: false,\n                type:\"\"\n            }\n        },\n        methods: {\n            isJsonString(str) {\n                try {\n                    if (typeof JSON.parse(str) === \"object\") {\n                        return true;\n                    }\n                } catch(e) {\n                }\n                return false;\n            },\n            getApiInfo() {\n                let self = this;\n                let param = {project_id: self.$route.params.project_id, api_id: self.$route.params.api_id};\n                axios.get(test+\"/api/api/api_info\", {params:param}).then(response => {\n                    let data=response.data;\n                    if (response.data.code === '999999') {\n                        self.form.method = data.data.requestType;\n                        self.form.http = data.data.httpType.toLowerCase();\n                        self.form.addr = data.data.apiAddress;\n                        if (data.data.headers.length) {\n                            data.data.headers.forEach((item) => {\n                                this.$refs.apiRequest.addHead(item);\n                            });\n                        } else {\n                            this.$refs.apiRequest.addEmptyHead();\n                        }\n                        if (data.data.requestParameter.length) {\n                            data.data.requestParameter.forEach((item) => {\n                                this.$refs.apiRequest.addParameter(item);\n                            });\n                        } else {\n                            this.$refs.apiRequest.addEmptyParameter();\n                        }\n                        try {\n                            this.$refs.apiRequest.requestParameter.parameterRaw = data.data.requestParameterRaw[0].data;\n                        } catch (e) {\n\n                        }\n                        this.$refs.apiRequest.requestParameterType = data.data.requestParameterType;\n                        self.type=data.data.type;\n                        self.getHost();\n                    }else {\n                        self.$message.error({\n                            message: data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            getHistory() {\n                let self = this;\n                this.listLoading = true;\n                let params={project_id: this.$route.params.project_id, api_id: self.$route.params.api_id};\n                axios.get(test+\"/api/api/history_list\", { params: params}).then(response => {\n                    self.listLoading = false;\n                    if (response.data.code === '999999') {\n                        self.requestHistory = response.data.data\n                        // data.data.data.forEach((item) => {\n                        //     self.requestHistory.push(item)\n                        // })\n                    }\n                    else {\n                        self.$message.error({\n                            message: response.data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            AddHistroy(code) {\n                let self = this;\n                this.listLoading = true;\n                let params = JSON.stringify({ project_id: Number(this.$route.params.project_id),\n                    api_id: Number(self.$route.params.api_id),\n                    requestType :self.form.method,\n                    requestAddress: self.form.http + \"://\" + self.form.env + self.form.addr,\n                    httpCode: code\n                });\n                let headers={\"Content-Type\": \"application/json\",Authorization: 'Token '+sessionStorage.getItem('token')};\n                axios.post(test+\"/api/api/add_history\", params,{ headers: headers}).then(response => {\n                    self.listLoading = false;\n                    if (response.data.code === '999999') {\n                        self.getHistory()\n                    }\n                    else {\n                        self.$message.error({\n                            message: response.data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            delHistory(row) {\n                let self = this;\n                let params = JSON.stringify({\n                    project_id: Number(self.$route.params.project_id),\n                    api_id: Number(self.$route.params.api_id),\n                    id: Number(row.id)\n                });\n                let headers={\"Content-Type\": \"application/json\",Authorization: 'Token '+sessionStorage.getItem('token')};\n                axios.post(test+\"/api/api/del_history\", params,{ headers: headers}).then(response => {\n                    if (response.data.code === '999999') {\n                        this.getHistory();\n                        self.$message.success({\n                            message: \"删除成功！\",\n                            center: true,\n                        })\n                    }\n                    else {\n                        self.$message.error({\n                            message: response.data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            getHost() {\n                let self = this;\n                let headers = {\n                    Authorization: 'Token '+sessionStorage.getItem('token')\n                };\n                let params={project_id: self.$route.params.project_id,page: self.page, name: \"\", type: \"env\"};\n                axios.get(`${test}/api/project/config_list`, { params: params, headers:headers}).then(res => {\n                    let data=res.data;\n                    if (data.code === '999999') {\n                        data.data.data.forEach((item) => {\n                            if (item.status) {\n                                self.Host.push(item)\n                            }\n                        })\n                    }else {\n                        self.$message.error({\n                            message: data.msg,\n                            center: true,\n                        })\n                    }\n                });\n            },\n            Test: function() {\n                this.$refs.form.validate((valid) => {\n                    if (valid) {\n                        this.loadingSend = true;\n                        let self = this;\n                        let _parameter = new Object();\n                        let headers = new Object();\n                        self.form.statusCode = '';\n                        self.form.resultData = '';\n                        self.form.resultHead = '';\n                        let head=this.$refs.apiRequest.head;\n                        for (let i = 0; i < head.length; i++) {\n                            var a = head[i][\"name\"];\n                            if (a) {\n                                headers[a] = head[i][\"value\"]\n                            }\n                        }\n                        let address = this.form.addr;\n                        let url=\"\";\n                        let env=\"\";\n                        if (address.indexOf(\"http://\") ===0||address.indexOf(\"https://\") ===0){\n                            url=address;\n                            if(self.form.env!=\"\")env=self.form.env;\n                        }else{\n                            url = self.form.http + \"://\" + self.form.env + address;\n                        }\n                        let contentType = this.$refs.apiRequest.requestParameterType;\n                        let parameters=this.$refs.apiRequest.parameters;\n                        if ( contentType === 'application/x-www-form-urlencoded'||contentType === 'application/json'||contentType === 'text/plain') {\n                            for (let i = 0; i < parameters.length; i++) {\n                                var a = parameters[i][\"name\"];\n                                if (a) {\n                                    if(parameters[i][\"_type\"]==\"Object\"||parameters[i][\"_type\"]==\"Array\"){\n                                        _parameter[a] = JSON.parse(parameters[i][\"value\"]);\n                                    }else{\n                                        _parameter[a] = parameters[i][\"value\"];\n                                    }\n                                }\n                            }\n                        } else {\n                            // POST(url, self.form.parameterRaw, headers)\n                            _parameter = this.$refs.apiRequest.parameterRaw;\n                        }\n                        let params = JSON.stringify({project_id:self.$route.params.project_id,api_id: self.$route.params.api_id,url:url,headers:headers,data:_parameter,env:env});\n                        axios.post(test+\"/api/api/run_api\", params,{ headers:{\"Content-Type\": \"application/json\",Authorization: 'Token '+sessionStorage.getItem('token')} }).then(response => {\n                            self.loadingSend = false;\n                            self.form.statusCode = response.data[\"data\"][\"result\"][0];\n                            self.form.resultData = response.data[\"data\"][\"result\"][1];\n                            self.form.resultHead = response.data[\"data\"][\"result\"][2];\n//                                self.AddHistroy(jqXHR.status)\n                        }).catch(error=>{\n                        });\n                    }\n                })\n            },\n            neatenFormat() {\n                this.format = !this.format;\n            },\n            showBody() {\n                this.resultShow = true\n            },\n            showHeader() {\n                this.resultShow = false\n            },\n            handleChange(val) {\n            },\n            onSubmit() {\n                console.log('submit!');\n            },\n        },\n        mounted() {\n            this.getApiInfo();\n            this.getHistory()\n        }\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n    .return-list {\n        margin-top: 0px;\n        margin-bottom: 10px;\n        border-radius: 25px;\n    }\n    .head-class {\n        font-size: 17px\n    }\n    .parameter-a {\n        display: block;\n    }\n    .parameter-b {\n        display: none;\n    }\n    .selectInput {\n        position: absolute;\n        /*margin-left: 7px;*/\n        padding-left: 9px;\n        width: 180px;\n        /*border-radius:0px;*/\n        /*height: 38px;*/\n        left: 1px;\n        border-right: 0px;\n    }\n    .HOST {\n        position: absolute;\n        right: 30px;\n        top: 0px;\n    }\n    .raw {\n        border: 1px solid #e6e6e6;\n        margin-bottom: 10px;\n        padding:15px;\n        text-align: center\n    }\n</style>\n<style lang=\"scss\">\n    .selectInput{\n        input{\n            border-right: 0px;\n            border-radius: 4px 0px 0px 4px;\n        }\n    }\n</style>\n"]}]}