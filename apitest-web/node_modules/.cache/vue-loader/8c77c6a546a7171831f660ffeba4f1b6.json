{"remainingRequest":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/huangrong/workspace/apitest/apitest-web/src/views/project/api/apiInfo.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/huangrong/workspace/apitest/apitest-web/src/views/project/api/apiInfo.vue","mtime":1588927473913},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { test } from '@/api/api'\nimport $ from 'jquery'\nimport axios from 'axios'\nexport default {\n    data() {\n        return {\n            activeNames: ['2', '3', '4'],\n            id: \"\",\n            httpType: \"\",\n            requestType: \"\",\n            type: \"\",\n            addr: \"\",\n            apiName: \"\",\n            updateTime: \"\",\n            head: [],\n            ParameterType: true,\n            requestParameterType: \"\",\n            parameter: [],\n            parameterRaw: \"\",\n            response: [],\n            mockCode: \"\",\n            mockData: \"\",\n            mockJsonData: \"\",\n            httpCode: [{value: '200', label: '200'},\n                {value: '404', label: '404'},\n                {value: '400', label: '400'},\n                {value: '500', label: '500'},\n                {value: '502', label: '502'},\n                {value: '302', label: '302'}],\n            resultShow: true,\n            status: true,\n            listLoadingHead: false,\n            listLoadingParameter: false,\n            listLoadingResponse: false,\n            parameterInfoVisible: false,\n            parameterInfo: [],\n            responseInfoVisible: false,\n            responseInfo: [],\n            format: false,\n        }\n    },\n    methods: {\n        getApiInfo() {\n            let self = this;\n            self.listLoadingHead = true;\n            self.listLoadingParameter = true;\n            self.listLoadingResponse = true;\n            let param = {project_id: self.$route.params.project_id, api_id: self.$route.params.api_id};\n            axios.get(test+\"/api/api/api_info\", {params:param}).then(response => {\n                self.listLoadingHead = false;\n                self.listLoadingParameter = false;\n                self.listLoadingResponse = false;\n                if (response.data.code === '999999') {\n                    let data = response.data.data;\n                    self.id = data.id;\n                    self.httpType = data.httpType;\n                    self.type = data.type;\n                    self.requestType = data.requestType;\n                    self.addr = data.apiAddress;\n                    self.apiName = data.name;\n                    self.updateTime = data.lastUpdateTime;\n                    self.status = data.status;\n                    self.head = data.headers;\n                    self.requestParameterType = data.requestParameterType;\n                    self.parameter = data.requestParameter;\n                    try {\n                        self.parameterRaw = data.requestParameterRaw.data;\n                    } catch (e){\n\n                    }\n                    self.response = data.response;\n                    self.mockCode = data.mockCode;\n                    self.mockData = data.data;\n                    if (data.data) {\n                        self.mockJsonData = JSON.parse(data.data)\n                    }\n                }\n                else {\n                    self.$message.error({\n                        message: response.data.msg,\n                        center: true,\n                    })\n                }\n            }).catch(error=>{\n\n            });\n        },\n        formatChange() {\n        },\n        changFormat() {\n            let demo = document.getElementsByTagName('pre')[0];\n            console.log(demo)\n            hljs.highlightBlock(demo);\n            this.resultShow = !this.resultShow\n        },\n        lookParameterInfo(index) {\n            this.parameterInfoVisible = true;\n            this.parameterInfo = this.parameter[index]\n        },\n        lookResponseInfo(index) {\n            this.responseInfoVisible = true;\n            this.responseInfo = this.response[index]\n        },\n        parameterTypeChange() {\n            if (this.requestParameterType === 'application/x-www-form-urlencoded'||this.requestParameterType === 'application/json'||this.requestParameterType === 'text/plain') {\n                this.ParameterType = true\n            } else {\n                this.ParameterType = false\n            }\n        }\n    },\n    watch: {\n        parameterType() {\n            this.parameterTypeChange()\n        }\n    },\n    mounted() {\n        this.getApiInfo();\n        this.formatChange()\n    }\n}\n",null]}