{"remainingRequest":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/huangrong/workspace/apitest/apitest-web/src/views/project/api/fastTest.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/huangrong/workspace/apitest/apitest-web/src/views/project/api/fastTest.vue","mtime":1588815975519},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n    import $ from 'jquery'\n    import VuePopper from \"element-ui/src/utils/vue-popper\";\n    import { test } from '@/api/api'\n    import ApiRequest from './apiRequest.vue'\n    import axios from 'axios'\n    export default {\n        components: {VuePopper,ApiRequest},\n        data() {\n            return {\n                type: [{value: 'http', label: '普通http'},\n                    {value: 'jyb', label: '加油宝app'},\n                    {value: 'service', label: '微服务'}],\n                request: [{value: 'get', label: 'GET'},\n                    {value: 'post', label: 'POST'},\n                    {value: 'put', label: 'PUT'},\n                    {value: 'delete', label: 'DELETE'}],\n                Http: [{value: 'http', label: 'HTTP'},\n                    {value: 'https', label: 'HTTPS'}],\n                loadingSend: false,\n                result: true,\n                activeNames: ['2', '3', '4'],\n                Host: [{name: \"\", host: \"\"}],\n                id: \"\",\n                form: {\n                    url:\"\",\n                    method: 'POST',\n                    http: 'HTTP',\n                    type: 'http',\n                    addr: '',\n                    contentType: \"\",\n                    statusCode: \"\",\n                    resultData: \"\",\n                    resultHead: \"\",\n                    parameters: [],\n                    parameter: {},\n                    headDic: {},\n                    headers: [],\n                },\n                formRules: {\n                    env: [\n                        { required: false, message: '请选择测试环境', trigger: 'blur'}\n                    ],\n                    addr: [\n                        { required: true, message: '请输入地址', trigger: 'blur' },\n                    ]\n                },\n                resultShow: true,\n                format: false,\n            }\n        },\n        methods: {\n            isJsonString(str) {\n                try {\n                    if (typeof JSON.parse(str) === \"object\") {\n                        return true;\n                    }\n                } catch(e) {\n                }\n                return false;\n            },\n            getHost() {\n                let self = this;\n                axios.get(test+\"/api/project/config_list\", {params:{ project_id: this.$route.params.project_id, page: this.page, type:'env'},headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                    let data=response.data;\n                    if (data.code === '999999') {\n                        data.data.data.forEach((item) => {\n                            if (item.status) {\n                                self.Host.push(item)\n                            }\n                        })\n                    }else {\n                        self.$message.error({\n                            message: data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            fastTest: function() {\n                this.$refs.form.validate((valid) => {\n                    if (valid) {\n                        this.loadingSend = true;\n                        let self = this;\n                        let head=this.$refs.apiRequest.head;\n                        self.form.statusCode = '';\n                        self.form.resultData = '';\n                        self.form.resultHead = '';\n                        self.form.headDic={};\n                        self.form.headers=[];\n                        for (let i = 0; i < head.length; i++) {\n                            var a = head[i][\"name\"];\n                            if (a) {\n                                self.form.headDic[a] = head[i][\"value\"];\n                                self.form.headers.push({\"name\":a,\"value\":head[i][\"value\"]});\n                            }\n                        }\n                        let address = self.form.addr;\n                        let url=\"\";\n                        let env=\"\";\n                        if (address.indexOf(\"http://\") ===0||address.indexOf(\"https://\") ===0){\n                            url=address;\n                            if(self.form.env!=\"\")env=self.form.env;\n                        }else{\n                            url = self.form.http + \"://\" + self.form.env + address;\n                        }\n                        self.form.contentType = self.$refs.apiRequest.requestParameterType;\n                        self.form.parameter=self.$refs.apiRequest.getParameters();\n                        self.form.parameters=self.$refs.apiRequest.parameters;\n                        let param = {project_id:self.$route.params.project_id,type:self.form.type,method:self.form.method,contentType:self.form.contentType,url:url,headers:self.form.headDic,data:self.form.parameter};\n                        axios.post(test+\"/api/api/run_api\", param,{headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                            let data=response.data;\n                            self.loadingSend = false;\n                            self.form.statusCode = data[\"data\"][\"result\"][0];\n                            self.form.resultData = data[\"data\"][\"result\"][1];\n                            self.form.resultHead = data[\"data\"][\"result\"][2];\n//                            $(\"#formResult\").text(JSON.stringify(self.form.resultData));\n                        }).catch(error=>{\n                            self.loadingSend = false;\n                            self.$message.error({\n                                message: \"执行失败,请重试.\",\n                                center: true,\n                            })\n                        });\n                    }\n                })\n            },\n            showBody() {\n                this.resultShow = true\n            },\n            showHeader() {\n                this.resultShow = false\n            },\n            handleChange(val) {\n            },\n            typeChanged(){\n                this.$refs.apiRequest.form.type=this.form.type;\n            },\n            addrChanged(){\n                this.$refs.apiRequest.form.addr=this.form.addr;\n            }\n        },\n        mounted() {\n            this.$refs.apiRequest.addEmptyHead();\n            this.$refs.apiRequest.addEmptyParameter();\n            this.getHost();\n        },\n    }\n",null]}