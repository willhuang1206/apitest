{"remainingRequest":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/huangrong/workspace/apitest/apitest-web/src/views/project/api/testApi.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/huangrong/workspace/apitest/apitest-web/src/views/project/api/testApi.vue","mtime":1588816148402},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n    import { test } from '@/api/api'\n    import ApiRequest from './apiRequest.vue'\n    import $ from 'jquery'\n    import axios from 'axios'\n    export default {\n        components: {ApiRequest},\n        data() {\n            return {\n                request: [{value: 'GET', label: 'GET'},\n                    {value: 'POST', label: 'POST'},\n                    {value: 'PUT', label: 'PUT'},\n                    {value: 'DELETE', label: 'DELETE'}],\n                Http: [{value: 'http', label: 'HTTP'},\n                    {value: 'https', label: 'HTTPS'}],\n                loadingSend: false,\n                result: true,\n                activeNames: ['2', '3', '4', '5'],\n                id: \"\",\n                Host: [],\n                form: {\n                    url: \"\",\n                    method: 'POST',\n                    http: 'http',\n                    addr: '',\n                    statusCode: \"\",\n                    resultData: \"\",\n                    resultHead: \"\",\n                },\n                formRules: {\n                    env: [\n                        { required: true, message: '请选择测试环境', trigger: 'blur'}\n                    ],\n                    addr: [\n                        { required: true, message: '请输入地址', trigger: 'blur' },\n                    ]\n                },\n                requestHistory: [],\n                listLoading: false,\n                headers: \"\",\n                parameters: \"\",\n                resultShow: true,\n                format: false,\n                type:\"\"\n            }\n        },\n        methods: {\n            isJsonString(str) {\n                try {\n                    if (typeof JSON.parse(str) === \"object\") {\n                        return true;\n                    }\n                } catch(e) {\n                }\n                return false;\n            },\n            getApiInfo() {\n                let self = this;\n                let param = {project_id: self.$route.params.project_id, api_id: self.$route.params.api_id};\n                axios.get(test+\"/api/api/api_info\", {params:param}).then(response => {\n                    let data=response.data;\n                    if (response.data.code === '999999') {\n                        self.form.method = data.data.requestType;\n                        self.form.http = data.data.httpType.toLowerCase();\n                        self.form.addr = data.data.apiAddress;\n                        if (data.data.headers.length) {\n                            data.data.headers.forEach((item) => {\n                                this.$refs.apiRequest.addHead(item);\n                            });\n                        } else {\n                            this.$refs.apiRequest.addEmptyHead();\n                        }\n                        if (data.data.requestParameter.length) {\n                            data.data.requestParameter.forEach((item) => {\n                                this.$refs.apiRequest.addParameter(item);\n                            });\n                        } else {\n                            this.$refs.apiRequest.addEmptyParameter();\n                        }\n                        try {\n                            this.$refs.apiRequest.requestParameter.parameterRaw = data.data.requestParameterRaw[0].data;\n                        } catch (e) {\n\n                        }\n                        this.$refs.apiRequest.requestParameterType = data.data.requestParameterType;\n                        self.type=data.data.type;\n                        self.getHost();\n                    }else {\n                        self.$message.error({\n                            message: data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            getHistory() {\n                let self = this;\n                this.listLoading = true;\n                let params={project_id: this.$route.params.project_id, api_id: self.$route.params.api_id};\n                axios.get(test+\"/api/api/history_list\", { params: params}).then(response => {\n                    self.listLoading = false;\n                    if (response.data.code === '999999') {\n                        self.requestHistory = response.data.data\n                        // data.data.data.forEach((item) => {\n                        //     self.requestHistory.push(item)\n                        // })\n                    }\n                    else {\n                        self.$message.error({\n                            message: response.data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            AddHistroy(code) {\n                let self = this;\n                this.listLoading = true;\n                let params = JSON.stringify({ project_id: Number(this.$route.params.project_id),\n                    api_id: Number(self.$route.params.api_id),\n                    requestType :self.form.method,\n                    requestAddress: self.form.http + \"://\" + self.form.env + self.form.addr,\n                    httpCode: code\n                });\n                let headers={\"Content-Type\": \"application/json\",Authorization: 'Token '+sessionStorage.getItem('token')};\n                axios.post(test+\"/api/api/add_history\", params,{ headers: headers}).then(response => {\n                    self.listLoading = false;\n                    if (response.data.code === '999999') {\n                        self.getHistory()\n                    }\n                    else {\n                        self.$message.error({\n                            message: response.data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            delHistory(row) {\n                let self = this;\n                let params = JSON.stringify({\n                    project_id: Number(self.$route.params.project_id),\n                    api_id: Number(self.$route.params.api_id),\n                    id: Number(row.id)\n                });\n                let headers={\"Content-Type\": \"application/json\",Authorization: 'Token '+sessionStorage.getItem('token')};\n                axios.post(test+\"/api/api/del_history\", params,{ headers: headers}).then(response => {\n                    if (response.data.code === '999999') {\n                        this.getHistory();\n                        self.$message.success({\n                            message: \"删除成功！\",\n                            center: true,\n                        })\n                    }\n                    else {\n                        self.$message.error({\n                            message: response.data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            getHost() {\n                let self = this;\n                let headers = {\n                    Authorization: 'Token '+sessionStorage.getItem('token')\n                };\n                let params={project_id: self.$route.params.project_id,page: self.page, name: \"\", type: \"env\"};\n                axios.get(`${test}/api/project/config_list`, { params: params, headers:headers}).then(res => {\n                    let data=res.data;\n                    if (data.code === '999999') {\n                        data.data.data.forEach((item) => {\n                            if (item.status) {\n                                self.Host.push(item)\n                            }\n                        })\n                    }else {\n                        self.$message.error({\n                            message: data.msg,\n                            center: true,\n                        })\n                    }\n                });\n            },\n            Test: function() {\n                this.$refs.form.validate((valid) => {\n                    if (valid) {\n                        this.loadingSend = true;\n                        let self = this;\n                        let _parameter = new Object();\n                        let headers = new Object();\n                        self.form.statusCode = '';\n                        self.form.resultData = '';\n                        self.form.resultHead = '';\n                        let head=this.$refs.apiRequest.head;\n                        for (let i = 0; i < head.length; i++) {\n                            var a = head[i][\"name\"];\n                            if (a) {\n                                headers[a] = head[i][\"value\"]\n                            }\n                        }\n                        let address = this.form.addr;\n                        let url=\"\";\n                        let env=\"\";\n                        if (address.indexOf(\"http://\") ===0||address.indexOf(\"https://\") ===0){\n                            url=address;\n                            if(self.form.env!=\"\")env=self.form.env;\n                        }else{\n                            url = self.form.http + \"://\" + self.form.env + address;\n                        }\n                        let contentType = this.$refs.apiRequest.requestParameterType;\n                        let parameters=this.$refs.apiRequest.parameters;\n                        if ( contentType === 'application/x-www-form-urlencoded'||contentType === 'application/json'||contentType === 'text/plain') {\n                            for (let i = 0; i < parameters.length; i++) {\n                                var a = parameters[i][\"name\"];\n                                if (a) {\n                                    if(parameters[i][\"_type\"]==\"Object\"||parameters[i][\"_type\"]==\"Array\"){\n                                        _parameter[a] = JSON.parse(parameters[i][\"value\"]);\n                                    }else{\n                                        _parameter[a] = parameters[i][\"value\"];\n                                    }\n                                }\n                            }\n                        } else {\n                            // POST(url, self.form.parameterRaw, headers)\n                            _parameter = this.$refs.apiRequest.parameterRaw;\n                        }\n                        let params = JSON.stringify({project_id:self.$route.params.project_id,api_id: self.$route.params.api_id,url:url,headers:headers,data:_parameter,env:env});\n                        axios.post(test+\"/api/api/run_api\", params,{ headers:{\"Content-Type\": \"application/json\",Authorization: 'Token '+sessionStorage.getItem('token')} }).then(response => {\n                            self.loadingSend = false;\n                            self.form.statusCode = response.data[\"data\"][\"result\"][0];\n                            self.form.resultData = response.data[\"data\"][\"result\"][1];\n                            self.form.resultHead = response.data[\"data\"][\"result\"][2];\n//                                self.AddHistroy(jqXHR.status)\n                        }).catch(error=>{\n                        });\n                    }\n                })\n            },\n            neatenFormat() {\n                this.format = !this.format;\n            },\n            showBody() {\n                this.resultShow = true\n            },\n            showHeader() {\n                this.resultShow = false\n            },\n            handleChange(val) {\n            },\n            onSubmit() {\n                console.log('submit!');\n            },\n        },\n        mounted() {\n            this.getApiInfo();\n            this.getHistory()\n        }\n    }\n",null]}