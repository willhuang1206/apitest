{"remainingRequest":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/huangrong/workspace/apitest/apitest-web/src/views/project/auto/autoReport.vue?vue&type=style&index=0&id=20a48983&scoped=true&lang=css&","dependencies":[{"path":"/Users/huangrong/workspace/apitest/apitest-web/src/views/project/auto/autoReport.vue","mtime":1588923684861},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.number-pass {\n    border-radius: 25px;\n    position: absolute;\n    height: 100px;\n    box-sizing: border-box;\n    color: #fff;\n    font-size: 25px;\n    text-align: center;\n    width: 100px;\n    top: -70px;\n    right: 350px;\n}\n.number-fail {\n    border-radius: 25px;\n    border: 1px solid #C4C4C4;\n    position: absolute;\n    height: 100px;\n    box-sizing: border-box;\n    /*color: #fff;*/\n    font-size: 25px;\n    text-align: center;\n    width: 100px;\n    top: -70px;\n    right: 240px;\n}\n.number-error {\n    border-radius: 25px;\n    position: absolute;\n    height: 100px;\n    box-sizing: border-box;\n    color: #fff;\n    font-size: 25px;\n    text-align: center;\n    width: 100px;\n    top: -70px;\n    right: 130px;\n}\n.number-total {\n    border-radius: 25px;\n    border: 1px solid #C4C4C4;\n    position: absolute;\n    height: 100px;\n    box-sizing: border-box;\n    /*color: #fff;*/\n    font-size: 25px;\n    text-align: center;\n    width: 100px;\n    top: -70px;\n    right: 20px;\n}\n.demo-table-expand {\n    font-size: 0;\n  }\n  .demo-table-expand label {\n      width: 90px;\n      color: #99a9bf;\n  }\n  .demo-table-expand .el-form-item {\n      margin-right: 0;\n      margin-bottom: 0;\n      width: 50%;\n  }\n.return-list {\n    margin-top: 0px;\n    margin-bottom: 10px;\n    border-radius: 25px;\n}\n",{"version":3,"sources":["autoReport.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqoCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"autoReport.vue","sourceRoot":"src/views/project/auto","sourcesContent":["<template>\n    <section>\n    <div class=\"main\">\n        <!--工具条-->\n      <el-container>\n      <el-header>\n        <el-col v-show=\"!report.visible\" :span=\"24\" class=\"toolbar\" style=\"padding-bottom: 0px;\">\n            <el-form :inline=\"true\" :model=\"filters\" @submit.native.prevent>\n                <!--<el-button v-show=\"!summaryTable.visible\" class=\"return-list\" @click=\"back\"><i class=\"el-icon-d-arrow-left\" style=\"margin-right: 5px\"></i>返回</el-button>-->\n                <!--<el-form-item v-show=\"summaryTable.visible\">-->\n                    <!--<el-input v-model.trim=\"filters.name\" placeholder=\"名称\" @keyup.enter.native=\"viewAutomationSummary\"></el-input>-->\n                <!--</el-form-item>-->\n                <el-form-item v-if=\"global\">\n                    <el-select v-model=\"project_id\"  placeholder=\"项目\">\n                        <el-option label=\"所有项目\" value=\"\"></el-option>\n                        <el-option v-for=\"(item,index) in projectlist\" :key=\"index+''\" :label=\"item.name\" :value=\"item.id\"></el-option>\n                    </el-select>\n                </el-form-item>\n                <el-form-item>\n                    <el-select v-model=\"type\"  placeholder=\"类型\">\n                        <el-option v-for=\"(item,index) in listType\" :label=\"item.label\" :value=\"item.value\"></el-option>\n                    </el-select>\n                </el-form-item>\n                <el-form-item prop=\"timeArray\">\n                    <el-date-picker  v-model=\"filters.testtime\" format=\"yyyy-MM-dd\" value-format=\"yyyy-MM-dd\" type=\"daterange\" :picker-options=\"pickerOptions\"\n                                     range-separator=\"至\" start-placeholder=\"开始时间\" end-placeholder=\"结束时间\" align=\"right\" ></el-date-picker>\n                </el-form-item>\n                <el-form-item>\n                    <el-button type=\"primary\" @click=\"handleSearch(type)\">查询</el-button>\n                </el-form-item>\n            </el-form>\n        </el-col>\n        <el-row v-show=\"report.visible\">\n            <el-col :span=\"5\" class='inline'>\n                <el-card class=\"box-card\">\n                    <h3><i class=\"\"/>{{report.data.name}}</h3>\n                </el-card>\n            </el-col>\n            <el-col :span=\"3\" class='inline'>\n                <el-card class=\"box-card\">\n                    <h3><i class=\"\"/>{{report.data.env}}</h3>\n                </el-card>\n            </el-col>\n            <el-col :span=\"4\" class='inline'>\n                <el-card class=\"box-card\">\n                    <h3><i class=\"\"/>{{report.data.testTime}}</h3>\n                </el-card>\n            </el-col>\n            <el-col :span=\"3\" class='inline'>\n                <el-card class=\"box-card\">\n                    <h3>\n                      <span v-show=\"report.data.status==='PASS'\" style=\"color: #11b95c;\">测试通过</span>\n                      <span v-show=\"report.data.status==='FAIL'\" style=\"color: #cc0000;\">测试失败</span>\n                    </h3>\n                </el-card>\n            </el-col>\n            <el-col :span=\"3\" class='inline'>\n                <el-card class=\"box-card\">\n                    <h3><i class=\"\"/>执行用例{{report.data.totalCount}}个</h3>\n                </el-card>\n            </el-col>\n            <el-col v-show=\"report.data.status==='FAIL'\" :span=\"2\" class='inline'>\n                <el-card class=\"box-card\">\n                    <h3><i class=\"\"/>失败{{report.data.failCount}}个</h3>\n                </el-card>\n            </el-col>\n            <el-col :span=\"3\" class='inline'>\n                <el-card class=\"box-card\">\n                    <h3><i class=\"\"/>耗时{{report.data.duration}}秒</h3>\n                </el-card>\n            </el-col>\n        </el-row>\n        </el-header>\n      <el-main>\n        <el-row v-show=\"!report.visible\">\n          <el-card v-show=\"autoChart.visible\" class=\"box-card\">\n            <div id=\"autoChart\" style=\"height:376px\"></div>\n          </el-card>\n        </el-row>\n        <el-row v-show=\"!report.visible\">\n          <el-card v-show=\"publishChart.visible\" class=\"box-card\">\n            <div id=\"publishChart\" style=\"height:376px\"></div>\n          </el-card>\n        </el-row>\n        <el-row v-show=\"!report.visible\">\n          <el-col :span=\"12\">\n        <el-card v-show=\"failChart.visible\" class=\"box-card\">\n          <div id=\"failTypeChart\" style=\"height:376px\"></div>\n        </el-card>\n            </el-col>\n          <el-col :span=\"12\">\n        <el-card v-show=\"failChart.visible\" class=\"box-card\">\n          <div id=\"failSeverityChart\" style=\"height:376px\"></div>\n        </el-card>\n            </el-col>\n        </el-row>\n        <el-row>\n        <el-table :data=\"detailTable.list\" element-loading-text=\"拼命加载中\" element-loading-spinner=\"el-icon-loading\" v-loading=\"detailTable.loading\" v-show=\"detailTable.visible\" :row-style=\"tableRowStyle\">\n            <el-table-column type=\"expand\">\n                <template slot-scope=\"scope\">\n                    <el-table :data=\"scope.row.details\" highlight-current-row style=\"width: 100%;\">\n                        <el-table-column type=\"expand\">\n                            <template slot-scope=\"props\">\n                                <el-form label-position=\"left\" inline class=\"demo-table-expand\">\n                                    <el-row v-show=\"props.row.type==='api'\" :gutter=\"10\">\n                                        <el-form-item label=\"接口地址： \">\n                                            <span>{{ props.row.url }}</span>\n                                        </el-form-item>\n                                    </el-row>\n                                    <el-row v-show=\"props.row.type==='api'\" :gutter=\"10\">\n                                        <el-form-item label=\"请求方式： \">\n                                            <span>{{ props.row.method }}</span>\n                                        </el-form-item>\n                                    </el-row>\n                                    <el-row v-show=\"props.row.type==='api'\" :gutter=\"10\">\n                                        <el-form-item label=\"请求参数： \">\n                                            <span style=\"word-break: break-all;overflow:auto;overflow-x:hidden\">{{ props.row.data }}</span>\n                                        </el-form-item>\n                                    </el-row>\n                                    <el-row :gutter=\"10\">\n                                        <el-form-item label=\"返回结果： \">\n                                            <span>\n                                                <!--<pre style=\"word-break: break-all;overflow:auto;overflow-x:hidden\">-->\n                                                  <code v-show=\"props.row.type!=='api'\">{{ props.row.result }}</code>\n                                                <!--</pre>-->\n                                                  <json-viewer v-show=\"props.row.type==='api'\" :value=\"props.row.result\" :expand-depth=5 boxed copyable></json-viewer>\n                                            </span>\n                                        </el-form-item>\n                                    </el-row>\n                                </el-form>\n                            </template>\n                        </el-table-column>\n                        <el-table-column type=\"index\" width=\"55\">\n                        </el-table-column>\n                        <el-table-column prop=\"name\" label=\"名称\" min-width=\"20%\" show-overflow-tooltip>\n                            <template slot-scope=\"scope\">\n                                <span style=\"font-size: 16px\">{{scope.row.name}}</span>\n                            </template>\n                        </el-table-column>\n                        <el-table-column prop=\"result\" label=\"返回结果\" min-width=\"40%\" show-overflow-tooltip>\n                            <template slot-scope=\"scope\">\n                                <span style=\"font-size: 16px\">{{scope.row.result}}</span>\n                            </template>\n                        </el-table-column>\n                        <el-table-column prop=\"status\" label=\"执行状态\" min-width=\"10%\" show-overflow-tooltip>\n                            <template slot-scope=\"scope\">\n                                <span v-show=\"scope.row.status==='PASS'\" style=\"color: #11b95c;cursor:pointer;\">成功</span>\n                                <span v-show=\"scope.row.status==='FAIL'\" style=\"color: #cc0000;cursor:pointer;\">失败</span>\n                            </template>\n                        </el-table-column>\n                        <el-table-column prop=\"description\" label=\"描述\" min-width=\"30%\" show-overflow-tooltip>\n                            <template slot-scope=\"scope\">\n                                <span style=\"font-size: 16px\">{{scope.row.description}}</span>\n                            </template>\n                        </el-table-column>\n                    </el-table>\n                </template>\n            </el-table-column>\n            <el-table-column type=\"index\" label=\"#\" width=\"100\">\n            </el-table-column>\n            <el-table-column prop=\"name\" label=\"步骤名称\" min-width=\"20%\" sortable show-overflow-tooltip>\n                <template slot-scope=\"scope\">\n                    <span>{{scope.row.name}}</span>\n                </template>\n            </el-table-column>\n            <el-table-column prop=\"testTime\" label=\"测试时间\" min-width=\"15%\" sortable show-overflow-tooltip>\n            </el-table-column>\n            <el-table-column prop=\"duration\" label=\"执行时间(毫秒)\" min-width=\"15%\" sortable show-overflow-tooltip>\n            </el-table-column>\n            <el-table-column prop=\"result\" label=\"执行结果\" min-width=\"15%\" sortable show-overflow-tooltip>\n              <template slot-scope=\"scope\">\n                    <span v-show=\"scope.row.result==='PASS'\" style=\"color: #11b95c;\">PASS</span>\n                    <span v-show=\"scope.row.result==='FAIL'\" @click=\"handleUpdateFail(detailTable.parentResult)\" style=\"color: #cc0000;cursor:pointer;\">FAIL</span>\n                </template>\n            </el-table-column>\n        </el-table>\n        <el-table :data=\"resultTable.list\" stripe border element-loading-text=\"拼命加载中\" element-loading-spinner=\"el-icon-loading\" v-loading=\"resultTable.loading\" v-show=\"resultTable.visible\" :row-style=\"tableRowStyle\">\n            <el-table-column type=\"index\" label=\"#\" width=\"100\">\n            </el-table-column>\n            <el-table-column  prop=\"name\" label=\"名称\" min-width=\"20%\" sortable show-overflow-tooltip>\n                <template slot-scope=\"scope\">\n                    <el-icon name=\"name\"></el-icon>\n                    <router-link v-if=\"type==='case'\" :to=\"{ name: '自动化执行详情', params: {project_id: project_id,automation_id: scope.row.automation_id,trace:scope.row.trace}}\" style='text-decoration: none;'>{{ scope.row.name }}</router-link>\n                    <router-link v-if=\"type!=='case'\" :to=\"{ name: '自动化任务执行结果', params: {project_id: project_id,trace:scope.row.trace}}\" style='text-decoration: none;'>{{ scope.row.name }}</router-link>\n                </template>\n            </el-table-column>\n            <el-table-column prop=\"testTime\" label=\"测试时间\" min-width=\"15%\" sortable show-overflow-tooltip>\n            </el-table-column>\n            <el-table-column prop=\"env\" label=\"环境\" min-width=\"15%\" sortable show-overflow-tooltip>\n            </el-table-column>\n            <el-table-column prop=\"duration\" label=\"执行时间(毫秒)\" min-width=\"15%\" sortable show-overflow-tooltip>\n            </el-table-column>\n            <el-table-column prop=\"result\" label=\"测试结果\" min-width=\"15%\" sortable show-overflow-tooltip>\n              <template slot-scope=\"scope\">\n                    <span v-show=\"scope.row.result==='PASS'\" style=\"color: #11b95c;\">PASS</span>\n                    <span v-show=\"scope.row.result==='FAIL'\" :title=\"scope.row.failDetail\" @click=\"handleUpdateFail(scope.row)\" style=\"color: #cc0000;cursor:pointer;\">FAIL<span v-if=\"scope.row.failType\">({{failType[scope.row.failType]}}原因)</span></span>\n                </template>\n            </el-table-column>\n            <el-table-column v-if=\"type==='case'\" label=\"操作\" min-width=\"20%\">\n                <template slot-scope=\"scope\">\n                    <router-link :to=\"{ name: '自动化步骤列表', params: {automation_id: scope.row.automation_id}}\" style='text-decoration: none;'><el-button type=\"primary\" size=\"small\">查看用例</el-button></router-link>\n                </template>\n            </el-table-column>\n        </el-table>\n        <!--工具条-->\n        <el-col v-show=\"resultTable.visible\" :span=\"24\" class=\"toolbar\">\n          <el-pagination layout=\"total, prev, pager, next\" @current-change=\"handleResultPage\" :current-page.sync=\"resultTable.page\" :page-size=\"resultTable.pageSize\" :page-count=\"resultTable.pages\" :total=\"resultTable.total\" style=\"float:right;\">\n          </el-pagination>\n        </el-col>\n        <el-table :data=\"summaryTable.list\" stripe border element-loading-text=\"拼命加载中\" element-loading-spinner=\"el-icon-loading\" v-show=\"summaryTable.visible\" highlight-current-row v-loading=\"summaryTable.loading\" style=\"width: 100%;\">\n            <!--<el-table-column type=\"selection\" min-width=\"5%\">-->\n            <!--</el-table-column>-->\n            <el-table-column prop=\"automation_id\" label=\"ID\" min-width=\"5%\" sortable>\n            </el-table-column>\n            <el-table-column prop=\"name\" label=\"自动化名称\" min-width=\"20%\" sortable show-overflow-tooltip>\n                <template slot-scope=\"scope\">\n                    <el-icon name=\"name\"></el-icon>\n                    <router-link :to=\"{ name: '自动化执行结果', params: {project_id: project_id,automation_id: scope.row.automation_id}}\" style='text-decoration: none;'>{{ scope.row.name }}</router-link>\n                </template>\n            </el-table-column>\n            <el-table-column prop=\"total\" label=\"执行总数\" min-width=\"10%\" sortable show-overflow-tooltip>\n            </el-table-column>\n            <el-table-column prop=\"passed\" label=\"执行成功\" min-width=\"10%\" sortable show-overflow-tooltip>\n            </el-table-column>\n            <el-table-column prop=\"passRate\" label=\"通过率(%)\" min-width=\"10%\" sortable show-overflow-tooltip>\n            </el-table-column>\n            <el-table-column prop=\"duration\" label=\"执行总时间(毫秒)\" min-width=\"10%\" sortable show-overflow-tooltip>\n            </el-table-column>\n            <!--<el-table-column label=\"操作\" min-width=\"20%\">-->\n                <!--<template slot-scope=\"scope\">-->\n                    <!--<el-button type=\"primary\" size=\"small\" @click=\"viewAutomationResult('case',scope.row.automation_id)\">查看</el-button>-->\n                <!--</template>-->\n            <!--</el-table-column>-->\n        </el-table>\n        <!--工具条-->\n        <el-col v-show=\"summaryTable.visible\" :span=\"24\" class=\"toolbar\">\n          <el-pagination layout=\"total, prev, pager, next\" @current-change=\"handleSummaryPage\" :page-size=\"summaryTable.pageSize\" :current-page.sync=\"summaryTable.page\" :page-count=\"summaryTable.pages\" :total=\"summaryTable.total\" style=\"float:right;\">\n          </el-pagination>\n        </el-col>\n          <el-table :data=\"apiAutomatedTable.list\" stripe border element-loading-text=\"拼命加载中\" element-loading-spinner=\"el-icon-loading\" v-loading=\"apiAutomatedTable.loading\" v-show=\"apiAutomatedTable.visible\" :row-style=\"tableRowStyle\">\n            <el-table-column type=\"index\" label=\"#\" width=\"100\">\n            </el-table-column>\n            <el-table-column  prop=\"name\" label=\"名称\" min-width=\"20%\" sortable show-overflow-tooltip>\n            </el-table-column>\n            <el-table-column prop=\"num\" label=\"关联自动化数\" min-width=\"15%\" sortable show-overflow-tooltip>\n            </el-table-column>\n            <el-table-column prop=\"automationName\" label=\"关联自动化用例\" min-width=\"30%\" sortable show-overflow-tooltip>\n            </el-table-column>\n        </el-table>\n        <!--工具条-->\n        <el-col v-show=\"apiAutomatedTable.visible\" :span=\"24\" class=\"toolbar\">\n          <el-pagination layout=\"total, prev, pager, next\" @current-change=\"handleApiAutomatedTablePage\" :current-page.sync=\"apiAutomatedTable.page\" :page-size=\"20\" :page-count=\"apiAutomatedTable.pages\" :total=\"apiAutomatedTable.total\" style=\"float:right;\">\n          </el-pagination>\n        </el-col>\n          </el-row>\n      </el-main>\n      </el-container>\n      <el-dialog width=\"40%\" title=\"错误详情\" :visible.sync=\"failForm.visible\" :close-on-click-modal=\"false\">\n            <el-form :model=\"failForm.data\"  :rules=\"failForm.rules\" ref=\"failForm\" label-width=\"80px\">\n                <el-form-item label=\"类型\" label-width=\"83px\" prop=\"type\">\n                    <el-select v-model=\"failForm.data.type\" placeholder=\"类型\">\n                        <el-option v-for=\"(item,key) in failType\" :label=\"item\" :value=\"key\"></el-option>\n                    </el-select>\n                </el-form-item>\n                <el-form-item label=\"严重等级\" label-width=\"83px\" prop=\"severity\">\n                    <el-select v-model=\"failForm.data.severity\" placeholder=\"严重等级\">\n                        <el-option v-for=\"(item,index) in severity\" :key=\"index+''\" :label=\"item.label\" :value=\"item.value\"></el-option>\n                    </el-select>\n                </el-form-item>\n                <el-form-item label=\"根源\" prop='cause'>\n                    <el-input type=\"textarea\" :rows=\"2\" v-model.trim=\"failForm.data.cause\"></el-input>\n                </el-form-item>\n                <el-form-item label=\"详情\" prop='detail'>\n                    <el-input type=\"textarea\" :rows=\"2\" v-model.trim=\"failForm.data.detail\"></el-input>\n                </el-form-item>\n                <el-form-item label=\"关联缺陷\" prop='bug'>\n                    <el-input type=\"input\" v-model.trim=\"failForm.data.bug\"></el-input>\n                </el-form-item>\n            </el-form>\n            <div slot=\"footer\" class=\"dialog-footer\">\n                <el-button @click.native=\"failForm.visible = false\">取消</el-button>\n                <el-button type=\"primary\" @click.native=\"updateFailSubmit\" :loading=\"failForm.loading\">提交</el-button>\n            </div>\n        </el-dialog>\n    </div>\n    </section>\n</template>\n\n<script>\n    import { test } from '../../../api/api'\n    import $ from 'jquery'\n    import axios from 'axios'\n    export default {\n        name: \"automation-report\",\n        data(){\n            return {\n                project_id: this.$route.params.project_id,\n                automation_id: this.$route.params.automation_id,\n                type: \"autoChart\",\n                global: false,\n                report: {\n                    visible: false,\n                    data: {},\n                },\n                filters: {\n                    name: \"\",\n                    testtime: this.defaultDate(),\n                    start_time: \"\",\n                    end_time: \"\",\n                    project: \"\",\n                },\n                projectlist: [],\n                listType: [{value: 'autoChart', label: '用例执行统计'},\n                    {value: 'apiChart', label: '接口执行统计'},\n                    {value: 'publish', label: '发布项目统计'},\n                    {value: 'case', label: '用例执行情况'},\n                    {value: 'task', label: '任务执行情况'},\n                    {value: 'apiAutomated', label: '接口覆盖统计'},\n                    {value: 'dynamicChart', label: '项目动态统计'},\n                ],\n                summaryTable:{\n                    loading: false,\n                    visible: false,\n                    list: [],\n                    page: 1,\n                    pages: 0,\n                    total: 0,\n                    pageSize: 20,\n                },\n                resultTable:{\n                    loading: false,\n                    visible: false,\n                    list: [],\n                    page: 1,\n                    pages: 0,\n                    total: 0,\n                    pageSize:20,\n                },\n                detailTable:{\n                    loading: false,\n                    visible: false,\n                    list: [],\n                    parentResult: null,\n                },\n                apiAutomatedTable:{\n                    loading: false,\n                    visible: false,\n                    list: [],\n                    page: 1,\n                    pages: 0,\n                    total: 0,\n                },\n                stepTable:{\n                    visible: false,\n                    list: [],\n                    name: \"\"\n                },\n                autoChart:{\n                    visible: false,\n                },\n                publishChart:{\n                    visible: false,\n                },\n                failChart:{\n                    visible: false,\n                },\n                failType: {'code':'编码','env':'环境','data':'数据','other':'其他'},\n                severity: [{value: 'fatal', label: '致命的'},\n                     {value: 'critical', label: '严重的'},\n                    {value: 'major', label: '一般的'},\n                    {value: 'minor', label: '微小的'},\n                ],\n                failForm: {\n                    visible: false,\n                    loading: false,\n                    data:{\n                        id: \"\",\n                        type: \"code\",\n                        severity: \"major\",\n                        cause: \"\",\n                        detail: \"\",\n                        bug: \"\",\n                    },\n                    row: null,\n                    rules: {\n                        type: [\n                            { required: true, message: '请选择类型', trigger: 'blur'}\n                        ],\n                        severity: [\n                            { required: true, message: '请选择严重等级', trigger: 'blur'}\n                        ],\n                        cause: [\n                            { required: true, message: '请输入根源', trigger: 'blur' },\n                            { max: 256, message: '不能超过256个字符', trigger: 'blur' }\n                        ],\n                        detail: [\n                            { required: true, message: '请输入详情', trigger: 'blur' },\n                            { max: 1024, message: '不能超过1024个字符', trigger: 'blur' }\n                        ],\n                        bug: [\n                            { max: 50, message: '不能超过50个字符', trigger: 'blur' }\n                        ],\n                    },\n                },\n                pickerOptions: {\n                  shortcuts: [{\n                    text: '今天',\n                    onClick(picker) {\n                      const end = new Date();\n                      const start = new Date();\n                      picker.$emit('pick', [start, end])\n                    }\n                  },{\n                    text: '昨天',\n                    onClick(picker) {\n                      const end=new Date();\n                      end.setDate(end.getDate() - 1);\n                      const start=new Date();\n                      start.setDate(start.getDate() - 1);\n                      picker.$emit('pick', [start, end])\n                    }\n                  },{\n                    text: '本周',\n                    onClick(picker) {\n                      const end = new Date();\n                      const weekday = end.getDay() || 7;\n                      const start = new Date();\n                      start.setDate(start.getDate() - weekday + 1);\n                      picker.$emit('pick', [start, end]);\n                    }\n                  },{\n                    text: '上周',\n                    onClick(picker) {\n                      const end = new Date();\n                      const weekday = end.getDay() || 7;\n                      end.setDate(end.getDate() - weekday);\n                      const start = new Date();\n                      start.setDate(end.getDate() - 6);\n                      picker.$emit('pick', [start, end])\n                    }\n                  },{\n                    text: '最近一周',\n                    onClick(picker) {\n                      const end = new Date();\n                      const start = new Date();\n                      start.setDate(start.getDate() - 6);\n                      picker.$emit('pick', [start, end]);\n                    }\n                  },{\n                    text: '本月',\n                    onClick(picker) {\n                      const end = new Date();\n                      const start = new Date();\n                      start.setDate(1);\n                      picker.$emit('pick', [start, end])\n                    }\n                  },{\n                    text: '最近一个月',\n                    onClick(picker) {\n                      const end = new Date();\n                      const start = new Date();\n                      start.setTime(start.getTime() - 3600 * 1000 * 24 * 29);\n                      picker.$emit('pick', [start, end]);\n                    }\n                  }, {\n                    text: '最近三个月',\n                    onClick(picker) {\n                      const end = new Date();\n                      const start = new Date();\n                      start.setTime(start.getTime() - 3600 * 1000 * 24 * 89);\n                      picker.$emit('pick', [start, end]);\n                    }\n                  },{\n                    text: '今年',\n                    onClick(picker) {\n                      const end = new Date();\n                      const start = new Date();\n                      start.setMonth(0);\n                      start.setDate(1);\n                      picker.$emit('pick', [start, end]);\n                    }\n                  }]\n                },\n            }\n        },\n        methods: {\n            tableRowStyle(row) {\n                if (row.result === 'ERROR' || row.result === 'FAIL') {\n                    return \"background-color: #DC143C;\"\n                } else if(row.result === 'TimeOut'){\n                    return \"background-color: #FFE4C4;\"\n                }\n              },\n            filterHandler(value, row, column) {\n                return row.result === value;\n            },\n            handleSearch(type){\n                this.apiAutomatedTable.visible=false;\n                this.publishChart.visible=false;\n                if(type==\"case\"){\n                    this.summaryTable.page=1;\n                    this.autoChart.visible=false;\n                    this.failChart.visible=false;\n                    this.viewAutomationSummary();\n                }else if(type==\"autoChart\"){\n                    this.autoChart.visible=true;\n                    this.failChart.visible=true;\n                    this.viewAutomationChart();\n                    this.viewAutomationSummary();\n                }else if(type==\"apiChart\"){\n                    this.autoChart.visible=true;\n                    this.failChart.visible=false;\n                    this.viewApiChart();\n                }else if(type==\"dynamicChart\"){\n                    this.autoChart.visible=true;\n                    this.failChart.visible=false;\n                    this.viewDynamicChart();\n                }else if(type==\"publish\"){\n                    this.resultTable.page=1;\n                    this.autoChart.visible=true;\n                    this.publishChart.visible=true;\n                    this.failChart.visible=false;\n                    this.viewPublishChart();\n                    this.viewAutomationResult(type,\"\");\n                }else if(type==\"task\"){\n                    this.resultTable.page=1;\n                    this.autoChart.visible=false;\n                    this.failChart.visible=false;\n                    this.viewAutomationResult(type,\"\");\n                }else if(type==\"apiAutomated\"){\n                    this.apiAutomatedTable.page=1;\n                    this.autoChart.visible=false;\n                    this.failChart.visible=false;\n                    this.viewApiAutomated();\n                }\n            },\n            viewAutomationSummary() {\n                if(this.filters.testtime!=\"\"&&this.filters.testtime!=null){\n                    this.filters.start_time=this.filters.testtime[0];\n                    this.filters.end_time=this.filters.testtime[1];\n                }else{\n                    this.filters.start_time=\"\";\n                    this.filters.end_time=\"\";\n                }\n                this.summaryTable.visible=true;\n                this.resultTable.visible=false;\n                this.detailTable.visible=false;\n                this.summaryTable.loading = true;\n                let self = this;\n                let param={\n                        project_id: this.project_id,\n                        name: this.filters.name,\n                        start_time: this.filters.start_time,\n                        end_time: this.filters.end_time,\n                        page: self.summaryTable.page\n                    };\n                if(this.filters.start_time!=\"\"&&this.filters.end_time!=\"\"){\n                    self.summaryTable.pageSize=500;\n                    param[\"page_size\"]=self.summaryTable.pageSize;\n                }else{\n                    self.summaryTable.pageSize=20;\n                    param[\"page_size\"]=self.summaryTable.pageSize;\n                }\n                axios.get(test + \"/api/report/automation_summary\",{params:param,headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                    let data=response.data;\n                    self.summaryTable.loading = false;\n                    if (data.code === '999999') {\n//                            alert(data.data.data);\n                        self.summaryTable.total = data.data.total;\n                        self.summaryTable.pages = data.data.pages;\n                        self.summaryTable.list = [];\n//                            alert(data.data.data);\n                        data.data.data.forEach((item) =>{\n                            item[\"passRate\"]=parseFloat((item[\"passed\"]*100/item[\"total\"]).toFixed(1));\n                            self.summaryTable.list.push(item);\n                        })\n                    }\n                    else {\n                        self.$message.error({\n                            message: data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            viewAutomationChart() {\n                if(this.filters.testtime!=\"\"&&this.filters.testtime!=null){\n                    this.filters.start_time=this.filters.testtime[0];\n                    this.filters.end_time=this.filters.testtime[1];\n                }else{\n                    this.filters.start_time=\"\";\n                    this.filters.end_time=\"\";\n                }\n                let self = this;\n                let param={\n                        project_id: this.project_id,\n                        start_time: this.filters.start_time,\n                        end_time: this.filters.end_time\n                    };\n                axios.get(test + \"/api/report/automation_chart\",{params:param,headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                    let data=response.data;\n                    if (data.code === '999999') {\n                        this.autoChart.visible=true;\n                        this.drawbar(data.data.autoChart, \"autoChart\",\"用例执行统计\",\"bar\");\n                        if(data.data.failTypeChart.line_name.length>0){\n                            this.failChart.visible=true;\n                            this.drawpie(data.data.failTypeChart, \"failTypeChart\",\"失败类型\");\n                            this.drawpie(data.data.failSeverityChart, \"failSeverityChart\",\"失败严重等级\");\n                        }else{\n                            this.failChart.visible=false;\n                        }\n                    }\n                    else {\n                        self.$message.error({\n                            message: data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            viewPublishChart() {\n                if(this.filters.testtime!=\"\"&&this.filters.testtime!=null){\n                    this.filters.start_time=this.filters.testtime[0];\n                    this.filters.end_time=this.filters.testtime[1];\n                }else{\n                    this.filters.start_time=\"\";\n                    this.filters.end_time=\"\";\n                }\n                this.summaryTable.visible=false;\n                this.resultTable.visible=false;\n                this.detailTable.visible=false;\n                this.summaryTable.loading = true;\n                let self = this;\n                let param={\n                        project_id: this.project_id,\n                        start_time: this.filters.start_time,\n                        end_time: this.filters.end_time\n                    };\n                axios.get(test + \"/api/report/publish_chart\",{params:param,headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                    let data=response.data;\n                    if (data.code === '999999') {\n                        this.autoChart.visible=true;\n                        this.drawbar(data.data.publish_chart, \"autoChart\",\"发布项目统计-按日期\",\"bar\");\n                        this.publishChart.visible=true;\n                        this.drawpie(data.data.publish_pie, \"publishChart\",\"发布项目\");\n                    }\n                    else {\n                        self.$message.error({\n                            message: data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            viewApiChart() {\n                if(this.filters.testtime!=\"\"&&this.filters.testtime!=null){\n                    this.filters.start_time=this.filters.testtime[0];\n                    this.filters.end_time=this.filters.testtime[1];\n                }else{\n                    this.filters.start_time=\"\";\n                    this.filters.end_time=\"\";\n                }\n                this.summaryTable.visible=false;\n                this.resultTable.visible=false;\n                this.detailTable.visible=false;\n                this.summaryTable.loading = true;\n                let self = this;\n                let param={\n                        project_id: this.project_id,\n                        start_time: this.filters.start_time,\n                        end_time: this.filters.end_time\n                    };\n                axios.get(test + \"/api/report/api_chart\",{params:param,headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                    let data=response.data;\n                    if (data.code === '999999') {\n                        this.autoChart.visible=true;\n                        this.drawbar1(data.data, \"autoChart\",\"接口执行统计\",\"bar\");\n                    }\n                    else {\n                        self.$message.error({\n                            message: data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            viewDynamicChart() {\n                if(this.filters.testtime!=\"\"&&this.filters.testtime!=null){\n                    this.filters.start_time=this.filters.testtime[0];\n                    this.filters.end_time=this.filters.testtime[1];\n                }else{\n                    this.filters.start_time=\"\";\n                    this.filters.end_time=\"\";\n                }\n                this.summaryTable.visible=false;\n                this.resultTable.visible=false;\n                this.detailTable.visible=false;\n                this.summaryTable.loading = true;\n                let self = this;\n                let param={\n                        project_id: this.project_id,\n                        start_time: this.filters.start_time,\n                        end_time: this.filters.end_time\n                    };\n                axios.get(test + \"/api/report/dynamic_chart\",{params:param,headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                    let data=response.data;\n                    if (data.code === '999999') {\n                        this.autoChart.visible=true;\n                        this.drawbar1(data.data, \"autoChart\",\"项目动态统计\",\"bar\");\n                    }\n                    else {\n                        self.$message.error({\n                            message: data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            drawbar(test_bar_data, chartid,title,type) {\n                let echartBar = this.$echarts.init(document.getElementById(chartid));\n                echartBar.clear();\n                var option = {\n                    title: {\n                        text: title\n                    },\n                    tooltip : {\n                        trigger: 'axis'\n                    },\n                    toolbox: {\n                        show : true,\n                        feature : {\n                            mark : {show: true},\n                            dataView : {show: true, readOnly: false},\n                            magicType : {show: true, type: ['line', 'bar']},\n                            restore : {show: true},\n                            saveAsImage : {show: true}\n                        }\n                    },\n                    calculable : true,\n                    legend: {\n                        data:['执行数','通过率']\n                    },\n                    xAxis : [\n                        {\n                            type : 'category',\n                            data: test_bar_data.line_name,\n                            axisLabel: {\n                                interval: 0,\n                                rotate: 30,\n                            },\n                            axisPointer: {\n                                type: 'shadow'\n                            }\n                        }\n                    ],\n                    yAxis : [\n                        {\n                            type : 'value',\n                            name : '执行数'\n                        },\n                        {\n                            type : 'value',\n                            name : '通过率',\n                            min: 0,\n                            max: 100,\n                            interval: 20,\n                            axisLabel: {\n                                formatter: '{value}%'\n                            }\n                        }\n                    ],\n                    series : [\n                        {\n                            name: '执行数',\n                            type: type,\n                            itemStyle: {\n                                normal: {\n//                                    color:'#7cb5ec',\n                                    label : {\n                                        show: true, position: 'top'\n                                    }\n                                }\n                            },\n                            data: test_bar_data.line_x\n                        },\n                        {\n                            name: '通过率',\n                            type: 'line',\n                            smooth: true,\n                            yAxisIndex: 1,\n                            itemStyle: {\n                                normal: {\n                                    color:'#26B99A',\n                                    label : {\n                                        show: true, position: 'top'\n                                    }\n                                }\n                            },\n                            data: test_bar_data.line_x1\n                        }\n                    ]\n                };\n                echartBar.setOption(option);\n            },\n            drawbar1(test_bar_data, chartid,title,type) {\n                let echartBar = this.$echarts.init(document.getElementById(chartid));\n                echartBar.clear();\n                var option = {\n                    title: {\n                        text: title\n                    },\n                    tooltip : {\n                        trigger: 'axis'\n                    },\n                    toolbox: {\n                        show : true,\n                        feature : {\n                            mark : {show: true},\n                            dataView : {show: true, readOnly: false},\n                            magicType : {show: true, type: ['line', 'bar']},\n                            restore : {show: true},\n                            saveAsImage : {show: true}\n                        }\n                    },\n                    calculable : true,\n                    legend: {\n                        data:['执行数']\n                    },\n                    xAxis : [\n                        {\n                            type : 'category',\n                            data: test_bar_data.line_name,\n                            axisLabel: {\n                                interval: 0,\n                                rotate: 30,\n                            },\n                            axisPointer: {\n                                type: 'shadow'\n                            }\n                        }\n                    ],\n                    yAxis : [\n                        {\n                            type : 'value',\n                            name : '执行数'\n                        }\n                    ],\n                    series : [\n                        {\n                            name: '执行数',\n                            type: type,\n                            itemStyle: {\n                                normal: {\n                                    color:'#7cb5ec',\n                                    label : {\n                                        show: true, position: 'top'\n                                    }\n                                }\n                            },\n                            data: test_bar_data.line_x\n                        }\n                    ]\n                };\n                echartBar.setOption(option);\n            },\n            drawpie(data, chartid,title) {\n                let echartBar = this.$echarts.init(document.getElementById(chartid));\n                echartBar.clear();\n                var option = {\n                    title: {\n                        text: title + \"统计\",\n                    },\n                    tooltip: {\n                        trigger: 'item',\n                        formatter: '{a} <br/>{b} : {c} ({d}%)'\n                    },\n                    legend: {\n                        left: 'center',\n                        data: data.line_name,\n                    },\n                    series: [\n                        {\n                            name: title,\n                            type: 'pie',\n                            radius: '55%',\n                            center: ['50%', '60%'],\n                            data: data.line_data,\n                            label: {\n                                formatter: '{b} : {c} ({d}%)'\n                            },\n                            emphasis: {\n                                itemStyle: {\n                                    shadowBlur: 10,\n                                    shadowOffsetX: 0,\n                                    shadowColor: 'rgba(0, 0, 0, 0.5)'\n                                }\n                            }\n                        }\n                    ]\n                };\n                echartBar.setOption(option);\n            },\n            viewApiAutomated() {\n                this.summaryTable.visible=false;\n                this.resultTable.visible=false;\n                this.detailTable.visible=false;\n                this.apiAutomatedTable.visible=true;\n                this.apiAutomatedTable.loading=true;\n                let param={\n                    project_id: this.project_id,\n                    page: this.apiAutomatedTable.page,\n                };\n                let url=test + \"/api/report/apiautomatedcoverage\";\n                let self=this;\n                axios.get(url,{params:param,headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                    let data=response.data;\n                    self.apiAutomatedTable.loading = false;\n                    if (data.code === '999999') {\n                        self.apiAutomatedTable.list = data.data.data;\n                        self.apiAutomatedTable.pages=data.data.pages;\n                        self.apiAutomatedTable.total=data.data.total;\n                    }\n                    else {\n                        self.$message.error({\n                            message: data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            viewAutomationResult(type,automationId) {\n                this.type=type;\n                if(this.filters.testtime!=\"\"&&this.filters.testtime!=null){\n                    this.filters.start_time=this.filters.testtime[0];\n                    this.filters.end_time=this.filters.testtime[1];\n                }else{\n                    this.filters.start_time=\"\";\n                    this.filters.end_time=\"\";\n                }\n                this.summaryTable.visible=false;\n                this.resultTable.visible=true;\n                this.detailTable.visible=false;\n                this.resultTable.loading=true;\n                let param={\n                    project_id: this.project_id,\n                    start_time: this.filters.start_time,\n                    end_time: this.filters.end_time,\n                    page: this.resultTable.page,\n                    type: this.type,\n                };\n                let url=test + \"/api/report/automation_result\";\n                if(this.type==\"case\"){\n                    if(automationId!=\"\"){\n                        param[\"automation_id\"]=automationId;\n                        this.automation_id=automationId;\n                    }else if(this.$route.params.trace){\n                        param[\"trace\"]=this.$route.params.trace;\n                    }else{\n                        param[\"automation_id\"]=automationId;\n                        this.automation_id=param[\"automation_id\"]\n                    }\n                }else{\n                    url=test + \"/api/report/automations_result\";\n                }\n                let self=this;\n                axios.get(url,{params:param,headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                    let data=response.data;\n                    self.resultTable.loading = false;\n                    if (data.code === '999999') {\n                        self.resultTable.list = data.data.data;\n                        self.resultTable.pages=data.data.pages;\n                        self.resultTable.total=data.data.total;\n                        self.resultTable.pageSize=data.data.page_size;\n                        if(data.data.report){\n                            self.report.visible=true;\n                            self.report.data=data.data.report;\n                        }\n                    }\n                    else {\n                        self.$message.error({\n                            message: data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            viewAutomationDetail(id,trace) {\n                this.summaryTable.visible=false;\n                this.resultTable.visible=false;\n                this.detailTable.visible=true;\n                this.detailTable.loading=true;\n                let self=this;\n                let param={\n                        automation_id: id,\n                        trace: trace\n                    };\n                axios.get(test + \"/api/report/automation_detail\",{params:param,headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                    let data=response.data;\n                    self.detailTable.loading = false;\n                    if (data.code === '999999') {\n                        self.detailTable.list = data.data.results;\n                        self.detailTable.parentResult=data.data.parentResult;\n                    }\n                    else {\n                        self.$message.error({\n                            message: data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            // 翻页\n            handleSummaryPage(val) {\n                this.summaryTable.page = val;\n                this.viewAutomationSummary();\n            },\n            // 翻页\n            handleApiAutomatedTablePage(val) {\n                this.apiAutomatedTable.page = val;\n                this.viewApiAutomated();\n            },\n            handleResultPage(val) {\n                this.resultTable.page = val;\n                if(this.$route.params.automation_id){\n                    this.viewAutomationResult(this.type,this.$route.params.automation_id);\n                }else{\n                    this.viewAutomationResult(this.type,\"\");\n                }\n            },\n            defaultDate(){\n                //获取新的时间(2019.4.12）\n                let date = new Date();\n                //获取当前时间的年份转为字符串\n                let year = date.getFullYear().toString();   //'2019'\n                //获取月份，由于月份从0开始，此处要加1，判断是否小于10，如果是在字符串前面拼接'0'\n                let month = date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1).toString() : (date.getMonth() + 1).toString();  //'04'\n                //获取天，判断是否小于10，如果是在字符串前面拼接'0'\n                let da = date.getDate() < 10 ? '0' + date.getDate().toString() : date.getDate().toString();  //'12'\n                //字符串拼接，开始时间，结束时间\n                let end = year + '-' + month + '-' + da;  //当天'2019-04-12'\n                let beg = year + '-' + month + '-01';    //当月第一天'2019-04-01'\n                return [beg, end]; //将值设置给插件绑定的数据\n            },\n            handleUpdateFail(row){\n                this.failForm.visible=true;\n                this.failForm.data={id:row.id,type:row.failType,severity:row.failSeverity,cause:row.failCause,detail:row.failDetail,bug:row.failBug};\n                this.failForm.row=row;\n            },\n            updateFailSubmit() {\n                this.$refs.failForm.validate((valid) => {\n                    if (valid) {\n                        this.$confirm('确认提交吗？', '提示', {}).then(() => {\n                            let self = this;\n                            let param=JSON.stringify({\n                                    project_id: this.$route.params.project_id,\n                                    result_id: this.failForm.data.id,\n                                    type: this.failForm.data.type,\n                                    severity: this.failForm.data.severity,\n                                    cause: this.failForm.data.cause,\n                                    detail: this.failForm.data.detail,\n                                    bug: this.failForm.data.bug,\n                                });\n                            axios.post(test + \"/api/report/updateresultfaildetail\",param,{headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                                let data=response.data;\n                                if (response.data.code === '999999') {\n                                    self.failForm.visible=false;\n                                    self.failForm.row.failType=this.failForm.data.type;\n                                    self.failForm.row.failSeverity=this.failForm.data.severity;\n                                    self.failForm.row.failCause=this.failForm.data.cause;\n                                    self.failForm.row.failDetail=this.failForm.data.detail;\n                                    self.failForm.row.failBug=this.failForm.data.bug;\n                                    self.$message({\n                                        message: '更新成功',\n                                        center: true,\n                                        type: 'success'\n                                    })\n                                } else {\n                                    self.$message.error({\n                                        message: response.data.msg,\n                                        center: true,\n                                    })\n                                }\n                            }).catch(error=>{});\n                        }).catch(() => {});\n                    }\n                });\n            },\n            // 获取项目列表\n            getProjectList() {\n                this.listLoading = true;\n                let self = this;\n                let params = { page: 1, page_size: 100, status: true};\n                let headers = {Authorization: 'Token '+sessionStorage.getItem('token')};\n                axios.get(`${test}/api/project/project_list`, { params: params, headers:headers}).then((res) => {\n                    let { msg, code, data } = res.data;\n                    if (code === '999999') {\n                        self.projectlist = data.data;\n                    }else {\n                        self.$message.error({\n                            message: msg,\n                            center: true,\n                        })\n                    }\n                })\n            },\n            init(){\n                this.autoChart.visible=false;\n                this.failChart.visible=false;\n                if(this.$route.params.project_id){\n                    this.project_id=this.$route.params.project_id;\n                    this.global=false;\n                }else{\n                    this.global=true;\n                    this.getProjectList();\n                }\n                if(this.$route.params.automation_id){\n                    this.automation_id=this.$route.params.automation_id;\n                    if(!this.$route.params.trace){\n                        this.viewAutomationResult('case',this.automation_id);\n                    }else{\n                        this.viewAutomationDetail(this.$route.params.automation_id,this.$route.params.trace);\n                    }\n                }else if(this.$route.params.trace){\n                    this.viewAutomationResult('case',\"\");\n                }\n            }\n        },\n        mounted() {\n            this.init();\n        },\n        watch: {\n            '$route' (to, from) { //监听路由是否变化\n              if(to.query!= from.query){\n                this.init();//重新加载数据\n              }\n            }\n        },\n    }\n</script>\n\n<style scoped>\n    .number-pass {\n        border-radius: 25px;\n        position: absolute;\n        height: 100px;\n        box-sizing: border-box;\n        color: #fff;\n        font-size: 25px;\n        text-align: center;\n        width: 100px;\n        top: -70px;\n        right: 350px;\n    }\n    .number-fail {\n        border-radius: 25px;\n        border: 1px solid #C4C4C4;\n        position: absolute;\n        height: 100px;\n        box-sizing: border-box;\n        /*color: #fff;*/\n        font-size: 25px;\n        text-align: center;\n        width: 100px;\n        top: -70px;\n        right: 240px;\n    }\n    .number-error {\n        border-radius: 25px;\n        position: absolute;\n        height: 100px;\n        box-sizing: border-box;\n        color: #fff;\n        font-size: 25px;\n        text-align: center;\n        width: 100px;\n        top: -70px;\n        right: 130px;\n    }\n    .number-total {\n        border-radius: 25px;\n        border: 1px solid #C4C4C4;\n        position: absolute;\n        height: 100px;\n        box-sizing: border-box;\n        /*color: #fff;*/\n        font-size: 25px;\n        text-align: center;\n        width: 100px;\n        top: -70px;\n        right: 20px;\n    }\n    .demo-table-expand {\n        font-size: 0;\n      }\n      .demo-table-expand label {\n          width: 90px;\n          color: #99a9bf;\n      }\n      .demo-table-expand .el-form-item {\n          margin-right: 0;\n          margin-bottom: 0;\n          width: 50%;\n      }\n    .return-list {\n        margin-top: 0px;\n        margin-bottom: 10px;\n        border-radius: 25px;\n    }\n</style>\n"]}]}