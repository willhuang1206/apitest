{"remainingRequest":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/huangrong/workspace/apitest/apitest-web/src/views/project/api/apiList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/huangrong/workspace/apitest/apitest-web/src/views/project/api/apiList.vue","mtime":1590476789715},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n//    import SelectTree from \"../../../components/treeSelect.vue\";\n    import Treeselect from '@riophae/vue-treeselect'\n    import '@riophae/vue-treeselect/dist/vue-treeselect.css'\n    import { test } from '../../../api/api'\n    import axios from 'axios'\n    export default {\n        components: {\n//          SelectTree,\n          Treeselect,\n        },\n        data() {\n            return {\n                filters: {\n                    name: '',\n                    type: '',\n                },\n                type: [{value: '', label: ''},\n                    {value: 'http', label: '普通http'},\n                    {value: 'jyb', label: '加油宝app'},\n                    {value: 'service', label: '微服务'}],\n                api: [],\n                total: 0,\n                page: 1,\n                pages: 0,\n                page_size:20,\n                listLoading: false,\n                sels: [],//列表选中列\n                updateGroupFormVisible: false,\n                updateGroupForm: {\n                    firstGroup: null,\n                },\n                updateGroupFormRules: {\n                    firstGroup : [{ type: 'number', required: true, message: '请选择分组', trigger: 'blur'}],\n                },\n                group: [],\n                updateGroupLoading: false,\n                update: true,\n                loadSwaggerApi: false,\n                addLoading: false,\n                //新增界面数据\n                swaggerUrl: \"\",\n                updatePublishForm: {\n                    visible: false,\n                    loading: false,\n                    publish: \"\",\n                    publishlist: [\"加油宝\",\"资产系统\"],\n                    rules: {\n                        publish : [{ type: 'string', required: true, message: '请选择发布项目', trigger: 'blur'}],\n                    },\n                },\n                importApi:{\n                    type: \"auto\",\n                    types: [{value: 'auto', label: 'auto'},\n                      {value: 'mock.fe', label: 'mock.fe'}],\n                    visible: false,\n                    loading: false,\n                    rules: {\n                        fromGroup : [{ type: 'string', required: true, message: '请选择源分组', trigger: 'blur'}],\n                        toGroup : [{ type: 'string', required: true, message: '请选择导入分组', trigger: 'blur'}],\n                    },\n                    value: null,\n                    fromGroup: null,\n                    toGroup: null,\n                    fromDate: \"\",\n                    toDate: \"\",\n                    groups: [],\n                    fileName: \"\",\n                },\n                uploadActionUrl: test + \"/api/imports/uploadfile\",\n                fileList: []\n            }\n        },\n        methods: {\n            handleUploadSuccess(res, file) {\n              this.importApi.fileName=file.name;\n            },\n            // 修改mock状态\n            checkMockStatus(row){\n                let self = this;\n                let param = JSON.stringify({\n                    project_id:Number(this.$route.params.project_id),\n                    id:Number(row.id)\n                });\n                axios.post(test+\"/api/api/updateMock\", param, {headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                    let data=response.data;\n                    self.listLoading = false;\n                    if (data.code === '999999') {\n                        self.$message.success({\n                            message: data.msg,\n                            center: true,\n                        });\n                        self.getApiList();\n                    }\n                    else {\n                        self.$message.error({\n                            message: data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n\t\t\t      },\n            handleSearch(){\n                this.page=1;\n                this.getApiList();\n            },\n            // 获取接口列表\n            getApiList() {\n                this.listLoading = true;\n                let self = this;\n                sessionStorage.setItem(\"api_name\",self.filters.name);\n                sessionStorage.setItem(\"api_type\",self.filters.type);\n                let param = { project_id: this.$route.params.project_id, page: self.page, name: self.filters.name,type: self.filters.type};\n                if (this.$route.params.firstGroup) {\n                    param['apiGroupLevelFirst_id'] = this.$route.params.firstGroup;\n                }\n                axios.get(test+\"/api/api/api_list\", {params:param,headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                    let data=response.data;\n                    self.listLoading = false;\n                    if (data.code === '999999') {\n                        self.total = data.data.total;\n                        self.pages=data.data.pages;\n                        self.page_size=data.data.page_size;\n                        self.api = data.data.data\n                    }\n                    else {\n                        self.$message.error({\n                            message: data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            // 获取接口列表\n            getDevApiGroupList() {\n                this.importApi.loading = true;\n                let self = this;\n                let param = {};\n                let url=test+\"/api/imports/apidomainlist\";\n                if(self.importApi.type==\"mock.fe\"){\n                    url=test+\"/api/imports/devapi_grouplist\";\n                }\n                axios.get(url, {params:param,headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                    let data=response.data;\n                    self.importApi.loading = false;\n                    if (data.code === '999999') {\n                        self.importApi.groups = data.data;\n                    }\n                    else {\n                        self.$message.error({\n                            message: data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            // 修改接口所属分组\n            importApiSubmit() {\n                let self = this;\n                this.$confirm('确认导入接口吗？', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    this.importApi.loading = true;\n                    //NProgress.start();\n                    let params = JSON.stringify({\n                        project_id:Number(this.$route.params.project_id),\n                        group_id: this.importApi.toGroup,\n                        fileName: this.importApi.fileName,\n                    });\n                    let url=test+\"/api/imports/api_importfrompostman\";\n                    axios.post(url, params,{headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                        let data=response.data;\n                        self.importApi.loading = false;\n                        if (data.code === '999999') {\n                            self.$message({\n                                message: data.msg,\n                                center: true,\n                                type: 'success'\n                            });\n                        }\n                        else {\n                            self.$message.error({\n                                message: data.msg,\n                                center: true,\n                            })\n                        }\n                        self.importApi.visible = false;\n                        self.getApiList();\n                    }).catch(error=>{\n\n                    });\n                }).catch(() => {\n\n                });\n            },\n            // 修改接口所属分组\n            updateGroupSubmit() {\n                let ids = this.sels.map(item => item.id);\n                let self = this;\n                this.$confirm('确认修改所属分组吗？', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    self.updateGroupLoading = true;\n                    //NProgress.start();\n                    let params = JSON.stringify({\n                        project_id:Number(this.$route.params.project_id),\n                        apiGroupLevelFirst_id: Number(self.updateGroupForm.firstGroup),\n                        ids: ids,\n                    });\n                    axios.post(test+\"/api/api/update_group\", params,{headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                        let data=response.data;\n                        self.updateGroupLoading = false;\n                        if (data.code === '999999') {\n                            self.$message({\n                                message: '修改成功',\n                                center: true,\n                                type: 'success'\n                            });\n                            self.$router.push({ name: '分组接口列表', params: { project_id: self.$route.params.project_id, firstGroup: self.updateGroupForm.firstGroup}});\n                        }\n                        else {\n                            self.$message.error({\n                                message: data.msg,\n                                center: true,\n                            })\n                        }\n                        self.updateGroupFormVisible = false;\n                        self.getApiList();\n                    }).catch(error=>{\n\n                    });\n                }).catch(() => {\n\n                });\n            },\n            // 修改接口所属发布项目\n            updatePublishSubmit() {\n                let ids = this.sels.map(item => item.id);\n                let self = this;\n                this.$confirm('确认修改发布项目吗？', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    self.updatePublishForm.loading = true;\n                    //NProgress.start();\n                    let params = JSON.stringify({\n                        project_id:Number(this.$route.params.project_id),\n                        publish: self.updatePublishForm.publish,\n                        ids: ids,\n                    });\n                    axios.post(test+\"/api/api/update_publish\", params,{headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                        let data=response.data;\n                        self.updatePublishForm.loading = false;\n                        if (data.code === '999999') {\n                            self.$message({\n                                message: '修改成功',\n                                center: true,\n                                type: 'success'\n                            });\n//\t\t\t\t\t\t\t\t                self.$router.push({ name: '分组接口列表', params: { project_id: self.$route.params.project_id, firstGroup: self.updateGroupForm.firstGroup}});\n                        }\n                        else {\n                            self.$message.error({\n                                message: data.msg,\n                                center: true,\n                            })\n                        }\n                        self.updatePublishForm.visible = false;\n                        self.getApiList();\n                    }).catch(error=>{\n\n                    });\n                }).catch(() => {\n\n                });\n            },\n            // 获取api分组\n            getApiGroup() {\n                let self = this;\n                axios.get(test+\"/api/api/group\", {params:{ project_id: this.$route.params.project_id},headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                    let data=response.data;\n                    if (data.code === '999999') {\n                        self.group = data.data;\n                    }\n                    else {\n                        self.$message.error({\n                            message: data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n\t\t\t// 修改分组弹窗\n            changeGroup() {\n                this.getApiGroup();\n                this.updateGroupFormVisible = true;\n            },\n            changePublish() {\n                this.updatePublishForm.visible = true;\n            },\n            handleImportApi() {\n                this.getApiGroup();\n                this.getDevApiGroupList();\n                this.importApi.visible = true;\n            },\n            //删除\n            handleDel: function (index, row) {\n                this.$confirm('确认删除接口[' + row.name + ']吗?', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    this.listLoading = true;\n                    //NProgress.start();\n                    let self = this;\n                    axios.post(test+\"/api/api/del_api\", JSON.stringify({ project_id: Number(this.$route.params.project_id), ids: [row.id] }),{headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                        let data=response.data;\n                        if (data.code === '999999') {\n                            self.$message({\n                                message: '删除成功',\n                                center: true,\n                                type: 'success'\n                            })\n                        } else {\n                            self.$message.error({\n                                message: data.msg,\n                                center: true,\n                            })\n                        }\n                        self.getApiList();\n                    }).catch(error=>{\n\n                    });\n                }).catch(() => {\n                });\n            },\n\t\t\t// 下载接口文档\n            DownloadApi() {\n                axios.get(test+\"/api/api/Download\", {params:{ project_id: this.$route.params.project_id},headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                    let data=response.data;\n                    if (data.code === \"999999\") {\n                        window.open(test+\"/api/api/download_doc?url=\"+data.data)\n                    }\n                }).catch(error=>{\n\n                });\n            },\n\t\t\t// 翻页\n            handleCurrentChange(val) {\n                this.page = val;\n                this.getApiList()\n            },\n            selsChange: function (sels) {\n                if (sels.length>0) {\n                    this.sels = sels;\n                    this.update = false\n                } else {\n                    this.update = true\n                }\n            },\n            //批量删除\n            batchRemove: function () {\n                let ids = this.sels.map(item => item.id);\n                let self = this;\n                this.$confirm('确认删除选中记录吗？', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    self.listLoading = true;\n                    //NProgress.start();\n                    axios.post(test+\"/api/api/del_api\", JSON.stringify({ project_id: Number(this.$route.params.project_id), ids: ids}),{headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                        let data=response.data;\n                        self.listLoading = false;\n                        if (data.code === '999999') {\n                            self.$message({\n                                message: '删除成功',\n                                center: true,\n                                type: 'success'\n                            })\n                        }\n                        else {\n                            self.$message.error({\n                                message: data.msg,\n                                center: true,\n                            })\n                        }\n                        self.getApiList();\n                    }).catch(error=>{\n\n                    });\n                }).catch(() => {\n                });\n            },\n            addSubmit(){\n                let self = this;\n                this.addLoading = true;\n                console.log(this.swaggerUrl);\n                if (this.swaggerUrl){\n                    axios.post(test+\"/api/api/lead_swagger\", JSON.stringify({ project_id: Number(this.$route.params.project_id), url: this.swaggerUrl}),{headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                        let data=response.data;\n                        if (data.code === '999999') {\n                            self.$message({\n                                message: '添加成功',\n                                center: true,\n                                type: 'success'\n                            });\n                            self.listLoading = true;\n                            self.addLoading = false;\n                            self.loadSwaggerApi = false;\n                            self.getApiList()\n                        }\n                        else {\n                            self.addLoading = false;\n                            self.$message.error({\n                                message: \"导入失败，请检查地址是否正确\",\n                                center: true,\n                            })\n                        }\n                        self.getApiList();\n                    }).catch(error=>{\n\n                    });\n                } else {\n                    this.addLoading = false\n                }\n            },\n            load(){\n                if(sessionStorage.getItem(\"api_name\")!=null){\n                    this.filters.name=sessionStorage.getItem(\"api_name\");\n                }\n                if(sessionStorage.getItem(\"api_type\")!=null){\n                    this.filters.type=sessionStorage.getItem(\"api_type\");\n                }\n                this.getApiList();\n                if (this.$route.params.firstGroup) {\n                    this.updateGroupForm.firstGroup = Number(this.$route.params.firstGroup);\n                    this.importApi.toGroup=Number(this.$route.params.firstGroup);\n                    sessionStorage.setItem(\"api_group\",this.$route.params.firstGroup);\n                }\n            },\n        },\n        mounted() {\n            this.load();\n        },\n        watch: {\n            '$route' (to, from) { //监听路由是否变化\n              if(to.query!= from.query){\n                this.load();\n              }\n            }\n        },\n    }\n",{"version":3,"sources":["apiList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqfile":"apiList.vue","sourceRoot":"src/views/project/api","sourcesContent":["<template>\n\t<section>\n\t\t<!--工具条-->\n\t\t<el-col :span=\"24\" class=\"toolbar\" style=\"padding-bottom: 0px;\">\n\t\t\t<el-form :inline=\"true\" :model=\"filters\" @submit.native.prevent>\n\t\t\t\t<el-form-item>\n\t\t\t\t\t<el-input v-model.trim=\"filters.name\" placeholder=\"名称\" @keyup.enter.native=\"handleSearch\"></el-input>\n\t\t\t\t</el-form-item>\n\t\t\t\t<el-form-item>\n            <el-select v-model=\"filters.type\"  placeholder=\"类型\">\n                <el-option v-for=\"(item,index) in type\" :label=\"item.label\" :value=\"item.value\"></el-option>\n            </el-select>\n        </el-form-item>\n\t\t\t\t<el-form-item>\n\t\t\t\t\t<el-button size=\"medium\" type=\"primary\" @click=\"handleSearch\">查询</el-button>\n\t\t\t\t</el-form-item>\n\t\t\t\t<el-form-item>\n\t\t\t\t\t<router-link :to=\"{ name: '新增接口', params: {project_id: this.$route.params.project_id}}\" style='text-decoration: none;color: aliceblue;'>\n\t\t\t\t\t\t<el-button size=\"medium\" type=\"primary\">新增</el-button>\n\t\t\t\t\t</router-link>\n\t\t\t\t</el-form-item>\n        <el-form-item>\n\t\t\t\t\t<el-button size=\"medium\" type=\"primary\" @click=\"handleImportApi\">导入</el-button>\n\t\t\t\t</el-form-item>\n\t\t\t\t<el-form-item>\n\t\t\t\t\t<el-button size=\"medium\" type=\"primary\" :disabled=\"update\" @click=\"changeGroup\">修改分组</el-button>\n\t\t\t\t</el-form-item>\n\t\t\t</el-form>\n\t\t</el-col>\n\t\t<el-dialog width=\"40%\" title=\"修改所属分组\" :visible.sync=\"updateGroupFormVisible\" :close-on-click-modal=\"false\">\n\t\t\t<el-form :model=\"updateGroupForm\" label-width=\"80px\" :rules=\"updateGroupFormRules\" ref=\"updateGroupForm\">\n\t\t\t\t<el-form-item label=\"分组名称\" prop=\"firstGroup\">\n            <treeselect v-model=\"updateGroupForm.firstGroup\" :options=\"group\" placeholder=\"请选择\"/>\n\t\t\t\t</el-form-item>\n\t\t\t</el-form>\n\t\t\t<div slot=\"footer\" class=\"dialog-footer\">\n\t\t\t\t<el-button @click.native=\"updateGroupFormVisible = false\">取消</el-button>\n\t\t\t\t<el-button type=\"primary\" @click.native=\"updateGroupSubmit\" :loading=\"updateGroupLoading\">提交</el-button>\n\t\t\t</div>\n\t\t</el-dialog>\n    <el-dialog width=\"40%\" title=\"设置发布项目\" :visible.sync=\"updatePublishForm.visible\" :close-on-click-modal=\"false\">\n\t\t\t<el-form :model=\"updatePublishForm\" label-width=\"80px\" :rules=\"updatePublishForm.rules\" ref=\"updatePublishForm\">\n\t\t\t\t<el-form-item label=\"发布项目\" prop=\"publish\">\n\t\t\t\t\t<el-select v-model=\"updatePublishForm.publish\" placeholder=\"请选择\">\n\t\t\t\t\t\t<el-option v-for=\"(item,index) in updatePublishForm.publishlist\" :key=\"index+''\" :label=\"item\" :value=\"item\">\n\t\t\t\t\t\t</el-option>\n\t\t\t\t\t</el-select>\n\t\t\t\t</el-form-item>\n\t\t\t</el-form>\n\t\t\t<div slot=\"footer\" class=\"dialog-footer\">\n\t\t\t\t<el-button @click.native=\"updatePublishForm.visible = false\">取消</el-button>\n\t\t\t\t<el-button type=\"primary\" @click.native=\"updatePublishSubmit\" :loading=\"updatePublishForm.loading\">提交</el-button>\n\t\t\t</div>\n\t\t</el-dialog>\n    <el-dialog width=\"40%\" title=\"导入接口\" :visible.sync=\"importApi.visible\" :close-on-click-modal=\"false\">\n\t\t\t<el-form label-width=\"80px\" :rules=\"importApi.rules\">\n        <el-form-item label=\"文件名:\" prop='importApi.fileName'>\n              <el-input v-model.trim=\"importApi.fileName\"></el-input>\n            </el-form-item>\n        <el-form-item label=\"导入分组:\" prop=\"importApi.toGroup\">\n          <treeselect v-model=\"importApi.toGroup\" :options=\"group\" placeholder=\"请选择\"/>\n\t\t\t\t</el-form-item>\n        <el-upload\n              class=\"upload-demo\"\n              :action=\"uploadActionUrl\"\n              :on-success=\"handleUploadSuccess\"\n              :limit=\"1\"\n              accept=\".json\"\n              :file-list=\"fileList\">\n              <el-button size=\"small\" type=\"primary\">点击上传</el-button>\n              <div slot=\"tip\" class=\"el-upload__tip\">只能上传并导入json文件</div>\n            </el-upload>\n        </el-form>\n\t\t\t<div slot=\"footer\" class=\"dialog-footer\">\n\t\t\t\t<el-button @click.native=\"importApi.visible = false\">取消</el-button>\n\t\t\t\t<el-button type=\"primary\" @click.native=\"importApiSubmit\" :loading=\"importApi.loading\">提交</el-button>\n\t\t\t</div>\n\t\t</el-dialog>\n\t\t<!--列表-->\n\t\t<el-table :data=\"api\" stripe border element-loading-text=\"拼命加载中\" element-loading-spinner=\"el-icon-loading\" highlight-current-row v-loading=\"listLoading\" @selection-change=\"selsChange\" style=\"width: 100%;\">\n\t\t\t<el-table-column type=\"selection\" min-width=\"4%\">\n\t\t\t</el-table-column>\n      <el-table-column prop=\"id\" label=\"ID\" sortable min-width=\"8%\"></el-table-column>\n\t\t\t<el-table-column prop=\"name\" label=\"名称\" sortable min-width=\"14%\" show-overflow-tooltip>\n\t\t\t\t<template slot-scope=\"scope\">\n\t\t\t\t\t<!--<el-icon name=\"name\"></el-icon>-->\n\t\t\t\t\t<router-link :to=\"{ name: '基础信息', params: {api_id: scope.row.id}}\" style='text-decoration: none;'>{{ scope.row.name }}</router-link>\n\t\t\t\t</template>\n\t\t\t</el-table-column>\n\t\t\t<el-table-column prop=\"type\" label=\"类型\" min-width=\"6%\" show-overflow-tooltip>\n\t\t\t</el-table-column>\n\t\t\t<el-table-column prop=\"apiAddress\" label=\"地址\" min-width=\"20%\" show-overflow-tooltip>\n\t\t\t</el-table-column>\n\t\t\t<el-table-column prop=\"userUpdate\" label=\"更新人\" min-width=\"8%\" show-overflow-tooltip>\n\t\t\t</el-table-column>\n\t\t\t<el-table-column prop=\"lastUpdateTime\" label=\"更新日期\" min-width=\"15%\" show-overflow-tooltip>\n\t\t\t</el-table-column>\n\t\t\t<!--<el-table-column label=\"Mock\" min-width=\"7%\">-->\n\t\t\t\t<!--<template slot-scope=\"scope\">-->\n\t\t\t\t\t<!--<el-button v-if=\"scope.row.mockStatus\" type=\"success\" size=\"small\" @click=\"checkMockStatus(scope.row)\">关闭</el-button>-->\n\t\t\t\t\t<!--<el-button v-if=\"!scope.row.mockStatus\" type=\"info\" size=\"small\"  @click=\"checkMockStatus(scope.row)\">启动</el-button>-->\n\t\t\t\t<!--</template>-->\n\t\t\t<!--</el-table-column>-->\n\t\t\t<el-table-column label=\"操作\" min-width=\"15%\">\n\t\t\t\t<template slot-scope=\"scope\">\n          <!--<el-button-group>-->\n            <!--<router-link :to=\"{ name: '修改接口', params: {api_id: scope.row.id}}\" style='text-decoration: none;color: aliceblue;'>-->\n              <!--<el-button type=\"primary\" size=\"mini\">修改</el-button>-->\n            <!--</router-link>-->\n\t\t\t\t\t  <!--<el-button type=\"danger\" size=\"mini\" @click=\"handleDel(scope.$index, scope.row)\">删除</el-button>-->\n          <!--</el-button-group>-->\n          <el-dropdown>\n            <router-link :to=\"{ name: '修改接口', params: {api_id: scope.row.id}}\" style='text-decoration: none;color: aliceblue;'>\n              <el-button type=\"primary\" size=\"small\" plain>修改<i class=\"el-icon-arrow-down el-icon--right\"></i></el-button>\n            </router-link>\n            <el-dropdown-menu slot=\"dropdown\">\n              <el-dropdown-item><el-button type=\"danger\" size=\"small\" @click=\"handleDel(scope.$index, scope.row)\" plain>删除</el-button></el-dropdown-item>\n            </el-dropdown-menu>\n          </el-dropdown>\n\t\t\t\t</template>\n\t\t\t</el-table-column>\n\t\t</el-table>\n\n\t\t<!--工具条-->\n\t\t<el-col :span=\"24\" class=\"toolbar\">\n\t\t\t<el-button type=\"danger\" @click=\"batchRemove\" :disabled=\"this.sels.length===0\">批量删除</el-button>\n\t\t\t<el-pagination layout=\"total, prev, pager, next\" @current-change=\"handleCurrentChange\" :current-page.sync=\"page\" :total=\"total\" :page-size=\"page_size\" :page-count=\"pages\" style=\"float:right;\">\n\t\t\t</el-pagination>\n\t\t</el-col>\n\t</section>\n</template>\n\n<script>\n//    import SelectTree from \"../../../components/treeSelect.vue\";\n    import Treeselect from '@riophae/vue-treeselect'\n    import '@riophae/vue-treeselect/dist/vue-treeselect.css'\n    import { test } from '../../../api/api'\n    import axios from 'axios'\n    export default {\n        components: {\n//          SelectTree,\n          Treeselect,\n        },\n        data() {\n            return {\n                filters: {\n                    name: '',\n                    type: '',\n                },\n                type: [{value: '', label: ''},\n                    {value: 'http', label: '普通http'},\n                    {value: 'jyb', label: '加油宝app'},\n                    {value: 'service', label: '微服务'}],\n                api: [],\n                total: 0,\n                page: 1,\n                pages: 0,\n                page_size:20,\n                listLoading: false,\n                sels: [],//列表选中列\n                updateGroupFormVisible: false,\n                updateGroupForm: {\n                    firstGroup: null,\n                },\n                updateGroupFormRules: {\n                    firstGroup : [{ type: 'number', required: true, message: '请选择分组', trigger: 'blur'}],\n                },\n                group: [],\n                updateGroupLoading: false,\n                update: true,\n                loadSwaggerApi: false,\n                addLoading: false,\n                //新增界面数据\n                swaggerUrl: \"\",\n                updatePublishForm: {\n                    visible: false,\n                    loading: false,\n                    publish: \"\",\n                    publishlist: [\"加油宝\",\"资产系统\"],\n                    rules: {\n                        publish : [{ type: 'string', required: true, message: '请选择发布项目', trigger: 'blur'}],\n                    },\n                },\n                importApi:{\n                    type: \"auto\",\n                    types: [{value: 'auto', label: 'auto'},\n                      {value: 'mock.fe', label: 'mock.fe'}],\n                    visible: false,\n                    loading: false,\n                    rules: {\n                        fromGroup : [{ type: 'string', required: true, message: '请选择源分组', trigger: 'blur'}],\n                        toGroup : [{ type: 'string', required: true, message: '请选择导入分组', trigger: 'blur'}],\n                    },\n                    value: null,\n                    fromGroup: null,\n                    toGroup: null,\n                    fromDate: \"\",\n                    toDate: \"\",\n                    groups: [],\n                    fileName: \"\",\n                },\n                uploadActionUrl: test + \"/api/imports/uploadfile\",\n                fileList: []\n            }\n        },\n        methods: {\n            handleUploadSuccess(res, file) {\n              this.importApi.fileName=file.name;\n            },\n            // 修改mock状态\n            checkMockStatus(row){\n                let self = this;\n                let param = JSON.stringify({\n                    project_id:Number(this.$route.params.project_id),\n                    id:Number(row.id)\n                });\n                axios.post(test+\"/api/api/updateMock\", param, {headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                    let data=response.data;\n                    self.listLoading = false;\n                    if (data.code === '999999') {\n                        self.$message.success({\n                            message: data.msg,\n                            center: true,\n                        });\n                        self.getApiList();\n                    }\n                    else {\n                        self.$message.error({\n                            message: data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n\t\t\t      },\n            handleSearch(){\n                this.page=1;\n                this.getApiList();\n            },\n            // 获取接口列表\n            getApiList() {\n                this.listLoading = true;\n                let self = this;\n                sessionStorage.setItem(\"api_name\",self.filters.name);\n                sessionStorage.setItem(\"api_type\",self.filters.type);\n                let param = { project_id: this.$route.params.project_id, page: self.page, name: self.filters.name,type: self.filters.type};\n                if (this.$route.params.firstGroup) {\n                    param['apiGroupLevelFirst_id'] = this.$route.params.firstGroup;\n                }\n                axios.get(test+\"/api/api/api_list\", {params:param,headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                    let data=response.data;\n                    self.listLoading = false;\n                    if (data.code === '999999') {\n                        self.total = data.data.total;\n                        self.pages=data.data.pages;\n                        self.page_size=data.data.page_size;\n                        self.api = data.data.data\n                    }\n                    else {\n                        self.$message.error({\n                            message: data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            // 获取接口列表\n            getDevApiGroupList() {\n                this.importApi.loading = true;\n                let self = this;\n                let param = {};\n                let url=test+\"/api/imports/apidomainlist\";\n                if(self.importApi.type==\"mock.fe\"){\n                    url=test+\"/api/imports/devapi_grouplist\";\n                }\n                axios.get(url, {params:param,headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                    let data=response.data;\n                    self.importApi.loading = false;\n                    if (data.code === '999999') {\n                        self.importApi.groups = data.data;\n                    }\n                    else {\n                        self.$message.error({\n                            message: data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            // 修改接口所属分组\n            importApiSubmit() {\n                let self = this;\n                this.$confirm('确认导入接口吗？', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    this.importApi.loading = true;\n                    //NProgress.start();\n                    let params = JSON.stringify({\n                        project_id:Number(this.$route.params.project_id),\n                        group_id: this.importApi.toGroup,\n                        fileName: this.importApi.fileName,\n                    });\n                    let url=test+\"/api/imports/api_importfrompostman\";\n                    axios.post(url, params,{headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                        let data=response.data;\n                        self.importApi.loading = false;\n                        if (data.code === '999999') {\n                            self.$message({\n                                message: data.msg,\n                                center: true,\n                                type: 'success'\n                            });\n                        }\n                        else {\n                            self.$message.error({\n                                message: data.msg,\n                                center: true,\n                            })\n                        }\n                        self.importApi.visible = false;\n                        self.getApiList();\n                    }).catch(error=>{\n\n                    });\n                }).catch(() => {\n\n                });\n            },\n            // 修改接口所属分组\n            updateGroupSubmit() {\n                let ids = this.sels.map(item => item.id);\n                let self = this;\n                this.$confirm('确认修改所属分组吗？', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    self.updateGroupLoading = true;\n                    //NProgress.start();\n                    let params = JSON.stringify({\n                        project_id:Number(this.$route.params.project_id),\n                        apiGroupLevelFirst_id: Number(self.updateGroupForm.firstGroup),\n                        ids: ids,\n                    });\n                    axios.post(test+\"/api/api/update_group\", params,{headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                        let data=response.data;\n                        self.updateGroupLoading = false;\n                        if (data.code === '999999') {\n                            self.$message({\n                                message: '修改成功',\n                                center: true,\n                                type: 'success'\n                            });\n                            self.$router.push({ name: '分组接口列表', params: { project_id: self.$route.params.project_id, firstGroup: self.updateGroupForm.firstGroup}});\n                        }\n                        else {\n                            self.$message.error({\n                                message: data.msg,\n                                center: true,\n                            })\n                        }\n                        self.updateGroupFormVisible = false;\n                        self.getApiList();\n                    }).catch(error=>{\n\n                    });\n                }).catch(() => {\n\n                });\n            },\n            // 修改接口所属发布项目\n            updatePublishSubmit() {\n                let ids = this.sels.map(item => item.id);\n                let self = this;\n                this.$confirm('确认修改发布项目吗？', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    self.updatePublishForm.loading = true;\n                    //NProgress.start();\n                    let params = JSON.stringify({\n                        project_id:Number(this.$route.params.project_id),\n                        publish: self.updatePublishForm.publish,\n                        ids: ids,\n                    });\n                    axios.post(test+\"/api/api/update_publish\", params,{headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                        let data=response.data;\n                        self.updatePublishForm.loading = false;\n                        if (data.code === '999999') {\n                            self.$message({\n                                message: '修改成功',\n                                center: true,\n                                type: 'success'\n                            });\n//\t\t\t\t\t\t\t\t                self.$router.push({ name: '分组接口列表', params: { project_id: self.$route.params.project_id, firstGroup: self.updateGroupForm.firstGroup}});\n                        }\n                        else {\n                            self.$message.error({\n                                message: data.msg,\n                                center: true,\n                            })\n                        }\n                        self.updatePublishForm.visible = false;\n                        self.getApiList();\n                    }).catch(error=>{\n\n                    });\n                }).catch(() => {\n\n                });\n            },\n            // 获取api分组\n            getApiGroup() {\n                let self = this;\n                axios.get(test+\"/api/api/group\", {params:{ project_id: this.$route.params.project_id},headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                    let data=response.data;\n                    if (data.code === '999999') {\n                        self.group = data.data;\n                    }\n                    else {\n                        self.$message.error({\n                            message: data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n\t\t\t// 修改分组弹窗\n            changeGroup() {\n                this.getApiGroup();\n                this.updateGroupFormVisible = true;\n            },\n            changePublish() {\n                this.updatePublishForm.visible = true;\n            },\n            handleImportApi() {\n                this.getApiGroup();\n                this.getDevApiGroupList();\n                this.importApi.visible = true;\n            },\n            //删除\n            handleDel: function (index, row) {\n                this.$confirm('确认删除接口[' + row.name + ']吗?', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    this.listLoading = true;\n                    //NProgress.start();\n                    let self = this;\n                    axios.post(test+\"/api/api/del_api\", JSON.stringify({ project_id: Number(this.$route.params.project_id), ids: [row.id] }),{headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                        let data=response.data;\n                        if (data.code === '999999') {\n                            self.$message({\n                                message: '删除成功',\n                                center: true,\n                                type: 'success'\n                            })\n                        } else {\n                            self.$message.error({\n                                message: data.msg,\n                                center: true,\n                            })\n                        }\n                        self.getApiList();\n                    }).catch(error=>{\n\n                    });\n                }).catch(() => {\n                });\n            },\n\t\t\t// 下载接口文档\n            DownloadApi() {\n                axios.get(test+\"/api/api/Download\", {params:{ project_id: this.$route.params.project_id},headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                    let data=response.data;\n                    if (data.code === \"999999\") {\n                        window.open(test+\"/api/api/download_doc?url=\"+data.data)\n                    }\n                }).catch(error=>{\n\n                });\n            },\n\t\t\t// 翻页\n            handleCurrentChange(val) {\n                this.page = val;\n                this.getApiList()\n            },\n            selsChange: function (sels) {\n                if (sels.length>0) {\n                    this.sels = sels;\n                    this.update = false\n                } else {\n                    this.update = true\n                }\n            },\n            //批量删除\n            batchRemove: function () {\n                let ids = this.sels.map(item => item.id);\n                let self = this;\n                this.$confirm('确认删除选中记录吗？', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    self.listLoading = true;\n                    //NProgress.start();\n                    axios.post(test+\"/api/api/del_api\", JSON.stringify({ project_id: Number(this.$route.params.project_id), ids: ids}),{headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                        let data=response.data;\n                        self.listLoading = false;\n                        if (data.code === '999999') {\n                            self.$message({\n                                message: '删除成功',\n                                center: true,\n                                type: 'success'\n                            })\n                        }\n                        else {\n                            self.$message.error({\n                                message: data.msg,\n                                center: true,\n                            })\n                        }\n                        self.getApiList();\n                    }).catch(error=>{\n\n                    });\n                }).catch(() => {\n                });\n            },\n            addSubmit(){\n                let self = this;\n                this.addLoading = true;\n                console.log(this.swaggerUrl);\n                if (this.swaggerUrl){\n                    axios.post(test+\"/api/api/lead_swagger\", JSON.stringify({ project_id: Number(this.$route.params.project_id), url: this.swaggerUrl}),{headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                        let data=response.data;\n                        if (data.code === '999999') {\n                            self.$message({\n                                message: '添加成功',\n                                center: true,\n                                type: 'success'\n                            });\n                            self.listLoading = true;\n                            self.addLoading = false;\n                            self.loadSwaggerApi = false;\n                            self.getApiList()\n                        }\n                        else {\n                            self.addLoading = false;\n                            self.$message.error({\n                                message: \"导入失败，请检查地址是否正确\",\n                                center: true,\n                            })\n                        }\n                        self.getApiList();\n                    }).catch(error=>{\n\n                    });\n                } else {\n                    this.addLoading = false\n                }\n            },\n            load(){\n                if(sessionStorage.getItem(\"api_name\")!=null){\n                    this.filters.name=sessionStorage.getItem(\"api_name\");\n                }\n                if(sessionStorage.getItem(\"api_type\")!=null){\n                    this.filters.type=sessionStorage.getItem(\"api_type\");\n                }\n                this.getApiList();\n                if (this.$route.params.firstGroup) {\n                    this.updateGroupForm.firstGroup = Number(this.$route.params.firstGroup);\n                    this.importApi.toGroup=Number(this.$route.params.firstGroup);\n                    sessionStorage.setItem(\"api_group\",this.$route.params.firstGroup);\n                }\n            },\n        },\n        mounted() {\n            this.load();\n        },\n        watch: {\n            '$route' (to, from) { //监听路由是否变化\n              if(to.query!= from.query){\n                this.load();\n              }\n            }\n        },\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n\t.api-title {\n\t\tpadding: 15px;\n\t\tmargin: 0px;\n\t\ttext-align: center;\n\t\tborder-radius:5px;\n\t\tfont-size: 15px;\n\t\tcolor: aliceblue;\n\t\tbackground-color: rgb(32, 160, 255);\n\t\tfont-family: PingFang SC;\n\t}\n\t.group .editGroup {\n\t\tfloat:right;\n\t}\n\t.row-title {\n\t\tmargin: 35px;\n\t}\n\t.addGroup {\n\t\tmargin-top: 0px;\n\t\tmargin-bottom: 10px;\n\t\tborder-radius: 25px;\n\t}\n\t.api-view-a {\n\t\tmargin-left: 15px;\n\t\tmargin-right: 15px;\n\t\tdisplay: block;\n\t}\n\t.api-view-b {\n\t\tmargin-left: 15px;\n\t\tmargin-right: 15px;\n\t\tdisplay: none;\n\t}\n</style>\n"]}]}