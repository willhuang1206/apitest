{"remainingRequest":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/huangrong/workspace/apitest/apitest-web/src/views/project/api/apiRequest.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/huangrong/workspace/apitest/apitest-web/src/views/project/api/apiRequest.vue","mtime":1588927573598},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport $ from 'jquery';\nimport { test } from '@/api/api'\nimport axios from 'axios';\nexport default {\n    name: 'ApiRequest',\n    data() {\n        return {\n            paramType: [{value: 'Int', label: 'Int'},\n                {value: 'String', label: 'String'},\n                {value: 'Object', label: 'Object'},\n                {value: 'Array', label: 'Array'}],\n            loadingSend: false,\n            header: [{value: 'Accept', label: 'Accept'},\n                {value: 'Accept-Charset', label: 'Accept-Charset'},\n                {value: 'Accept-Encoding', label: 'Accept-Encoding'},\n                {value: 'Accept-Language', label: 'Accept-Language'},\n                {value: 'Accept-Ranges', label: 'Accept-Ranges'},\n                {value: 'Authorization', label: 'Authorization'},\n                {value: 'Cache-Control', label: 'Cache-Control'},\n                {value: 'Connection', label: 'Connection'},\n                {value: 'Cookie', label: 'Cookie'},\n                {value: 'Content-Length', label: 'Content-Length'},\n                {value: 'Content-Type', label: 'Content-Type'},\n                {value: 'Content-MD5', label: 'Content-MD5'},\n                {value: 'Date', label: 'Date'},\n                {value: 'Expect', label: 'Expect'},\n                {value: 'From', label: 'From'},\n                {value: 'Host', label: 'Host'},\n                {value: 'If-Match', label: 'If-Match'},\n                {value: 'If-Modified-Since', label: 'If-Modified-Since'},\n                {value: 'If-None-Match', label: 'If-None-Match'},\n                {value: 'If-Range', label: 'If-Range'},\n                {value: 'If-Unmodified-Since', label: 'If-Unmodified-Since'},\n                {value: 'Max-Forwards', label: 'Max-Forwards'},\n                {value: 'Origin', label: 'Origin'},\n                {value: 'Pragma', label: 'Pragma'},\n                {value: 'Proxy-Authorization', label: 'Proxy-Authorization'},\n                {value: 'Range', label: 'Range'},\n                {value: 'Referer', label: 'Referer'},\n                {value: 'TE', label: 'TE'},\n                {value: 'Upgrade', label: 'Upgrade'},\n                {value: 'User-Agent', label: 'User-Agent'},\n                {value: 'Via', label: 'Via'},\n                {value: 'Warning', label: 'Warning'}],\n            requestParameterType: \"application/json\",\n            ParameterType: true,\n            radioType: \"\",\n            result: true,\n            activeNames: ['2', '3', '4', '5'],\n            id: \"\",\n            head: [],\n            parameter: [],\n            parameterRaw: \"\",\n            formRules: {\n            },\n            listLoading: false,\n            headers: \"\",\n            parameters: \"\",\n            format: false,\n            form: {\n                type: \"http\",\n                addr: \"\"\n            }\n        }\n    },\n    methods: {\n        toggleHeadSelection(rows) {\n            rows.forEach(row => {\n                this.$refs.multipleHeadTable.toggleRowSelection(row, true);\n            });\n        },\n        toggleParameterSelection(rows) {\n            rows.forEach(row => {\n                this.$refs.multipleParameterTable.toggleRowSelection(row, true);\n            });\n        },\n        selsChangeParameter: function (sels) {\n            this.parameters = sels;\n        },\n        selsChangeHead: function (sels) {\n            this.headers = sels;\n        },\n        addEmptyHead() {\n            let head = {name: \"\", value: \"\"};\n            this.addHead(head);\n        },\n        addHead(head) {\n            this.head.push(head);\n            let rows = [this.head[this.head.length-1]];\n            this.toggleHeadSelection(rows)\n        },\n        delHead(index) {\n            if (this.head.length !== 1) {\n                this.head.splice(index, 1)\n            }\n        },\n        addEmptyParameter(){\n            let parameter = {name: \"\", value: \"\", required:\"True\", restrict: \"\", description: \"\"};\n            this.addParameter(parameter);\n        },\n        addParameter(parameter) {\n            this.parameter.push(parameter);\n            let rows = [this.parameter[this.parameter.length-1]];\n            this.toggleParameterSelection(rows)\n        },\n        delParameter(index) {\n            if (this.parameter.length !== 1) {\n                this.parameter.splice(index, 1)\n            }\n        },\n        getDataType(value){\n            let type=\"String\";\n            try{\n                if(value instanceof Array){\n                    type = 'Array';\n                }else if(value instanceof Object){\n                    type = 'Object';\n                }else if(typeof(value)=='number'){\n                    type = 'Int';\n                }\n            }catch(Exception){}\n            return type;\n        },\n        getParameters(){\n            let parameters={}\n            if ( this.requestParameterType === 'application/x-www-form-urlencoded'||this.requestParameterType === 'application/json'||this.requestParameterType === 'text/plain') {\n                for (let i = 0; i < this.parameters.length; i++) {\n                    var a = this.parameters[i][\"name\"];\n                    if (a) {\n                        let parameterType=this.getDataType(this.parameters[i][\"value\"]);\n                        if(parameterType==\"Object\"||parameterType==\"Array\"){\n                            parameters[a] = JSON.parse(this.parameters[i][\"value\"]);\n                        }else{\n                            parameters[a] = this.parameters[i][\"value\"];\n                        }\n                    }\n                }\n            } else {\n                parameters = this.parameterRaw;\n            }\n            return parameters;\n        },\n        changeParameterType() {\n            if (this.requestParameterType === 'application/json') {\n                this.ParameterType = true;\n                if(this.parameterRaw!=\"\"&&(this.parameters==\"\"||(this.parameters.length==1&&this.parameters[0][\"name\"]==\"\"))){\n                    try{\n                        let self=this;\n                        this.parameter.splice(0);\n                        let json=JSON.parse(this.parameterRaw);\n                        $.each(json, function (name, value) {\n                            if(typeof(value)!='string'){\n                                value=JSON.stringify(value);\n                            }\n                            let parameter = {name: name, value: value, required:\"True\", restrict: \"\", description: \"\"};\n                            self.addParameter(parameter);\n                        });\n                    }catch(e){\n                        console.log(e);\n                    }\n                }\n            } else if (this.requestParameterType === 'application/x-www-form-urlencoded'||this.requestParameterType === 'text/plain') {\n                this.ParameterType = true;\n            } else if (this.requestParameterType === 'raw'){\n                this.ParameterType = false;\n                if(this.parameters!=\"\"&&this.parameterRaw==\"\"){\n                    try{\n                        let parameters={};\n                        for (let i = 0; i < this.parameters.length; i++) {\n                            var a = this.parameters[i][\"name\"];\n                            if (a) {\n                                let parameterType=this.getDataType(this.parameters[i][\"value\"]);\n                                if(parameterType==\"Object\"||parameterType==\"Array\"){\n                                    parameters[a] = JSON.parse(this.parameters[i][\"value\"]);\n                                }else{\n                                    parameters[a] = this.parameters[i][\"value\"];\n                                }\n                            }\n                        }\n                        this.parameterRaw=JSON.stringify(parameters);\n                    }catch(e){\n                        console.log(e);\n                    }\n                }\n            }\n        },\n        jybDecodePost() {\n            var encodePost=this.parameterRaw.trim();\n            if(encodePost==\"\")return;\n            var apiUrl=this.form.addr.trim();\n            var pos=0;\n            var reg = new RegExp(\"(^|&)_pos=([^&]*)(&|$)\", \"i\");\n            var r = apiUrl.match(reg);\n            if (r != null) {\n                pos=unescape(r[2]);\n            }\n            var version=\"\";\n            reg = new RegExp(\"(^|&)ver=([^&]*)(&|$)\", \"i\");\n            r = apiUrl.match(reg);\n            if (r != null) {\n                version=unescape(r[2]);\n            }\n            let params = {\n                pos: pos,\n                post:encodePost,\n                version:version\n            };\n            let headers = {\n                \"Content-Type\": \"application/json\",\n                Authorization: 'Token '+sessionStorage.getItem('token')\n            };\n            let self=this;\n            axios.post(test + '/api/api/jybdecode', params,{headers:headers}).then(res => {\n                let {msg, code, data} = res.data;\n                if (code === '999999') {\n                    self.parameterRaw=JSON.stringify(data);\n                }else {\n                    self.$message.error({\n                        message: msg,\n                        center: true,\n                    })\n                }\n            })\n        },\n    },\n    watch: {\n        requestParameterType() {\n            this.changeParameterType()\n        }\n    },\n    mounted() {\n        this.toggleHeadSelection(this.head);\n        this.toggleParameterSelection(this.parameter);\n    }\n}\n",null]}