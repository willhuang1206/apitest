{"remainingRequest":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/huangrong/workspace/apitest/apitest-web/src/views/project/auto/autoList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/huangrong/workspace/apitest/apitest-web/src/views/project/auto/autoList.vue","mtime":1590476789712},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n    import Treeselect from '@riophae/vue-treeselect'\n    import Cookies from 'js-cookie'\n    import '@riophae/vue-treeselect/dist/vue-treeselect.css'\n//    import SelectTree from \"../../../components/treeSelect.vue\";\n    import { test,getProjectConfig,runAutomation } from '../../../api/api'\n    import $ from 'jquery'\n    import moment from \"moment\"\n    import axios from 'axios'\n    export default {\n        components: {\n//          SelectTree,\n          Treeselect,\n        },\n        data() {\n            return {\n                automationType: [\n                    {value: '', label: ''},\n                    {value: 'case', label: '普通用例'},\n                    {value: 'reuse', label: '可复用用例'},\n                    {value: 'list', label: '用例集'},\n                    {value: 'data', label: '数据用例'},\n                    {value: 'monitor', label: '接口监控'},\n                ],\n                listType: \"\",\n                filters: {\n                    name: '',\n                    type: '',\n                },\n                env: '',\n                automationlist: [],\n                total: 0,\n                pages: 0,\n                page: 1,\n                page_size: 20,\n                listLoading: false,\n                sels: [],//列表选中列\n                delLoading: false,\n                disDel: true,\n                TestStatus: false,\n                updateGroupFormVisible: false,\n                updateGroupForm: {\n                    firstGroup: null,\n                },\n                updateGroupFormRules: {\n                    firstGroup : [{ type: 'number', required: true, message: '请选择父分组', trigger: 'blur'}],\n                },\n                group: [],\n                updateGroupLoading: false,\n                update: true,\n\n                editFormVisible: false,//编辑界面是否显示\n                editFormTitle: \"\",\n                editLoading: false,\n                editFormRules: {\n                    name: [\n                        { required: true, message: '请输入名称', trigger: 'blur' },\n                        { min: 1, max: 1024, message: '长度在 1 到 1024 个字符', trigger: 'blur' }\n                    ],\n                    group: [\n                        { type: 'number', required: true, message: '请选择分组', trigger: 'blur'}\n                    ],\n                    description: [\n                        { required: false, message: '请输入描述', trigger: 'blur' },\n                        { max: 1024, message: '不能超过1024个字符', trigger: 'blur' }\n                    ]\n                },\n                //编辑界面数据\n                editForm: {\n                    name: '',\n                    group: null,\n                    description: '',\n                    params: '{}',\n                    type: 'case',\n                },\n                getResultTimer: '',\n                importAutomation:{\n                    visible: false,\n                    loading: false,\n                    rules: {\n                        fromGroup : [{ type: 'string', required: true, message: '请选择源分组', trigger: 'blur'}],\n                        toGroup : [{ type: 'string', required: true, message: '请选择导入分组', trigger: 'blur'}],\n                    },\n                    value: null,\n                    fromGroup: null,\n                    toGroup: null,\n                    fromDate: \"\",\n                    toDate: \"\",\n                    groups: [],\n                    fileName: \"\",\n                },\n                fileList: [],\n                formData: [],\n                role: Cookies.get('role'),\n                uploadFileUrl: test + \"/api/imports/uploadfile\",\n                downloadTemplateUrl: test + \"/api/imports/downloadtemplate\"\n            }\n        },\n        methods: {\n            handleUploadSuccess(res, file) {\n              this.importAutomation.fileName=file.name;\n            },\n            handleSearch(){\n                this.page=1;\n                this.getAutomationList();\n            },\n            // 获取用例列表\n            getAutomationList() {\n                this.listLoading = true;\n                let self = this;\n                sessionStorage.setItem(\"auto_name\",self.filters.name);\n                sessionStorage.setItem(\"auto_type\",self.filters.type);\n                let param = { project_id: this.$route.params.project_id, page: self.page, name: self.filters.name, type: self.filters.type};\n                if (this.$route.params.firstGroup) {\n                    param['first_group_id'] = this.$route.params.firstGroup;\n                }\n                axios.get(test+\"/api/automation/automation_list\", { params: param}).then(response => {\n                    self.listLoading = false;\n                    if (response.data.code === '999999') {\n                        self.total = response.data.data.total;\n                        self.pages = response.data.data.pages;\n                        self.page_size=response.data.data.page_size;\n                        self.automationlist=[];\n                        response.data.data.data.forEach((item) =>{\n                            item.result = false;\n                            self.automationlist.push(item)\n                        });\n                    }\n                    else {\n                        self.$message.error({\n                            message: response.data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            // 获取接口列表\n            getAutomationDomainList() {\n                this.importAutomation.loading = true;\n                let self = this;\n                let param = {};\n                axios.get(test+\"/api/imports/autodomainlist\", {params:param,headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                    let data=response.data;\n                    self.importAutomation.loading = false;\n                    if (data.code === '999999') {\n//                        alert(JSON.stringify(data.data));\n                        self.importAutomation.groups = data.data;\n                    }\n                    else {\n                        self.$message.error({\n                            message: data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            // 修改用例所属分组\n            updateGroupSubmit() {\n                let ids = this.sels.map(item => item.id);\n                let self = this;\n                this.$confirm('确认修改所属分组吗？', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    self.updateGroupLoading = true;\n                    //NProgress.start();\n                    let params = JSON.stringify({\n                        project_id: Number(this.$route.params.project_id),\n                        group_id: self.updateGroupForm.firstGroup,\n                        ids:ids\n                    });\n                    let header = {\n                        \"Content-Type\": \"application/json\",\n                        Authorization: 'Token '+sessionStorage.getItem('token')\n                    };\n                    axios.post(test+\"/api/automation/update_automation_group\", params,{headers:header}).then(response => {\n                        self.updateGroupLoading = false;\n                        if (response.data.code === '999999') {\n                            self.$message({\n                                message: '修改成功',\n                                center: true,\n                                type: 'success'\n                            });\n                            self.$router.push({ name: '分组自动化列表', params: { project_id: self.$route.params.project_id, firstGroup: self.updateGroupForm.firstGroup}});\n                        }\n                        else {\n                            self.$message.error({\n                                message: response.data.msg,\n                                center: true,\n                            })\n                        }\n                        self.updateGroupFormVisible = false;\n                        self.getAutomationList();\n                    }).catch(error=>{\n\n                    });\n                }).catch(() => {\n\n                });\n            },\n            importAutomationSubmit() {\n                let self = this;\n                this.$confirm('确认导入用例吗？', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    this.importAutomation.loading = true;\n                    //NProgress.start();\n                    let params = JSON.stringify({\n                        project_id:Number(this.$route.params.project_id),\n                        group_id: this.importAutomation.toGroup,\n                        fileName: this.importAutomation.fileName,\n                    });\n                    axios.post(test+\"/api/imports/automation_importfromexcel\", params,{headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                        let data=response.data;\n                        self.importAutomation.loading = false;\n                        if (data.code === '999999') {\n                            self.$message({\n                                message: data.msg,\n                                center: true,\n                                type: 'success'\n                            });\n                        }\n                        else {\n                            self.$message.error({\n                                message: data.msg,\n                                center: true,\n                            })\n                        }\n                        self.importAutomation.visible = false;\n                        self.getAutomationList();\n                    }).catch(error=>{\n\n                    });\n                }).catch(() => {\n\n                });\n            },\n            // 获取用例分组\n            getAutomationGroup() {\n                let self = this;\n                axios.get(test+\"/api/automation/group\", {params:{project_id: this.$route.params.project_id}}).then(response => {\n                    if (response.data.code === '999999') {\n                        self.group = response.data.data;\n                    }\n                    else {\n                        self.$message.error({\n                            message: response.data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            changeGroup() {\n                this.getAutomationGroup();\n                this.updateGroupFormVisible = true;\n            },\n            handleImportAutomation() {\n                this.getAutomationGroup();\n//                this.getAutomationDomainList();\n                this.importAutomation.visible = true;\n            },\n            //删除\n            handleDel: function (index, row) {\n                this.$confirm('确认删除用例[' + row.name + ']吗?', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    this.listLoading = true;\n                    //NProgress.start();\n                    let self = this;\n                    let param=JSON.stringify({\n                                project_id: Number(this.$route.params.project_id),\n                                ids: [row.id] });\n                    let header = {\n                        \"Content-Type\": \"application/json\",\n                        Authorization: 'Token '+sessionStorage.getItem('token')\n                    };\n                    axios.post(test+\"/api/automation/del_automation\",param,{headers:header}).then(response => {\n                        if (response.data.code === '999999') {\n                            self.$message({\n                                message: '删除成功',\n                                center: true,\n                                type: 'success'\n                            })\n                        }else {\n                            self.$message.error({\n                                message: response.data.msg,\n                                center: true,\n                            })\n                        }\n                        this.listLoading = true;\n                        self.getAutomationList();\n                    }).catch(error=>{\n                        this.listLoading = true;\n                    });\n                }).catch(() => {\n                });\n            },\n            handleCurrentChange(val) {\n                this.page = val;\n                this.getAutomationList()\n            },\n            selsChange: function (sels) {\n                if (sels.length>0) {\n                    this.sels = sels;\n                    this.update = false\n                } else {\n                    this.update = true\n                }\n            },\n            //批量删除\n            batchRemove: function () {\n                let ids = this.sels.map(item => item.id);\n                let self = this;\n                this.$confirm('确认删除选中记录吗？', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    self.listLoading = true;\n                    //NProgress.start();\n                    let param=JSON.stringify({ project_id: Number(this.$route.params.project_id), ids: ids});\n                    let header = {\n                        \"Content-Type\": \"application/json\",\n                        Authorization: 'Token '+sessionStorage.getItem('token')\n                    };\n                    axios.post(test+\"/api/automation/del_automation\",param,{headers:header}).then(response => {\n                        self.listLoading = false;\n                        if (response.data.code === '999999') {\n                            self.$message({\n                                message: '删除成功',\n                                center: true,\n                                type: 'success'\n                            })\n                        }\n                        else {\n                            self.$message.error({\n                                message: response.data.msg,\n                                center: true,\n                            })\n                        }\n                        self.getAutomationList();\n                    }).catch(error=>{\n\n                    });\n                }).catch(() => {\n\n                });\n            },\n            //显示编辑界面\n            handleEdit: function (index, row) {\n                this.getAutomationGroup();\n                this.editFormTitle=\"编辑\";\n                this.editFormVisible = true;\n                this.editForm = {\"id\":row.id,\"name\":row.name,\"type\":row.type,\"params\":row.params,\"group\":row.group,\"description\":row.description};\n            },\n            //显示新增页面,复制用例\n            handleCopy: function (index, row) {\n                this.getAutomationGroup();\n                this.editFormTitle=\"复制\";\n                this.editForm={\"copyId\":row.id,\"name\":row.name,\"type\":row.type,\"params\":row.params,\"group\":row.group,\"description\":row.description};\n                this.editFormVisible = true;\n            },\n            //显示新增界面\n            handleAdd: function () {\n                this.getAutomationGroup();\n                this.editFormTitle=\"新增\";\n                this.editFormVisible = true;\n            },\n            // 修改用例\n            editSubmit: function () {\n                if(this.editForm.id==null){\n                    this.addSubmit();\n                }else{\n                    let self = this;\n                    this.$refs.editForm.validate((valid) => {\n                        if (valid) {\n                            this.$confirm('确认提交吗？', '提示', {}).then(() => {\n                                self.editLoading = true;\n                                //NProgress.start();\n                                let params = JSON.stringify({\n                                    project_id: Number(this.$route.params.project_id),\n                                    id: Number(self.editForm.id),\n                                    type: self.editForm.type,\n                                    name: self.editForm.name,\n                                    params: self.editForm.params,\n                                    group_id: Number(this.editForm.group),\n                                    description: self.editForm.description });\n                                let headers={\"Content-Type\": \"application/json\",Authorization: 'Token '+sessionStorage.getItem('token')};\n                                axios.post(test+\"/api/automation/update_automation\", params,{headers:headers}).then(response => {\n                                    self.editLoading = false;\n                                    if (response.data.code === '999999') {\n                                        self.$message({\n                                            message: '修改成功',\n                                            center: true,\n                                            type: 'success'\n                                        });\n                                        self.$refs['editForm'].resetFields();\n                                        self.editFormVisible = false;\n                                        self.getAutomationList();\n                                    } else if (response.data.code === '999997'){\n                                        self.$message.error({\n                                            message: response.data.msg,\n                                            center: true,\n                                        });\n                                    } else {\n                                        self.$message.error({\n                                            message: response.data.msg,\n                                            center: true,\n                                        });\n                                    }\n                                }).catch(error=>{\n\n                                });\n                            }).catch(() => {});\n                        }\n                    });\n                }\n            },\n            //新增用例\n            addSubmit: function () {\n                this.$refs.editForm.validate((valid) => {\n                    if (valid) {\n                        let self = this;\n                        this.$confirm('确认提交吗？', '提示', {}).then(() => {\n                            self.editLoading = true;\n                            //NProgress.start();\n                            let param = {\n                                project_id: Number(this.$route.params.project_id),\n                                type: this.editForm.type,\n                                group_id: this.editForm.group,\n                                name: self.editForm.name,\n                                params: self.editForm.params,\n                                description: self.editForm.description };\n                            if(this.editFormTitle==\"复制\"){\n                                param[\"copyId\"]=self.editForm.copyId;\n                            }\n                            param=JSON.stringify(param);\n                            let headers={\"Content-Type\": \"application/json\",Authorization: 'Token '+sessionStorage.getItem('token')};\n                            axios.post(test+\"/api/automation/add_automation\", param,{headers:headers}).then(response => {\n                                self.editLoading = false;\n                                if (response.data.code === '999999') {\n                                    self.$message({\n                                        message: '添加成功',\n                                        center: true,\n                                        type: 'success'\n                                    });\n                                    self.$refs['editForm'].resetFields();\n                                    self.editFormVisible = false;\n                                    self.getAutomationList()\n                                } else if (response.data.code === '999997'){\n                                    self.$message.error({\n                                        message: response.data.msg,\n                                        center: true,\n                                    })\n                                } else {\n                                    self.$message.error({\n                                        message: response.data.msg,\n                                        center: true,\n                                    });\n                                    self.$refs['editForm'].resetFields();\n                                    self.editFormVisible = false;\n                                    self.getAutomationList()\n                                }\n                            }).catch(error=>{\n\n                            });\n                        }).catch(() => {});\n                    }\n                });\n            },\n            init(){\n                if(sessionStorage.getItem(\"auto_name\")!=null){\n                    this.filters.name=sessionStorage.getItem(\"auto_name\");\n                }\n                if(sessionStorage.getItem(\"auto_type\")!=null){\n                    this.filters.type=sessionStorage.getItem(\"auto_type\");\n                }\n//                this.getAutomationGroup();\n                this.getAutomationList();\n                if (this.$route.params.firstGroup) {\n                    this.updateGroupForm.firstGroup = Number(this.$route.params.firstGroup);\n                    this.editForm.group=Number(this.$route.params.firstGroup);\n                }\n            },\n        },\n        mounted() {\n            this.init();\n        },\n        watch: {\n            '$route' (to, from) { //监听路由是否变化\n              if(to.query!= from.query){\n                this.init();//重新加载数据\n              }\n            }\n        },\n    }\n",null]}