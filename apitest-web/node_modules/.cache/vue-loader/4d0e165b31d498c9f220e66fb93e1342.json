{"remainingRequest":"/Users/huangrong/workspace/apitest/apitest-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/huangrong/workspace/apitest/apitest-vue/src/views/project/auto/autoStepList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/huangrong/workspace/apitest/apitest-vue/src/views/project/auto/autoStepList.vue","mtime":1588827312486},{"path":"/Users/huangrong/workspace/apitest/apitest-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-vue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n    import Treeselect from '@riophae/vue-treeselect'\n    // import the styles\n    import '@riophae/vue-treeselect/dist/vue-treeselect.css'\n    import { test,getProjectConfig,runAutomation } from '../../../api/api'\n//    import SelectTree from \"../../../components/treeSelect.vue\";\n    import Sortable from 'sortablejs'\n    import $ from 'jquery'\n    import moment from \"moment\"\n    import axios from \"axios\"\n    export default {\n        components: {\n          Treeselect\n        },\n        inject: [\"reload\"],\n        data() {\n            return{\n                automationType: [{value: 'case', label: '普通用例'},\n                     {value: 'reuse', label: '可复用用例'},\n                    {value: 'list', label: '用例集'},\n                    {value: 'data', label: '数据用例'},\n                    {value: 'monitor', label: '接口监控'},\n                ],\n                currentType: \"\",\n                result_color: {\"PASS\":\"color:green\",\"FAIL\":\"color:red\"},\n                stepType: [{value: 'normal', label: '普通'},\n                    {value: 'project', label: '项目'},\n                    {value: 'global', label: '全局'}],\n                project: \"\",\n                automation: \"\",\n                StepList: [],\n                stepIds: [],\n                failIds: [],\n                failRerunShow: false,\n                ids: [],\n                listLoading: false,\n                running: false,\n                updateOrderStatus: false,\n                searchName: \"\",\n                total: 0,\n                page: 1,\n                env: '',\n                data: '',\n                group: [],\n                EnvList: [],\n                DataList: [],\n                commands: {},\n                groupData: [],\n                sels: [],//列表选中列\n                AutomationResult: false,\n                StepResultDetails: [],\n                StepResultName: \"\",\n                result: {},\n                StepListLen: \"\",\n                StepListIndex: 0,\n                activeIndex: \"\",\n\n                editFormVisible: false,//编辑界面是否显示\n                editFormTitle: \"\",\n                editLoading: false,\n                editFormRules: {\n                    name: [\n                        { required: true, message: '请输入名称', trigger: 'blur' },\n                        { min: 1, max: 1024, message: '长度在 1 到 1024 个字符', trigger: 'blur' }\n                    ],\n                    type: [\n                        { required: true, message: '请选择类型', trigger: 'blur'}\n                    ],\n                    description: [\n                        { required: false, message: '请输入描述', trigger: 'blur' },\n                        { max: 1024, message: '不能超过1024个字符', trigger: 'blur' }\n                    ]\n                },\n                //编辑界面数据\n                editForm: {\n                    name: '',\n                    params: '{}',\n                    steps: [],\n                    description: '',\n                    type: 'normal',\n                    order: ''\n                },\n                //新增界面数据\n                addForm: {\n                    name: '',\n                    params: '{}',\n                    steps: [{\"type\":\"\",\"name\":\"\",\"actionId\":0,\"params\":\"{}\",\"description\":\"\",\"disable\":\"False\"}],\n                    description: '',\n                    type: 'normal',\n                    order: ''\n                },\n                automationForm: {\n                    name: '',\n                    type: '',\n                    group: null,\n                    params: '{}',\n                    description: '',\n                    id: ''\n                },\n                linkAutomation: {\n                    visible: false,\n                    loading: false,\n                    list: [],\n                    page: 1,\n                    pages: 0,\n                    total: 0,\n                    selAutomations: []\n                },\n                linkApi: {\n                    visible: false,\n                    loading: false,\n                    list: [],\n                    page: 1,\n                    pages: 0,\n                    total: 0,\n                    selApis: []\n                },\n                reuseSteps: {\n                    visible: false,\n                    loading: false,\n                    list: [],\n                    total: 0,\n                    page: 1,\n                    pages: 0,\n                    selSteps: []\n                },\n                result: {\n                    resulttrace: '',\n                    ResultList: []\n                },\n                getResultTimer: '',\n                getResultTimes: 0,\n                project_id: this.$route.params.project_id,\n                pageType: '',\n            }\n        },\n        methods: {\n            selsChange: function (sels) {\n                if(this.automationForm.type==\"monitor\"){\n                    this.ids = sels.map(item => item.id);\n                }else{\n                    this.ids = sels.map(item => item.stepId);\n                }\n            },\n            getStepRowClass({ row }) {\n              if (!row.status) {\n                return 'disable-step';\n              }\n              return '';\n            },\n            handleSelect(key, keyPath) {\n                this.activeIndex = key;\n                console.log(this.activeIndex)\n            },\n            // 获取用例分组\n            getAutomationGroupAndInfo() {\n                let self = this;\n                axios.get(test+\"/api/automation/group\", {params:{project_id:this.$route.params.project_id}}).then(response => {\n                    if (response.data.code === '999999') {\n                        self.group = response.data.data;\n                    }else{\n                        self.$message.error({\n                            message: response.data.msg,\n                            center: true,\n                        })\n                    }\n                    self.getAutomationStepList();\n                }).catch(error=>{\n\n                });\n            },\n            getAutomationStepList() {\n                this.listLoading = true;\n                let self = this;\n                let params={ project_id: this.$route.params.project_id,\n                    page: self.page,\n                    name: self.searchName,\n                    automation_id: this.$route.params.automation_id\n                };\n                axios.get(test+\"/api/automation/step_list\", {params:params}).then(response => {\n                    self.listLoading = false;\n                    self.stepIds=[];\n                    if (response.data.code === '999999') {\n                        self.currentType=response.data.data.automation.type;\n                        self.StepList = [];\n                        self.result.ResultList = [];\n                        self.automationForm=response.data.data.automation;\n                        self.automationForm.group=response.data.data.automation.group;\n                        response.data.data.steps.forEach((item) =>{\n                            item.result = false;\n                            self.StepList.push(item);\n                            if(response.data.data.automation.type=='list'){\n                                self.stepIds.push(item.stepId);\n                            }else if(response.data.data.automation.type=='monitor'){\n                                self.stepIds.push(item.id);\n                            }\n                        });\n                        response.data.data.results.forEach((item) =>{\n                            self.result.ResultList.push(item);\n                        });\n                        // self.ApiList = data.data.data\n                    }else {\n                        self.$message.error({\n                            message: response.data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n                });\n            },\n            getCommandList() {\n                this.listLoading = true;\n                let self = this;\n                axios.get(test+\"/api/automation/command_list\", {params:{project_id:this.$route.params.project_id,automation_id: this.$route.params.automation_id}}).then(response => {\n                    self.listLoading = false;\n                    if (response.data.code === '999999') {\n                        self.commands = {};\n                        response.data.data.data.forEach((item) =>{\n                            self.commands[item.name]=item;\n                        });\n                        // self.ApiList = data.data.data\n                    }\n                    else {\n                        self.$message.error({\n                            message: response.data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            getResult(trace) {\n                let self = this;\n                let params={ project_id: this.$route.params.project_id,\n                    automation_id: this.$route.params.automation_id,\n                    trace: trace\n                };\n                if(!self.running) {\n                  self.StepList.forEach((item, index) => {\n                    item.testtime = \"\";\n                    item.result = null;\n                    item.details = [];\n                  });\n                };\n                axios.get(test+\"/api/automation/getresult\", {params:params}).then(response => {\n                    self.getResultTimes++;\n                    if (response.data.code === '999999') {\n                        self.failIds=[]\n                        response.data.data.details.forEach((item,index) =>{\n                            self.StepList.forEach((step,stepIndex)=>{\n                                if(((item.type==\"step\"||item.type==\"automation\")&&item[\"id\"]==step[\"stepId\"])||((item.type==\"api\")&&item[\"id\"]==step[\"id\"])){\n                                  step.result=item.status;\n                                  step.testtime=item.testtime;\n                                  step.details=item.details;\n                                  step.trace=item.trace;\n                                  if(item.status==\"FAIL\"&&(item[\"type\"]==\"api\"||item[\"type\"]==\"automation\")){\n                                      self.failIds.push(item[\"id\"]);\n                                  }\n                                }\n                            })\n                        });\n                        if(response.data.data.status!=\"RUNNING\"||self.getResultTimes>100){\n                            self.getResultTimes=0;\n                            clearInterval(self.getResultTimer);\n                            self.running=false;\n                            if(self.failIds.length>0){\n                                self.failRerunShow=true;\n                            }else{\n                                self.failRerunShow=false;\n                            }\n                        }\n                    }else{\n                        self.$message.error({\n                            message: '获取失败',\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            StepTotal() {\n                this.StepListLen = this.StepList.length;\n            },\n            handleLinkApi: function () {\n                this.linkApi.visible = true;\n                this.linkApi.page=1;\n                this.getApiList();\n            },\n            getApiList(){\n                let self=this;\n                self.linkApi.loading = true;\n                let params={\n                    project_id: this.$route.params.project_id,\n                    page: self.linkApi.page,\n                    name: self.linkApi.name,\n                    exclude: JSON.stringify(self.stepIds),\n                };\n                axios.get(test+\"/api/api/api_list\", {params:params}).then(response => {\n                    self.linkApi.loading = false;\n                    if (response.data.code === '999999') {\n                        self.linkApi.list = response.data.data.data;\n                        self.linkApi.total = response.data.data.total;\n                        self.linkApi.pages = response.data.data.pages;\n                    }\n                    else {\n                        self.$message.error({\n                            message: response.data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            //取消关联\n            handleUnlinkApi: function (index, row) {\n                this.$confirm('确认取消关联接口[' + row.name + ']吗?', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    this.listLoading = true;\n                    let self = this;\n                    let params=JSON.stringify({ project_id: Number(this.$route.params.project_id), automation_id: Number(this.$route.params.automation_id),ids: [row.id] });\n                    let headers={\n                        \"Content-Type\": \"application/json\",\n                        Authorization: 'Token '+sessionStorage.getItem('token')\n                    };\n                    axios.post(test+\"/api/automation/unlink_api\", params,{headers:headers}).then(response => {\n                        self.listLoading = false;\n                        if (response.data.code === '999999') {\n                            self.$message({\n                                message: '取消关联成功',\n                                center: true,\n                                type: 'success'\n                            })\n                        } else {\n                            self.$message.error({\n                                message: response.data.msg,\n                                center: true,\n                            })\n                        }\n                        self.getAutomationStepList();\n                    }).catch(error=>{\n\n                    });\n                }).catch(() => {\n                });\n            },\n            //取消关联\n            handleUnlinkAutomation: function (index, row) {\n                this.$confirm('确认取消关联用例[' + row.name + ']吗?', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    this.listLoading = true;\n                    //NProgress.start();\n                    let self = this;\n                    let params=JSON.stringify({ project_id: Number(this.$route.params.project_id), automation_id: Number(this.$route.params.automation_id),ids: [row.stepId] });\n                    let headers={\n                        \"Content-Type\": \"application/json\",\n                        Authorization: 'Token '+sessionStorage.getItem('token')\n                    };\n                    axios.post(test+\"/api/automation/unlink_automation\", params,{headers:headers}).then(response => {\n                        self.listLoading = false;\n                        if (response.data.code === '999999') {\n                            self.$message({\n                                message: '取消关联成功',\n                                center: true,\n                                type: 'success'\n                            })\n                        } else {\n                            self.$message.error({\n                                message: response.data.msg,\n                                center: true,\n                            })\n                        }\n                        self.getAutomationStepList();\n                    }).catch(error=>{\n\n                    });\n                }).catch(() => {\n                });\n            },\n            handleChangeStatus: function(index, row) {\n                let self = this;\n                this.listLoading = true;\n                let headers = {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: 'Token '+sessionStorage.getItem('token')\n                };\n                let params = {project_id: Number(this.$route.params.project_id),id: row.id,status:!row.status,type:row.type};\n                let successMsg='禁用成功';\n                if(!row.status){\n                    successMsg='启用成功';\n                }\n                axios.post(test+\"/api/automation/stepstatus_update\", params,{headers:headers}).then(response => {\n                    self.listLoading = false;\n                    if (response.data.code === '999999') {\n                        self.$message({\n                            message: successMsg,\n                            center: true,\n                            type: 'success'\n                        })\n                        row.status = !row.status;\n                    }else {\n                        self.$message.error({\n                            message: response.data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n                });\n            },\n            linkApiSubmit: function () {\n                let ids = this.linkApi.selApis.map(item => item.id);\n                let self = this;\n                this.$confirm('确认关联选中的接口吗？', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    self.listLoading = true;\n                    //NProgress.start();\n                    let params=JSON.stringify({\n                        project_id: Number(this.$route.params.project_id),\n                        automation_id: Number(this.$route.params.automation_id),\n                        ids: ids\n                    });\n                    let headers={\n                        \"Content-Type\": \"application/json\",\n                        Authorization: 'Token '+sessionStorage.getItem('token')\n                    };\n                    axios.post(test+\"/api/automation/link_api\", params,{headers:headers}).then(response => {\n                        self.listLoading = false;\n                        if (response.data.code === '999999') {\n                            self.$message({\n                                message: '关联成功',\n                                center: true,\n                                type: 'success'\n                            })\n                        }else {\n                            self.$message.error({\n                                message: response.data.msg,\n                                center: true,\n                            })\n                        }\n                        self.linkApi.visible = false;\n                        self.getAutomationStepList()\n                    }).catch(error=>{\n                    });\n                }).catch(() => {\n\n                });\n            },\n            getAutomationList(){\n                let self=this;\n                self.linkAutomation.loading = true;\n                let params={\n                    project_id: this.$route.params.project_id,\n                    type: \"case\",\n                    page: self.linkAutomation.page,\n                    exclude: JSON.stringify(self.stepIds),\n                };\n                if(this.linkAutomation.name!=\"\"){\n                    params[\"name\"]=this.linkAutomation.name;\n                }\n                let headers={Authorization: 'Token '+sessionStorage.getItem('token')};\n                axios.get(test+\"/api/automation/automation_list\", {params:params,headers:headers}).then(response => {\n                    self.linkAutomation.loading = false;\n                    if (response.data.code === '999999') {\n                        self.linkAutomation.list = response.data.data.data;\n                        self.linkAutomation.total = response.data.data.total;\n                        self.linkAutomation.pages = response.data.data.pages;\n                    }else{\n                        self.$message.error({\n                            message: response.data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n                });\n            },\n            //显示新增界面\n            handleLinkAutomation: function () {\n                this.linkAutomation.visible = true;\n                this.linkAutomation.page = 1;\n                this.getAutomationList();\n            },\n            linkAutomationSubmit: function () {\n                let ids = this.linkAutomation.selAutomations.map(item => item.id);\n                let self = this;\n                this.$confirm('确认关联选中的用例吗？', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    self.listLoading = true;\n                    //NProgress.start();\n                    let params=JSON.stringify({\n                        project_id: Number(this.$route.params.project_id),\n                        automation_id: Number(this.$route.params.automation_id),\n                        ids: ids\n                    });\n                    let headers={\"Content-Type\": \"application/json\",Authorization: 'Token '+sessionStorage.getItem('token')};\n                    axios.post(test+\"/api/automation/link_automation\", params,{headers:headers}).then(response => {\n                        self.listLoading = false;\n                        if (response.data.code === '999999') {\n                            self.$message({\n                                message: '关联成功',\n                                center: true,\n                                type: 'success'\n                            })\n                        }\n                        else {\n                            self.$message.error({\n                                message: response.data.msg,\n                                center: true,\n                            })\n                        }\n                        self.linkAutomation.visible = false;\n                        self.getAutomationStepList()\n                    }).catch(error=>{\n                    });\n                }).catch(() => {\n\n                });\n            },\n            RunAutomation(ids) {\n                if (this.env) {\n                    let self = this;\n                    let data={\n                            project_id: Number(this.$route.params.project_id),\n                            automation_id: Number(this.$route.params.automation_id),\n                            params: this.automationForm.params,\n                            env: this.env,\n                            data: this.data,\n                    };\n                    if(ids&&ids.length>0){\n                        data[\"ids\"]=ids;\n                    }\n                    let header = {\n                                \"Content-Type\": \"application/json\",\n                                Authorization: 'Token '+sessionStorage.getItem('token')\n                            };\n                    runAutomation(header,data).then(data => {\n                        if (data.code === '999999') {\n                            self.$message({\n                                message: '开始执行',\n                                center: true,\n                                type: \"success\",\n                            }),\n                            self.StepList.forEach((item,index) =>{\n                                item.testtime=\"\";\n                                item.result=null;\n                                item.details=[];\n                            });\n                            self.result.ResultList.splice(0,0,{\"testTime\":data.data.testtime,\"trace\":data.data.trace,\"result\":data.data.status});\n                            if(data.data.status==\"RUNNING\"){\n                                self.running=true;\n                                self.getResultTimes=0;\n                                self.getResultTimer = setInterval(() =>{\n//                                        self.getAutomationStepList();\n                                    self.getResult(data.data.trace);\n                                }, 3000);\n                            }\n                        }else {\n                            self.$message.error({\n                                message: data.msg,\n                                center: true,\n                            })\n                        }\n                    });\n                } else {\n                    this.$message({\n                        message: '请选择测试环境',\n                        center: true,\n                        type: 'warning'\n                    })\n                }\n            },\n            handleDel(index, row){\n                this.$confirm('确认删除步骤[' + row.name + ']吗?', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    this.listLoading = true;\n                    let self = this;\n                    let params=JSON.stringify({\n                            project_id: Number(this.$route.params.project_id),\n                            automation_id: Number(this.$route.params.automation_id),\n                            ids: [{\"order\":index+1,\"id\":row.stepId}] });\n                    let headers={\"Content-Type\": \"application/json\",Authorization: 'Token '+sessionStorage.getItem('token')};\n                    axios.post(test+\"/api/automation/del_step\", params,{headers:headers}).then(response => {\n                        self.listLoading = false;\n                        if (response.data.code === '999999') {\n                            self.$message({\n                                message: '删除成功',\n                                center: true,\n                                type: 'success'\n                            })\n                        } else {\n                            self.$message.error({\n                                message: response.data.msg,\n                                center: true,\n                            })\n                        }\n                        self.getAutomationStepList();\n                    }).catch(error=>{\n                    });\n                }).catch(() => {\n                });\n            },\n            resultShow(row) {\n                this.AutomationResult=true;\n                this.StepResultDetails=row.details;\n                this.StepResultName=row.name;\n            },\n            handleCurrentChangeStep(val) {\n                this.reuseSteps.page = val;\n                this.getReuseStepList();\n            },\n            handleCurrentChangeAutomation(val) {\n                this.linkAutomation.page = val;\n                this.getAutomationList();\n            },\n            handleCurrentChangeApi(val) {\n                this.linkApi.page = val;\n                this.getApiList();\n            },\n            selStepsChange(sels){\n                this.reuseSteps.selSteps = sels;\n            },\n            selApisChange(sels){\n                this.linkApi.selApis = sels;\n            },\n            selAutomationsChange(sels){\n                this.linkAutomation.selAutomations = sels;\n            },\n            addReuseSteps: function () {\n                let ids = this.reuseSteps.selSteps.map(item => item.id);\n                let self = this;\n                this.$confirm('确认添加选中的步骤吗？', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    self.listLoading = true;\n                    let params=JSON.stringify({\n                        project_id: Number(this.$route.params.project_id),\n                        automation_id: Number(this.$route.params.automation_id),\n                        ids: ids\n                    });\n                    let headers={\"Content-Type\": \"application/json\",Authorization: 'Token '+sessionStorage.getItem('token')};\n                    axios.post(test+\"/api/automation/add_reuse_steps\", params,{headers:headers}).then(response => {\n                        self.listLoading = false;\n                        if (response.data.code === '999999') {\n                            self.$message({\n                                message: '添加成功',\n                                center: true,\n                                type: 'success'\n                            })\n                        }\n                        else {\n                            self.$message.error({\n                                message: response.data.msg,\n                                center: true,\n                            })\n                        }\n                        self.reuseSteps.visible = false;\n                        self.getAutomationStepList();\n                    }).catch(error=>{\n                    });\n                }).catch(() => {\n\n                });\n            },\n            getEnv() {\n                let self = this;\n                let headers = {\n                    Authorization: 'Token '+sessionStorage.getItem('token')\n                };\n                getProjectConfig(headers, {project_id: self.$route.params.project_id,page: self.page, name: \"\", type: \"env\"}).then(data => {\n                    if (data.code === '999999') {\n                        self.EnvList=[];\n                        data.data.data.forEach((item) => {\n                            if (item.status) {\n                                self.EnvList.push(item);\n                            }\n                        })\n                    }else {\n                        self.$message.error({\n                            message: data.msg,\n                            center: true,\n                        })\n                    }\n                });\n            },\n            getData() {\n                let self = this;\n                let headers = {\n                    Authorization: 'Token '+sessionStorage.getItem('token')\n                };\n                getProjectConfig(headers, {project_id: this.$route.params.project_id,page: self.page, name: \"\", type: \"data\"}).then(data => {\n                    if (data.code === '999999') {\n                        self.DataList=[];\n                        data.data.data.forEach((item) => {\n                            if (item.status) {\n                                self.DataList.push(item);\n                            }\n                        })\n                    }else {\n                        self.$message.error({\n                            message: data.msg,\n                            center: true,\n                        })\n                    }\n                });\n            },\n            //显示编辑界面\n            handleEdit: function (index, row) {\n                this.editFormVisible = true;\n                if(this.pageType=='update'){\n                    this.editFormTitle = \"修改步骤\";\n                }else{\n                    this.editFormTitle = \"查看步骤\";\n                }\n                this.editForm = {\"id\":row.stepId,\"name\":row.name,\"type\":row.type,\"params\":row.params,\"steps\":JSON.parse(row.steps),\"description\":row.description};\n                this.editForm.order = index+1;\n            },\n            actiontableshow: function(){\n                const _this = this;\n                let tbody = document.querySelector('.actiontable .el-table__body-wrapper tbody');\n                if(tbody!=null){\n                    Sortable.create(tbody, {\n                      onEnd({ newIndex, oldIndex }) {\n                        const currRow = _this.editForm.steps.splice(oldIndex, 1)[0];\n                        _this.editForm.steps.splice(newIndex, 0, currRow);\n                      }\n                    });\n                }\n            },\n            handleCopy: function (index, row) {\n                this.editFormVisible = true;\n                this.editFormTitle = \"复制步骤\";\n                this.editForm = {\"name\":row.name,\"type\":row.type,\"params\":row.params,\"steps\":JSON.parse(row.steps),\"description\":row.description};\n                this.editForm.order = this.StepList.length+1;\n            },\n            //显示新增界面\n            handleAdd: function () {\n                this.editFormVisible = true;\n                this.editFormTitle = \"添加步骤\";\n                this.editForm=this.addForm;\n                this.editForm.order=this.StepList.length+1;\n            },\n            //显示新增界面\n            handleAddReuse: function () {\n                this.reuseSteps.visible = true;\n                this.reuseSteps.page=1;\n                this.getReuseStepList();\n            },\n            getReuseStepList() {\n                let self=this;\n                let params={project_id: this.$route.params.project_id,page: self.reuseSteps.page};\n                let headers={Authorization:'Token '+sessionStorage.getItem('token')};\n                self.reuseSteps.loading = true;\n                axios.get(test+\"/api/automation/step_list\", {params:params,headers:headers}).then(response => {\n                    self.reuseSteps.loading = false;\n                    if (response.data.code === '999999') {\n                        self.reuseSteps.list = response.data.data.data;\n                        self.reuseSteps.total = response.data.data.total;\n                        self.reuseSteps.pages = response.data.data.pages;\n                    }\n                    else {\n                        self.$message.error({\n                            message: response.data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n                });\n            },\n            // 修改用例\n            editSubmit: function () {\n                if(this.editForm.id==null){\n                    this.addSubmit();\n                }else{\n                    let self = this;\n                    let steps=this.editForm.steps;\n                    if(steps.length==1&&steps[0][\"name\"]==\"\"){\n                        steps=[];\n                    }\n                    this.$refs.editForm.validate((valid) => {\n                        if (valid) {\n                            this.$confirm('确认提交吗？', '提示', {}).then(() => {\n                                self.editLoading = true;\n                                //NProgress.start();\n                                let params = JSON.stringify({\n                                    project_id: Number(this.$route.params.project_id),\n                                    automation_id: Number(this.$route.params.automation_id),\n                                    id: Number(self.editForm.id),\n                                    type: self.editForm.type,\n                                    name: self.editForm.name,\n                                    params: self.editForm.params,\n                                    steps: JSON.stringify(steps),\n                                    description: self.editForm.description,\n                                    order: self.editForm.order\n                                });\n                                let headers={\"Content-Type\": \"application/json\",Authorization: 'Token '+sessionStorage.getItem('token')};\n                                axios.post(test+\"/api/automation/update_step\", params,{headers:headers}).then(response => {\n                                    self.editLoading = false;\n                                    if (response.data.code === '999999') {\n                                        self.$message({\n                                            message: '修改成功',\n                                            center: true,\n                                            type: 'success'\n                                        });\n                                        self.$refs['editForm'].resetFields();\n                                        self.editFormVisible = false;\n                                        self.getAutomationStepList()\n                                    } else if (response.data.code === '999997'){\n                                        self.$message.error({\n                                            message: response.data.msg,\n                                            center: true,\n                                        })\n                                    } else {\n                                        self.$message.error({\n                                            message: response.data.msg,\n                                            center: true,\n                                        })\n                                    }\n                                }).catch(error=>{\n                                });\n                            }).catch(() => {});\n                        }\n                  });\n                }\n            },\n            //新增用例\n            addSubmit: function () {\n                this.$refs.editForm.validate((valid) => {\n                    if (valid) {\n                        let self = this;\n                        let steps=this.editForm.steps;\n                        if(steps.length==1&&steps[0][\"name\"]==\"\"){\n                            steps=[];\n                        }\n                        this.$confirm('确认提交吗？', '提示', {}).then(() => {\n                            self.editLoading = true;\n                            //NProgress.start();\n                            let params = JSON.stringify({\n                                project_id: Number(this.$route.params.project_id),\n                                type: this.editForm.type,\n                                automation_id: Number(this.$route.params.automation_id),\n                                name: self.editForm.name,\n                                params: self.editForm.params,\n                                steps: JSON.stringify(steps),\n                                description: self.editForm.description,\n                                order: self.editForm.order\n                            });\n                            let headers={\"Content-Type\": \"application/json\",Authorization: 'Token '+sessionStorage.getItem('token')};\n                            axios.post(test+\"/api/automation/add_step\", params,{headers:headers}).then(response => {\n                                self.editLoading = false;\n                                if (response.data.code === '999999') {\n                                    self.$message({\n                                        message: '添加成功',\n                                        center: true,\n                                        type: 'success'\n                                    });\n                                    self.$refs['editForm'].resetFields();\n                                    self.editFormVisible = false;\n                                    self.getAutomationStepList()\n                                } else if (response.data.code === '999997'){\n                                    self.$message.error({\n                                        message: response.data.msg,\n                                        center: true,\n                                    })\n                                } else {\n                                    self.$message.error({\n                                        message: response.data.msg,\n                                        center: true,\n                                    });\n                                    self.$refs['editForm'].resetFields();\n                                    self.editFormVisible = false;\n                                    self.getAutomationStepList()\n                                }\n                            }).catch(error=>{\n                            });\n                        }).catch(() => {});\n                    }\n                });\n            },\n            // 修改用例\n            updateAutomation: function () {\n                let self = this;\n                this.$refs.automationForm.validate((valid) => {\n                    if (valid) {\n//                        this.$confirm('确认保存吗？', '提示', {}).then(() => {\n                            let orders=[];\n                            this.StepList.forEach((item) => {\n                                orders.push(item[\"id\"]);\n                            })\n                            let params = JSON.stringify({\n                                project_id: Number(this.$route.params.project_id),\n                                id: Number(self.automationForm.id),\n                                type: self.automationForm.type,\n                                name: self.automationForm.name,\n                                params: self.automationForm.params,\n                                group_id: Number(this.automationForm.group),\n                                description: self.automationForm.description,\n                                orders:orders\n                            });\n                            let headers={\"Content-Type\": \"application/json\",Authorization: 'Token '+sessionStorage.getItem('token')};\n                            axios.post(test+\"/api/automation/update_automation\", params,{headers:headers}).then(response => {\n                                if (response.data.code === '999999') {\n                                    self.$message({\n                                        message: '保存成功',\n                                        center: true,\n                                        type: 'success'\n                                    });\n                                } else {\n                                    self.$message.error({\n                                        message: response.data.msg,\n                                        center: true,\n                                    })\n                                }\n                            }).catch(error=>{\n                            });\n//                        }).catch(() => {});\n                    }\n                });\n            },\n            addCommand(index) {\n                this.editForm.steps.splice(index+1,0,{\"type\":\"\",\"name\":\"\",\"actionId\":0,\"params\":\"{}\",\"description\":\"\",\"disable\":\"False\"})\n            },\n            delCommand(index) {\n                this.editForm.steps.splice(index, 1);\n            },\n            changeCommand(index) {\n                let command=this.commands[this.editForm.steps[index].name];\n                this.editForm.steps[index].name=command.name;\n                this.editForm.steps[index].type=command.type;\n                this.editForm.steps[index].actionId=command.actionId;\n                this.editForm.steps[index].params=command.value;\n                this.editForm.steps[index].description=command.desc;\n            },\n            rowDrop() {\n                try{\n                    const tbody = document.querySelector('.steptable .el-table__body-wrapper tbody');\n                    const _this = this;\n                    Sortable.create(tbody, {\n                      onEnd({ newIndex, oldIndex }) {\n                        const currRow = _this.StepList.splice(oldIndex, 1)[0];\n                        _this.StepList.splice(newIndex, 0, currRow);\n                      }\n                    });\n                }catch(err){\n                    alert(err);\n                }\n            },\n            updateOrder(){\n                if(this.pageType=='update')this.rowDrop();\n                this.updateOrderStatus=true;\n            },\n            init(){\n                this.pageType=this.$route.params.type;\n                this.getAutomationGroupAndInfo();\n                if(this.pageType=='update'){\n                    this.getCommandList();\n                }else{\n                    this.getEnv();\n                    this.getData();\n                }\n            },\n        },\n        mounted() {\n            this.init();\n        },\n        watch: {\n            '$route' (to, from) { //监听路由是否变化\n              if(to.query!= from.query){\n                  this.reload();\n                  if(this.pageType=='update')this.rowDrop();\n//                 this.$router.go(0)\n              }\n            }\n        },\n    }\n",{"version":3,"sources":["autoStepList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"autoStepList.vue","sourceRoot":"src/views/project/auto","sourcesContent":["<template>\n    <section>\n        <router-link :to=\"{ name: '自动化列表', params: {project_id: this.$route.params.project_id}}\" style='text-decoration: none;color: aliceblue;'>\n            <el-button class=\"return-list\"><i class=\"el-icon-d-arrow-left\" style=\"margin-right: 5px\"></i>自动化列表</el-button>\n        </router-link>\n        <el-button v-show=\"(currentType==='case'||currentType==='reuse')&&pageType==='update'\" type=\"primary\" @click.native=\"handleAdd\">添加步骤</el-button>\n        <el-button v-show=\"(currentType==='case'||currentType==='reuse')&&pageType==='update'\" type=\"primary\" @click.native=\"handleAddReuse\">添加可重用步骤</el-button>\n        <el-button v-show=\"currentType==='monitor'&&pageType==='update'\" type=\"primary\" @click=\"handleLinkApi\">关联接口</el-button>\n        <el-button v-show=\"currentType==='list'&&pageType==='update'\" type=\"primary\" @click=\"handleLinkAutomation\">关联自动化</el-button>\n        <!--<router-link :to=\"{ name: '添加新接口'}\" style='text-decoration: none;color: #000000;'>-->\n            <!--<el-button type=\"primary\"><i class=\"el-icon-plus\" style=\"margin-right: 5px\"></i>新建接口</el-button>-->\n        <!--</router-link>-->\n        <el-button type=\"primary\" v-show=\"pageType!=='update'\" :disabled=\"running\" @click=\"RunAutomation(ids)\">\n            <div v-show=\"!running\">执行</div>\n            <div v-show=\"running\">执行中</div>\n        </el-button>\n        <el-button type=\"primary\" v-show=\"pageType!=='update' && (currentType==='list'||currentType==='monitor') && failRerunShow\" :disabled=\"running\" @click=\"RunAutomation(failIds)\">\n          <div v-show=\"!running\">失败重跑</div>\n          <div v-show=\"running\">执行中</div>\n        </el-button>\n        <!--<el-input type=\"textarea\" :rows=\"1\" v-model.trim=\"automation.params\"></el-input>-->\n        <el-select v-model=\"env\"  v-show=\"pageType!=='update'\" placeholder=\"执行环境\">\n            <el-option v-for=\"(item,index) in EnvList\" :key=\"index+''\" :label=\"item.name\" :value=\"item.name\"></el-option>\n        </el-select>\n        <el-select v-model=\"data\"  multiple v-show=\"pageType!=='update'\" placeholder=\"测试数据\">\n            <el-option v-for=\"(item,index) in DataList\" :key=\"index+''\" :label=\"item.name\" :value=\"item.name\"></el-option>\n        </el-select>\n        <el-select v-model=\"result.resulttrace\"  v-show=\"pageType!=='update'\" placeholder=\"执行结果\" @change=\"getResult(result.resulttrace)\">\n            <el-option v-for=\"(item,index) in result.ResultList\" :style=\"result_color[item.result]\" :key=\"index+''\" :label=\"item.testTime\" :value=\"item.trace\"></el-option>\n        </el-select>\n        <router-link :to=\"{ name: '更新自动化步骤', params: {automation_id: this.$route.params.automation_id,type: 'update'}}\" style='text-decoration: none;'><el-button v-show=\"pageType!=='update'\" class=\"return-list\" type=\"primary\" style=\"float: right; margin-right: 15px\">修改</el-button></router-link>\n        <router-link :to=\"{ name: '自动化步骤列表', params: {automation_id: this.$route.params.automation_id}}\" style='text-decoration: none;'><el-button v-show=\"pageType==='update'\" class=\"return-list\" type=\"primary\" style=\"float: right; margin-right: 15px\">执行</el-button></router-link>\n        <el-button v-show=\"pageType==='update'\" class=\"return-list\" type=\"primary\" style=\"float: right; margin-right: 15px\" @click.native=\"updateAutomation\">保存</el-button>\n        <el-dialog title=\"选择可重用步骤\" :visible.sync=\"reuseSteps.visible\" :close-on-click-modal=\"false\" >\n            <el-row :gutter=\"10\">\n                <el-col :span=\"18\">\n                    <el-table :data=\"reuseSteps.list\" highlight-current-row v-loading=\"reuseSteps.loading\"\n                              style=\"width: 100%;\" :show-header=\"true\" max-height=\"400\" @selection-change=\"selStepsChange\">\n                        <el-table-column type=\"selection\" width=\"55\">\n                        </el-table-column>\n                        <el-table-column prop=\"name\" label=\"名称\" min-width=\"20%\" sortable>\n                        </el-table-column>\n                        <el-table-column prop=\"params\" label=\"参数\" min-width=\"50%\" sortable>\n                        </el-table-column>\n                        <el-table-column prop=\"description\" label=\"描述\" min-width=\"30%\" sortable>\n                        </el-table-column>\n                    </el-table>\n                </el-col>\n            </el-row>\n            <el-col :span=\"24\" class=\"toolbar\">\n                <el-pagination layout=\"total, prev, pager, next\" @current-change=\"handleCurrentChangeStep\" :current-page.sync=\"reuseSteps.page\" :total=\"reuseSteps.total\" :page-size=\"20\" :page-count=\"reuseSteps.pages\" style=\"float:right;\">\n                </el-pagination>\n            </el-col>\n            <div slot=\"footer\" class=\"dialog-footer\">\n                <el-button @click.native=\"reuseSteps.visible = false\">取消</el-button>\n                <el-button type=\"primary\" @click.native=\"addReuseSteps\">提交</el-button>\n            </div>\n        </el-dialog>\n        <el-dialog title=\"关联接口\" :visible.sync=\"linkApi.visible\" :close-on-click-modal=\"false\" >\n            <el-row>\n              <el-input v-model.trim=\"linkApi.name\" placeholder=\"名称,分组\" @keyup.enter.native=\"getApiList\"></el-input>\n              <!--<el-button type=\"primary\" @click=\"getAutomationList\">查询</el-button>-->\n            </el-row>\n            <el-row :gutter=\"10\">\n                <el-col :span=\"24\">\n                    <el-table :data=\"linkApi.list\" highlight-current-row v-loading=\"linkApi.loading\"\n                              style=\"width: 100%;\" :show-header=\"true\" max-height=\"400\" @selection-change=\"selApisChange\">\n                        <el-table-column type=\"selection\" width=\"55\">\n                        </el-table-column>\n                        <el-table-column prop=\"name\" label=\"名称\" min-width=\"20%\" sortable>\n                        </el-table-column>\n                        <el-table-column prop=\"params\" label=\"参数\" min-width=\"50%\" sortable>\n                        </el-table-column>\n                        <el-table-column prop=\"description\" label=\"描述\" min-width=\"30%\" sortable>\n                        </el-table-column>\n                    </el-table>\n                </el-col>\n            </el-row>\n            <el-col :span=\"24\" class=\"toolbar\">\n                <el-pagination layout=\"total, prev, pager, next\" @current-change=\"handleCurrentChangeApi\" :current-page.sync=\"linkApi.page\" :total=\"linkApi.total\" :page-size=\"20\" :page-count=\"linkApi.pages\" style=\"float:right;\">\n                </el-pagination>\n            </el-col>\n            <div slot=\"footer\" class=\"dialog-footer\">\n                <el-button @click.native=\"linkApi.visible = false\">取消</el-button>\n                <el-button type=\"primary\" @click.native=\"linkApiSubmit\" :loading=\"linkApi.loading\">提交</el-button>\n            </div>\n        </el-dialog>\n        <el-dialog title=\"关联用例\" :visible.sync=\"linkAutomation.visible\" :close-on-click-modal=\"false\" >\n            <!--<el-col :span=\"24\" style=\"padding-bottom: 0px;\">-->\n            <el-row>\n              <el-input v-model.trim=\"linkAutomation.name\" placeholder=\"名称,分组\" @keyup.enter.native=\"getAutomationList\"></el-input>\n              <!--<el-button type=\"primary\" @click=\"getAutomationList\">查询</el-button>-->\n            </el-row>\n            <el-row :gutter=\"10\">\n                <el-col :span=\"24\">\n                    <el-table :data=\"linkAutomation.list\" highlight-current-row v-loading=\"linkAutomation.loading\"\n                              style=\"width: 100%;\" :show-header=\"true\" max-height=\"400\" @selection-change=\"selAutomationsChange\">\n                        <el-table-column type=\"selection\" width=\"55\">\n                        </el-table-column>\n                        <el-table-column prop=\"name\" label=\"名称\" min-width=\"20%\" sortable>\n                        </el-table-column>\n                        <el-table-column prop=\"description\" label=\"描述\" min-width=\"30%\" sortable>\n                        </el-table-column>\n                    </el-table>\n                </el-col>\n            </el-row>\n            <el-col :span=\"24\" class=\"toolbar\">\n                <el-pagination layout=\"total, prev, pager, next\" @current-change=\"handleCurrentChangeAutomation\" :current-page.sync=\"linkAutomation.page\" :total=\"linkAutomation.total\" :page-size=\"20\" :page-count=\"linkAutomation.pages\" style=\"float:right;\">\n                </el-pagination>\n            </el-col>\n            <div slot=\"footer\" class=\"dialog-footer\">\n                <el-button @click.native=\"linkAutomation.visible = false\">取消</el-button>\n                <el-button type=\"primary\" @click.native=\"linkAutomationSubmit\" :loading=\"linkAutomation.loading\">提交</el-button>\n            </div>\n        </el-dialog>\n        <el-form :model=\"automationForm\"  :rules=\"editFormRules\" ref=\"automationForm\" label-width=\"80px\">\n            <div style=\"border: 1px solid #e6e6e6;margin-bottom: 10px;padding:15px\">\n                <el-row :gutter=\"10\">\n                    <el-col :span='8'>\n                        <el-form-item label=\"名称\" prop=\"name\">\n                            <el-input :disabled=\"pageType!=='update'\" v-model.trim=\"automationForm.name\" auto-complete=\"off\"></el-input>\n                        </el-form-item>\n                    </el-col>\n                    <el-col :span='5'>\n                        <el-form-item label=\"类型\" label-width=\"83px\" prop=\"type\">\n                            <el-select :disabled=\"pageType!=='update'\" v-model=\"automationForm.type\" placeholder=\"类型\">\n                                <el-option v-for=\"(item,index) in automationType\" :key=\"index+''\" :label=\"item.label\" :value=\"item.value\"></el-option>\n                            </el-select>\n                        </el-form-item>\n                    </el-col>\n                    <el-col :span='8'>\n                        <el-form-item label=\"分组\" label-width=\"83px\" prop=\"group\">\n                            <treeselect :disabled=\"pageType!=='update'\" v-model=\"automationForm.group\" :options=\"group\" placeholder=\"请选择\"/>\n                            <!--<SelectTree :options=\"group\" :filter=\"false\" :value=\"automationForm.group\"/>-->\n                            <!--<el-select v-model=\"automationForm.group\" placeholder=\"分组\">-->\n                                <!--<el-option v-for=\"(item,index) in group\" :key=\"index+''\" :label=\"item.name\" :value=\"item.id\"></el-option>-->\n                            <!--</el-select>-->\n                        </el-form-item>\n                    </el-col>\n                </el-row>\n                <el-row :gutter=\"10\">\n                    <el-form-item label=\"参数\" prop='params'>\n                        <el-input type=\"textarea\" :rows=\"2\" v-model.trim=\"automationForm.params\"></el-input>\n                    </el-form-item>\n                </el-row>\n                <el-row :gutter=\"10\">\n                    <el-form-item label=\"描述\" prop='description'>\n                        <el-input :disabled=\"pageType!=='update'\" type=\"textarea\" :rows=\"2\" v-model.trim=\"automationForm.description\"></el-input>\n                    </el-form-item>\n                </el-row>\n            </div>\n        </el-form>\n        <el-table class=\"steptable\" row-key=\"name\" :data=\"StepList\" :row-class-name=\"getStepRowClass\" @selection-change=\"selsChange\" highlight-current-row v-loading=\"listLoading\" style=\"width: 100%;\">\n            <el-table-column type=\"selection\" min-width=\"5%\">\n            </el-table-column>\n            <el-table-column type=\"index\" min-width=\"5%\">\n            </el-table-column>\n            <el-table-column prop=\"name\" label=\"名称\" min-width=\"30%\" show-overflow-tooltip>\n                <template slot-scope=\"scope\">\n                    <span v-show=\"automationForm.type!=='monitor'&&scope.row.type!=='case'&&scope.row.type!=='reuse'\" @click=\"handleEdit(scope.$index, scope.row)\" style=\"font-size: 16px\">{{scope.row.name}}</span>\n                    <router-link v-show=\"scope.row.type==='case'||scope.row.type==='reuse'\" :to=\"{ name: '自动化步骤列表', params: {automation_id: scope.row.stepId}}\" style='text-decoration: none;'>{{ scope.row.name }}</router-link>\n                    <router-link v-show=\"automationForm.type==='monitor'\" :to=\"{ name: '基础信息', params: {api_id: scope.row.id}}\" style='text-decoration: none;'>{{ scope.row.name }}</router-link>\n                </template>\n            </el-table-column>\n            <el-table-column prop=\"description\" label=\"描述\" min-width=\"30%\" show-overflow-tooltip>\n                <template slot-scope=\"scope\">\n                    <span style=\"font-size: 16px\">{{scope.row.description}}</span>\n                </template>\n            </el-table-column>\n            <!--<el-table-column prop=\"testtime\" label=\"执行时间\" min-width=\"15%\" show-overflow-tooltip>-->\n                <!--<template slot-scope=\"scope\">-->\n                    <!--<span style=\"font-size: 16px\">{{scope.row.testtime}}</span>-->\n                <!--</template>-->\n            <!--</el-table-column>-->\n            <el-table-column prop=\"result\" label=\"结果\" min-width=\"10%\">\n                <template slot-scope=\"scope\">\n                    <span v-show=\"!scope.row.result||scope.row.result==='RUNNING'\">未执行</span>\n                    <router-link v-if=\"(scope.row.type==='case'||scope.row.type==='reuse')&&scope.row.result\" :to=\"{ name: '自动化执行详情', params: {project_id: project_id,automation_id: scope.row.stepId,trace:scope.row.trace}}\" style='text-decoration: none;'>\n                      <span v-show=\"scope.row.result==='PASS'\" style=\"color: #11b95c;cursor:pointer;\">通过</span>\n                      <span v-show=\"scope.row.result==='FAIL'\" style=\"color: #cc0000;cursor:pointer;\">失败</span>\n                    </router-link>\n                    <span v-show=\"(scope.row.type!=='case'&&scope.row.type!=='reuse')&&scope.row.result==='PASS'\" style=\"color: #11b95c;cursor:pointer;\" @click=\"resultShow(scope.row)\">通过</span>\n                    <span v-show=\"(scope.row.type!=='case'&&scope.row.type!=='reuse')&&scope.row.result==='FAIL'\" style=\"color: #cc0000;cursor:pointer;\" @click=\"resultShow(scope.row)\">失败</span>\n                </template>\n            </el-table-column>\n            <el-table-column prop=\"status\" label=\"启用\" min-width=\"10%\">\n                <template slot-scope=\"scope\">\n                    <img v-show=\"scope.row.status\" src=\"@/assets/icon-yes.svg\"/>\n                    <img v-show=\"!scope.row.status\" src=\"@/assets/icon-no.svg\"/>\n                </template>\n            </el-table-column>\n            <el-table-column label=\"操作\" min-width=\"30%\">\n                <template slot-scope=\"scope\">\n                  <el-dropdown v-show=\"pageType==='update'&&(automationForm.type==='case'||automationForm.type==='reuse')\">\n                    <el-button type=\"primary\" size=\"small\" @click=\"handleEdit(scope.$index, scope.row)\" plain>修改<i class=\"el-icon-arrow-down el-icon--right\"></i></el-button>\n                    <el-dropdown-menu slot=\"dropdown\">\n                      <el-dropdown-item><el-button type=\"primary\" size=\"small\" @click=\"handleCopy(scope.$index, scope.row)\" plain>复制</el-button></el-dropdown-item>\n                      <el-dropdown-item><el-button type=\"info\" size=\"small\" @click=\"handleChangeStatus(scope.$index, scope.row)\" plain>{{scope.row.status===false?'启用':'禁用'}}</el-button></el-dropdown-item>\n                      <el-dropdown-item><el-button type=\"danger\" size=\"small\" @click=\"handleDel(scope.$index, scope.row)\" plain>删除</el-button></el-dropdown-item>\n                    </el-dropdown-menu>\n                  </el-dropdown>\n                  <el-button-group v-show=\"pageType==='update'\">\n                    <el-button v-show=\"automationForm.type==='list'\" type=\"info\" size=\"mini\" @click=\"handleChangeStatus(scope.$index, scope.row)\">{{scope.row.status===false?'启用':'禁用'}}</el-button>\n                    <el-button v-show=\"automationForm.type==='monitor'\" type=\"primary\" size=\"mini\" @click=\"handleUnlinkApi(scope.$index, scope.row)\">取消关联</el-button>\n                    <el-button v-show=\"automationForm.type==='list'\" type=\"primary\" size=\"mini\" @click=\"handleUnlinkAutomation(scope.$index, scope.row)\">取消关联</el-button>\n                  </el-button-group>\n                </template>\n            </el-table-column>\n        </el-table>\n        <el-button v-show=\"pageType==='update'\" class=\"return-list\" type=\"primary\" style=\"float: right; margin-right: 15px\" :disabled=\"updateOrderStatus\" @click=\"updateOrder()\">\n            编辑步骤顺序\n        </el-button>\n        <el-dialog width=\"80%\" :title=\"editFormTitle\" :visible.sync=\"editFormVisible\" :close-on-click-modal=\"false\" @open=\"actiontableshow\" style=\"width: 100%;\">\n            <el-form :model=\"editForm\"  :rules=\"editFormRules\" ref=\"editForm\" label-width=\"80px\">\n                <el-form-item label=\"名称\" prop=\"name\">\n                    <el-input v-model.trim=\"editForm.name\" auto-complete=\"off\"></el-input>\n                </el-form-item>\n                <el-form-item label=\"类型:\" label-width=\"83px\" prop=\"type\">\n                    <el-select v-model=\"editForm.type\" placeholder=\"类型\">\n                        <el-option v-for=\"(item,index) in stepType\" :key=\"index+''\" :label=\"item.label\" :value=\"item.value\"></el-option>\n                    </el-select>\n                </el-form-item>\n                <el-form-item label=\"参数\" prop='params'>\n                    <el-input type=\"textarea\" :rows=\"3\" v-model.trim=\"editForm.params\"></el-input>\n                </el-form-item>\n                <el-form-item label=\"描述\" prop='description'>\n                    <el-input type=\"textarea\" :rows=\"4\" v-model.trim=\"editForm.description\"></el-input>\n                </el-form-item>\n                <el-form-item label=\"操作\" prop='steps'><el-button size=\"mini\" title=\"添加\" class=\"el-icon-plus\" @click=\"addCommand(0)\"></el-button>\n                    <!--<el-input type=\"textarea\" :rows=\"4\" v-model.trim=\"editForm.steps\"></el-input>-->\n                    <el-table id=\"actiontable\" lazy=false class=\"actiontable\" row-key=\"name\" :data=\"editForm.steps\" highlight-current-row>\n                            <el-table-column type=\"index\" min-width=\"5%\">\n                            </el-table-column>\n                            <el-table-column prop=\"name\" label=\"名称\" min-width=\"30%\">\n                                <template slot-scope=\"scope\">\n                                    <el-select style=\"width:100%\" placeholder=\"步骤名称\" filterable v-model=\"scope.row.name\" @change=\"changeCommand(scope.$index)\">\n                                        <el-option v-for=\"(item,key) in commands\" :key=\"key+''\" :label=\"item.alias\" :value=\"item.name\"></el-option>\n                                    </el-select>\n                                    <!--<el-input class=\"selectInput\" v-model.trim=\"scope.row.name\" :value=\"scope.row.name\" placeholder=\"请输入内容\"></el-input>-->\n                                </template>\n                            </el-table-column>\n                            <el-table-column prop=\"params\" label=\"参数\" min-width=\"35%\">\n                                <template slot-scope=\"scope\">\n                                    <el-input type=\"textarea\" :rows=\"2\" v-model.trim=\"scope.row.params\" :value=\"scope.row.params\" placeholder=\"请输入内容\"></el-input>\n                                </template>\n                            </el-table-column>\n                            <el-table-column label=\"描述\" min-width=\"20%\">\n                                <template slot-scope=\"scope\">\n                                    <el-input type=\"textarea\" :rows=\"2\" v-model.trim=\"scope.row.description\" :value=\"scope.row.description\" placeholder=\"请输入内容\"></el-input>\n                                </template>\n                            </el-table-column>\n                            <el-table-column label=\"操作\" min-width=\"20%\">\n                                <template slot-scope=\"scope\">\n                                      <el-button-group>\n                                        <el-button size=\"mini\" title=\"删除\" class=\"el-icon-minus\" @click=\"delCommand(scope.$index)\"></el-button>\n                                        <el-button size=\"mini\" title=\"添加\" class=\"el-icon-plus\" @click=\"addCommand(scope.$index)\"></el-button>\n                                        <router-link v-show=\"scope.row.type==='api'\" :to=\"{ name: '基础信息', params: {api_id: scope.row.actionId}}\" style='text-decoration: none;'><el-button title=\"查看接口\" size=\"mini\" class=\"el-icon-view\"></el-button></router-link>\n                                        <router-link v-show=\"scope.row.type==='automation'\" :to=\"{ name: '自动化步骤列表', params: {automation_id: scope.row.actionId}}\" style='text-decoration: none;'><el-button title=\"查看用例\" size=\"mini\" class=\"el-icon-view\"></el-button></router-link>\n                                      </el-button-group>\n                                    <!--<el-button size=\"mini\" class=\"el-icon-plus\" @click=\"addCommand(scope.$index)\"></el-button>-->\n                                </template>\n                            </el-table-column>\n                        </el-table>\n                </el-form-item>\n            </el-form>\n            <div slot=\"footer\" class=\"dialog-footer\">\n                <el-button @click.native=\"editFormVisible = false\">取消</el-button>\n                <el-button v-show=\"pageType==='update'\" type=\"primary\" @click.native=\"editSubmit\" :loading=\"editLoading\">提交</el-button>\n            </div>\n        </el-dialog>\n\n        <el-dialog width=\"60%\" :title=\"StepResultName\" :visible.sync=\"AutomationResult\" :close-on-click-modal=\"false\">\n            <el-table :data=\"StepResultDetails\" max-height=\"400\" highlight-current-row v-loading=\"listLoading\" style=\"width: 100%;\">\n                <el-table-column type=\"expand\">\n                    <template slot-scope=\"props\">\n                        <el-form label-position=\"left\" inline class=\"demo-table-expand\">\n\n                            <el-table v-show=\"props.row.type==='automation'\" :data=\"props.row.details\" highlight-current-row v-loading=\"listLoading\" style=\"width: 100%;\">\n                                <!--<el-table-column type=\"expand\">-->\n                                    <!--<template slot-scope=\"props\">-->\n                                        <!--<el-form label-position=\"left\" inline class=\"demo-table-expand\">-->\n                                            <!--<el-row v-show=\"props.row.type==='api'\" :gutter=\"10\">-->\n                                                <!--<el-form-item label=\"接口地址： \">-->\n                                                    <!--<span>{{ props.row.url }}</span>-->\n                                                <!--</el-form-item>-->\n                                            <!--</el-row>-->\n                                            <!--<el-row v-show=\"props.row.type==='api'\" :gutter=\"10\">-->\n                                                <!--<el-form-item label=\"请求方式： \">-->\n                                                    <!--<span>{{ props.row.method }}</span>-->\n                                                <!--</el-form-item>-->\n                                            <!--</el-row>-->\n                                            <!--<el-row v-show=\"props.row.type==='api'\" :gutter=\"10\">-->\n                                                <!--<el-form-item label=\"请求参数： \">-->\n                                                    <!--<span style=\"word-break: break-all;overflow:auto;overflow-x:hidden\">{{ props.row.data }}</span>-->\n                                                <!--</el-form-item>-->\n                                            <!--</el-row>-->\n                                            <!--<el-row :gutter=\"10\">-->\n                                                <!--<el-form-item label=\"返回结果： \">-->\n                                                    <!--<span>-->\n                                                        <!--&lt;!&ndash;<pre style=\"word-break: break-all;overflow:auto;overflow-x:hidden\">&ndash;&gt;-->\n                                                          <!--<code v-show=\"props.row.type!=='api'\" >{{ props.row.result }}</code>-->\n                                                        <!--&lt;!&ndash;</pre>&ndash;&gt;-->\n                                                        <!--<json-viewer v-show=\"props.row.type==='api'\" :value=\"props.row.result\" :expand-depth=5 boxed copyable></json-viewer>-->\n                                                    <!--</span>-->\n                                                <!--</el-form-item>-->\n                                            <!--</el-row>-->\n                                        <!--</el-form>-->\n                                    <!--</template>-->\n                                <!--</el-table-column>-->\n                                <el-table-column type=\"index\" width=\"55\">\n                                </el-table-column>\n                                <el-table-column prop=\"name\" label=\"名称\" min-width=\"20%\" show-overflow-tooltip>\n                                    <template slot-scope=\"scope\">\n                                        <span style=\"font-size: 16px\">{{scope.row.name}}</span>\n                                    </template>\n                                </el-table-column>\n                                <el-table-column prop=\"result\" label=\"结果\" min-width=\"40%\" show-overflow-tooltip>\n                                    <template slot-scope=\"scope\">\n                                        <span style=\"font-size: 16px\">{{scope.row.result}}</span>\n                                    </template>\n                                </el-table-column>\n                                <el-table-column prop=\"status\" label=\"状态\" min-width=\"10%\" show-overflow-tooltip>\n                                    <template slot-scope=\"scope\">\n                                        <span v-show=\"scope.row.status==='PASS'\" style=\"color: #11b95c;cursor:pointer;\">成功</span>\n                                        <span v-show=\"scope.row.status==='FAIL'\" style=\"color: #cc0000;cursor:pointer;\">失败</span>\n                                    </template>\n                                </el-table-column>\n                                <el-table-column prop=\"description\" label=\"描述\" min-width=\"30%\" show-overflow-tooltip>\n                                    <template slot-scope=\"scope\">\n                                        <span style=\"font-size: 16px\">{{scope.row.description}}</span>\n                                    </template>\n                                </el-table-column>\n                            </el-table>\n\n                            <el-row v-show=\"props.row.type==='api'\" :gutter=\"10\">\n                                <el-form-item label=\"接口地址： \">\n                                    <span>{{ props.row.url }}</span>\n                                </el-form-item>\n                            </el-row>\n                            <el-row v-show=\"props.row.type==='api'\" :gutter=\"10\">\n                                <el-form-item label=\"请求方式： \">\n                                    <span>{{ props.row.method }}</span>\n                                </el-form-item>\n                            </el-row>\n                            <el-row v-show=\"props.row.type==='api'\" :gutter=\"10\">\n                                <el-form-item label=\"请求参数： \">\n                                    <span style=\"word-break: break-all;overflow:auto;overflow-x:hidden\">{{ props.row.data }}</span>\n                                </el-form-item>\n                            </el-row>\n                            <el-row v-show=\"props.row.type!=='automation'\" :gutter=\"10\">\n                                <el-form-item label=\"返回结果： \">\n                                    <span>\n                                        <!--<pre style=\"word-break: break-all;overflow:auto;overflow-x:hidden\">-->\n                                          <code v-show=\"props.row.type!=='api'\" >{{ props.row.result }}</code>\n                                        <!--</pre>-->\n                                        <json-viewer v-show=\"props.row.type==='api'\" :value=\"props.row.result\" :expand-depth=5 boxed copyable></json-viewer>\n                                    </span>\n                                </el-form-item>\n                            </el-row>\n                        </el-form>\n                    </template>\n                </el-table-column>\n                <el-table-column type=\"index\" width=\"55\">\n                </el-table-column>\n                <el-table-column prop=\"name\" label=\"名称\" min-width=\"20%\" show-overflow-tooltip>\n                    <template slot-scope=\"scope\">\n                        <span style=\"font-size: 16px\">{{scope.row.name}}</span>\n                    </template>\n                </el-table-column>\n                <el-table-column prop=\"result\" label=\"结果\" min-width=\"40%\" show-overflow-tooltip>\n                    <template slot-scope=\"scope\">\n                        <span style=\"font-size: 16px\">{{scope.row.result}}</span>\n                    </template>\n                </el-table-column>\n                <el-table-column prop=\"status\" label=\"状态\" min-width=\"10%\" show-overflow-tooltip>\n                    <template slot-scope=\"scope\">\n                        <span v-show=\"scope.row.status==='PASS'\" style=\"color: #11b95c;cursor:pointer;\">成功</span>\n                        <span v-show=\"scope.row.status==='FAIL'\" style=\"color: #cc0000;cursor:pointer;\">失败</span>\n                    </template>\n                </el-table-column>\n                <el-table-column prop=\"description\" label=\"描述\" min-width=\"30%\" show-overflow-tooltip>\n                    <template slot-scope=\"scope\">\n                        <span style=\"font-size: 16px\">{{scope.row.description}}</span>\n                    </template>\n                </el-table-column>\n            </el-table>\n        </el-dialog>\n    </section>\n</template>\n\n<script>\n    import Treeselect from '@riophae/vue-treeselect'\n    // import the styles\n    import '@riophae/vue-treeselect/dist/vue-treeselect.css'\n    import { test,getProjectConfig,runAutomation } from '../../../api/api'\n//    import SelectTree from \"../../../components/treeSelect.vue\";\n    import Sortable from 'sortablejs'\n    import $ from 'jquery'\n    import moment from \"moment\"\n    import axios from \"axios\"\n    export default {\n        components: {\n          Treeselect\n        },\n        inject: [\"reload\"],\n        data() {\n            return{\n                automationType: [{value: 'case', label: '普通用例'},\n                     {value: 'reuse', label: '可复用用例'},\n                    {value: 'list', label: '用例集'},\n                    {value: 'data', label: '数据用例'},\n                    {value: 'monitor', label: '接口监控'},\n                ],\n                currentType: \"\",\n                result_color: {\"PASS\":\"color:green\",\"FAIL\":\"color:red\"},\n                stepType: [{value: 'normal', label: '普通'},\n                    {value: 'project', label: '项目'},\n                    {value: 'global', label: '全局'}],\n                project: \"\",\n                automation: \"\",\n                StepList: [],\n                stepIds: [],\n                failIds: [],\n                failRerunShow: false,\n                ids: [],\n                listLoading: false,\n                running: false,\n                updateOrderStatus: false,\n                searchName: \"\",\n                total: 0,\n                page: 1,\n                env: '',\n                data: '',\n                group: [],\n                EnvList: [],\n                DataList: [],\n                commands: {},\n                groupData: [],\n                sels: [],//列表选中列\n                AutomationResult: false,\n                StepResultDetails: [],\n                StepResultName: \"\",\n                result: {},\n                StepListLen: \"\",\n                StepListIndex: 0,\n                activeIndex: \"\",\n\n                editFormVisible: false,//编辑界面是否显示\n                editFormTitle: \"\",\n                editLoading: false,\n                editFormRules: {\n                    name: [\n                        { required: true, message: '请输入名称', trigger: 'blur' },\n                        { min: 1, max: 1024, message: '长度在 1 到 1024 个字符', trigger: 'blur' }\n                    ],\n                    type: [\n                        { required: true, message: '请选择类型', trigger: 'blur'}\n                    ],\n                    description: [\n                        { required: false, message: '请输入描述', trigger: 'blur' },\n                        { max: 1024, message: '不能超过1024个字符', trigger: 'blur' }\n                    ]\n                },\n                //编辑界面数据\n                editForm: {\n                    name: '',\n                    params: '{}',\n                    steps: [],\n                    description: '',\n                    type: 'normal',\n                    order: ''\n                },\n                //新增界面数据\n                addForm: {\n                    name: '',\n                    params: '{}',\n                    steps: [{\"type\":\"\",\"name\":\"\",\"actionId\":0,\"params\":\"{}\",\"description\":\"\",\"disable\":\"False\"}],\n                    description: '',\n                    type: 'normal',\n                    order: ''\n                },\n                automationForm: {\n                    name: '',\n                    type: '',\n                    group: null,\n                    params: '{}',\n                    description: '',\n                    id: ''\n                },\n                linkAutomation: {\n                    visible: false,\n                    loading: false,\n                    list: [],\n                    page: 1,\n                    pages: 0,\n                    total: 0,\n                    selAutomations: []\n                },\n                linkApi: {\n                    visible: false,\n                    loading: false,\n                    list: [],\n                    page: 1,\n                    pages: 0,\n                    total: 0,\n                    selApis: []\n                },\n                reuseSteps: {\n                    visible: false,\n                    loading: false,\n                    list: [],\n                    total: 0,\n                    page: 1,\n                    pages: 0,\n                    selSteps: []\n                },\n                result: {\n                    resulttrace: '',\n                    ResultList: []\n                },\n                getResultTimer: '',\n                getResultTimes: 0,\n                project_id: this.$route.params.project_id,\n                pageType: '',\n            }\n        },\n        methods: {\n            selsChange: function (sels) {\n                if(this.automationForm.type==\"monitor\"){\n                    this.ids = sels.map(item => item.id);\n                }else{\n                    this.ids = sels.map(item => item.stepId);\n                }\n            },\n            getStepRowClass({ row }) {\n              if (!row.status) {\n                return 'disable-step';\n              }\n              return '';\n            },\n            handleSelect(key, keyPath) {\n                this.activeIndex = key;\n                console.log(this.activeIndex)\n            },\n            // 获取用例分组\n            getAutomationGroupAndInfo() {\n                let self = this;\n                axios.get(test+\"/api/automation/group\", {params:{project_id:this.$route.params.project_id}}).then(response => {\n                    if (response.data.code === '999999') {\n                        self.group = response.data.data;\n                    }else{\n                        self.$message.error({\n                            message: response.data.msg,\n                            center: true,\n                        })\n                    }\n                    self.getAutomationStepList();\n                }).catch(error=>{\n\n                });\n            },\n            getAutomationStepList() {\n                this.listLoading = true;\n                let self = this;\n                let params={ project_id: this.$route.params.project_id,\n                    page: self.page,\n                    name: self.searchName,\n                    automation_id: this.$route.params.automation_id\n                };\n                axios.get(test+\"/api/automation/step_list\", {params:params}).then(response => {\n                    self.listLoading = false;\n                    self.stepIds=[];\n                    if (response.data.code === '999999') {\n                        self.currentType=response.data.data.automation.type;\n                        self.StepList = [];\n                        self.result.ResultList = [];\n                        self.automationForm=response.data.data.automation;\n                        self.automationForm.group=response.data.data.automation.group;\n                        response.data.data.steps.forEach((item) =>{\n                            item.result = false;\n                            self.StepList.push(item);\n                            if(response.data.data.automation.type=='list'){\n                                self.stepIds.push(item.stepId);\n                            }else if(response.data.data.automation.type=='monitor'){\n                                self.stepIds.push(item.id);\n                            }\n                        });\n                        response.data.data.results.forEach((item) =>{\n                            self.result.ResultList.push(item);\n                        });\n                        // self.ApiList = data.data.data\n                    }else {\n                        self.$message.error({\n                            message: response.data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n                });\n            },\n            getCommandList() {\n                this.listLoading = true;\n                let self = this;\n                axios.get(test+\"/api/automation/command_list\", {params:{project_id:this.$route.params.project_id,automation_id: this.$route.params.automation_id}}).then(response => {\n                    self.listLoading = false;\n                    if (response.data.code === '999999') {\n                        self.commands = {};\n                        response.data.data.data.forEach((item) =>{\n                            self.commands[item.name]=item;\n                        });\n                        // self.ApiList = data.data.data\n                    }\n                    else {\n                        self.$message.error({\n                            message: response.data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            getResult(trace) {\n                let self = this;\n                let params={ project_id: this.$route.params.project_id,\n                    automation_id: this.$route.params.automation_id,\n                    trace: trace\n                };\n                if(!self.running) {\n                  self.StepList.forEach((item, index) => {\n                    item.testtime = \"\";\n                    item.result = null;\n                    item.details = [];\n                  });\n                };\n                axios.get(test+\"/api/automation/getresult\", {params:params}).then(response => {\n                    self.getResultTimes++;\n                    if (response.data.code === '999999') {\n                        self.failIds=[]\n                        response.data.data.details.forEach((item,index) =>{\n                            self.StepList.forEach((step,stepIndex)=>{\n                                if(((item.type==\"step\"||item.type==\"automation\")&&item[\"id\"]==step[\"stepId\"])||((item.type==\"api\")&&item[\"id\"]==step[\"id\"])){\n                                  step.result=item.status;\n                                  step.testtime=item.testtime;\n                                  step.details=item.details;\n                                  step.trace=item.trace;\n                                  if(item.status==\"FAIL\"&&(item[\"type\"]==\"api\"||item[\"type\"]==\"automation\")){\n                                      self.failIds.push(item[\"id\"]);\n                                  }\n                                }\n                            })\n                        });\n                        if(response.data.data.status!=\"RUNNING\"||self.getResultTimes>100){\n                            self.getResultTimes=0;\n                            clearInterval(self.getResultTimer);\n                            self.running=false;\n                            if(self.failIds.length>0){\n                                self.failRerunShow=true;\n                            }else{\n                                self.failRerunShow=false;\n                            }\n                        }\n                    }else{\n                        self.$message.error({\n                            message: '获取失败',\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            StepTotal() {\n                this.StepListLen = this.StepList.length;\n            },\n            handleLinkApi: function () {\n                this.linkApi.visible = true;\n                this.linkApi.page=1;\n                this.getApiList();\n            },\n            getApiList(){\n                let self=this;\n                self.linkApi.loading = true;\n                let params={\n                    project_id: this.$route.params.project_id,\n                    page: self.linkApi.page,\n                    name: self.linkApi.name,\n                    exclude: JSON.stringify(self.stepIds),\n                };\n                axios.get(test+\"/api/api/api_list\", {params:params}).then(response => {\n                    self.linkApi.loading = false;\n                    if (response.data.code === '999999') {\n                        self.linkApi.list = response.data.data.data;\n                        self.linkApi.total = response.data.data.total;\n                        self.linkApi.pages = response.data.data.pages;\n                    }\n                    else {\n                        self.$message.error({\n                            message: response.data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            //取消关联\n            handleUnlinkApi: function (index, row) {\n                this.$confirm('确认取消关联接口[' + row.name + ']吗?', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    this.listLoading = true;\n                    let self = this;\n                    let params=JSON.stringify({ project_id: Number(this.$route.params.project_id), automation_id: Number(this.$route.params.automation_id),ids: [row.id] });\n                    let headers={\n                        \"Content-Type\": \"application/json\",\n                        Authorization: 'Token '+sessionStorage.getItem('token')\n                    };\n                    axios.post(test+\"/api/automation/unlink_api\", params,{headers:headers}).then(response => {\n                        self.listLoading = false;\n                        if (response.data.code === '999999') {\n                            self.$message({\n                                message: '取消关联成功',\n                                center: true,\n                                type: 'success'\n                            })\n                        } else {\n                            self.$message.error({\n                                message: response.data.msg,\n                                center: true,\n                            })\n                        }\n                        self.getAutomationStepList();\n                    }).catch(error=>{\n\n                    });\n                }).catch(() => {\n                });\n            },\n            //取消关联\n            handleUnlinkAutomation: function (index, row) {\n                this.$confirm('确认取消关联用例[' + row.name + ']吗?', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    this.listLoading = true;\n                    //NProgress.start();\n                    let self = this;\n                    let params=JSON.stringify({ project_id: Number(this.$route.params.project_id), automation_id: Number(this.$route.params.automation_id),ids: [row.stepId] });\n                    let headers={\n                        \"Content-Type\": \"application/json\",\n                        Authorization: 'Token '+sessionStorage.getItem('token')\n                    };\n                    axios.post(test+\"/api/automation/unlink_automation\", params,{headers:headers}).then(response => {\n                        self.listLoading = false;\n                        if (response.data.code === '999999') {\n                            self.$message({\n                                message: '取消关联成功',\n                                center: true,\n                                type: 'success'\n                            })\n                        } else {\n                            self.$message.error({\n                                message: response.data.msg,\n                                center: true,\n                            })\n                        }\n                        self.getAutomationStepList();\n                    }).catch(error=>{\n\n                    });\n                }).catch(() => {\n                });\n            },\n            handleChangeStatus: function(index, row) {\n                let self = this;\n                this.listLoading = true;\n                let headers = {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: 'Token '+sessionStorage.getItem('token')\n                };\n                let params = {project_id: Number(this.$route.params.project_id),id: row.id,status:!row.status,type:row.type};\n                let successMsg='禁用成功';\n                if(!row.status){\n                    successMsg='启用成功';\n                }\n                axios.post(test+\"/api/automation/stepstatus_update\", params,{headers:headers}).then(response => {\n                    self.listLoading = false;\n                    if (response.data.code === '999999') {\n                        self.$message({\n                            message: successMsg,\n                            center: true,\n                            type: 'success'\n                        })\n                        row.status = !row.status;\n                    }else {\n                        self.$message.error({\n                            message: response.data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n                });\n            },\n            linkApiSubmit: function () {\n                let ids = this.linkApi.selApis.map(item => item.id);\n                let self = this;\n                this.$confirm('确认关联选中的接口吗？', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    self.listLoading = true;\n                    //NProgress.start();\n                    let params=JSON.stringify({\n                        project_id: Number(this.$route.params.project_id),\n                        automation_id: Number(this.$route.params.automation_id),\n                        ids: ids\n                    });\n                    let headers={\n                        \"Content-Type\": \"application/json\",\n                        Authorization: 'Token '+sessionStorage.getItem('token')\n                    };\n                    axios.post(test+\"/api/automation/link_api\", params,{headers:headers}).then(response => {\n                        self.listLoading = false;\n                        if (response.data.code === '999999') {\n                            self.$message({\n                                message: '关联成功',\n                                center: true,\n                                type: 'success'\n                            })\n                        }else {\n                            self.$message.error({\n                                message: response.data.msg,\n                                center: true,\n                            })\n                        }\n                        self.linkApi.visible = false;\n                        self.getAutomationStepList()\n                    }).catch(error=>{\n                    });\n                }).catch(() => {\n\n                });\n            },\n            getAutomationList(){\n                let self=this;\n                self.linkAutomation.loading = true;\n                let params={\n                    project_id: this.$route.params.project_id,\n                    type: \"case\",\n                    page: self.linkAutomation.page,\n                    exclude: JSON.stringify(self.stepIds),\n                };\n                if(this.linkAutomation.name!=\"\"){\n                    params[\"name\"]=this.linkAutomation.name;\n                }\n                let headers={Authorization: 'Token '+sessionStorage.getItem('token')};\n                axios.get(test+\"/api/automation/automation_list\", {params:params,headers:headers}).then(response => {\n                    self.linkAutomation.loading = false;\n                    if (response.data.code === '999999') {\n                        self.linkAutomation.list = response.data.data.data;\n                        self.linkAutomation.total = response.data.data.total;\n                        self.linkAutomation.pages = response.data.data.pages;\n                    }else{\n                        self.$message.error({\n                            message: response.data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n                });\n            },\n            //显示新增界面\n            handleLinkAutomation: function () {\n                this.linkAutomation.visible = true;\n                this.linkAutomation.page = 1;\n                this.getAutomationList();\n            },\n            linkAutomationSubmit: function () {\n                let ids = this.linkAutomation.selAutomations.map(item => item.id);\n                let self = this;\n                this.$confirm('确认关联选中的用例吗？', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    self.listLoading = true;\n                    //NProgress.start();\n                    let params=JSON.stringify({\n                        project_id: Number(this.$route.params.project_id),\n                        automation_id: Number(this.$route.params.automation_id),\n                        ids: ids\n                    });\n                    let headers={\"Content-Type\": \"application/json\",Authorization: 'Token '+sessionStorage.getItem('token')};\n                    axios.post(test+\"/api/automation/link_automation\", params,{headers:headers}).then(response => {\n                        self.listLoading = false;\n                        if (response.data.code === '999999') {\n                            self.$message({\n                                message: '关联成功',\n                                center: true,\n                                type: 'success'\n                            })\n                        }\n                        else {\n                            self.$message.error({\n                                message: response.data.msg,\n                                center: true,\n                            })\n                        }\n                        self.linkAutomation.visible = false;\n                        self.getAutomationStepList()\n                    }).catch(error=>{\n                    });\n                }).catch(() => {\n\n                });\n            },\n            RunAutomation(ids) {\n                if (this.env) {\n                    let self = this;\n                    let data={\n                            project_id: Number(this.$route.params.project_id),\n                            automation_id: Number(this.$route.params.automation_id),\n                            params: this.automationForm.params,\n                            env: this.env,\n                            data: this.data,\n                    };\n                    if(ids&&ids.length>0){\n                        data[\"ids\"]=ids;\n                    }\n                    let header = {\n                                \"Content-Type\": \"application/json\",\n                                Authorization: 'Token '+sessionStorage.getItem('token')\n                            };\n                    runAutomation(header,data).then(data => {\n                        if (data.code === '999999') {\n                            self.$message({\n                                message: '开始执行',\n                                center: true,\n                                type: \"success\",\n                            }),\n                            self.StepList.forEach((item,index) =>{\n                                item.testtime=\"\";\n                                item.result=null;\n                                item.details=[];\n                            });\n                            self.result.ResultList.splice(0,0,{\"testTime\":data.data.testtime,\"trace\":data.data.trace,\"result\":data.data.status});\n                            if(data.data.status==\"RUNNING\"){\n                                self.running=true;\n                                self.getResultTimes=0;\n                                self.getResultTimer = setInterval(() =>{\n//                                        self.getAutomationStepList();\n                                    self.getResult(data.data.trace);\n                                }, 3000);\n                            }\n                        }else {\n                            self.$message.error({\n                                message: data.msg,\n                                center: true,\n                            })\n                        }\n                    });\n                } else {\n                    this.$message({\n                        message: '请选择测试环境',\n                        center: true,\n                        type: 'warning'\n                    })\n                }\n            },\n            handleDel(index, row){\n                this.$confirm('确认删除步骤[' + row.name + ']吗?', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    this.listLoading = true;\n                    let self = this;\n                    let params=JSON.stringify({\n                            project_id: Number(this.$route.params.project_id),\n                            automation_id: Number(this.$route.params.automation_id),\n                            ids: [{\"order\":index+1,\"id\":row.stepId}] });\n                    let headers={\"Content-Type\": \"application/json\",Authorization: 'Token '+sessionStorage.getItem('token')};\n                    axios.post(test+\"/api/automation/del_step\", params,{headers:headers}).then(response => {\n                        self.listLoading = false;\n                        if (response.data.code === '999999') {\n                            self.$message({\n                                message: '删除成功',\n                                center: true,\n                                type: 'success'\n                            })\n                        } else {\n                            self.$message.error({\n                                message: response.data.msg,\n                                center: true,\n                            })\n                        }\n                        self.getAutomationStepList();\n                    }).catch(error=>{\n                    });\n                }).catch(() => {\n                });\n            },\n            resultShow(row) {\n                this.AutomationResult=true;\n                this.StepResultDetails=row.details;\n                this.StepResultName=row.name;\n            },\n            handleCurrentChangeStep(val) {\n                this.reuseSteps.page = val;\n                this.getReuseStepList();\n            },\n            handleCurrentChangeAutomation(val) {\n                this.linkAutomation.page = val;\n                this.getAutomationList();\n            },\n            handleCurrentChangeApi(val) {\n                this.linkApi.page = val;\n                this.getApiList();\n            },\n            selStepsChange(sels){\n                this.reuseSteps.selSteps = sels;\n            },\n            selApisChange(sels){\n                this.linkApi.selApis = sels;\n            },\n            selAutomationsChange(sels){\n                this.linkAutomation.selAutomations = sels;\n            },\n            addReuseSteps: function () {\n                let ids = this.reuseSteps.selSteps.map(item => item.id);\n                let self = this;\n                this.$confirm('确认添加选中的步骤吗？', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    self.listLoading = true;\n                    let params=JSON.stringify({\n                        project_id: Number(this.$route.params.project_id),\n                        automation_id: Number(this.$route.params.automation_id),\n                        ids: ids\n                    });\n                    let headers={\"Content-Type\": \"application/json\",Authorization: 'Token '+sessionStorage.getItem('token')};\n                    axios.post(test+\"/api/automation/add_reuse_steps\", params,{headers:headers}).then(response => {\n                        self.listLoading = false;\n                        if (response.data.code === '999999') {\n                            self.$message({\n                                message: '添加成功',\n                                center: true,\n                                type: 'success'\n                            })\n                        }\n                        else {\n                            self.$message.error({\n                                message: response.data.msg,\n                                center: true,\n                            })\n                        }\n                        self.reuseSteps.visible = false;\n                        self.getAutomationStepList();\n                    }).catch(error=>{\n                    });\n                }).catch(() => {\n\n                });\n            },\n            getEnv() {\n                let self = this;\n                let headers = {\n                    Authorization: 'Token '+sessionStorage.getItem('token')\n                };\n                getProjectConfig(headers, {project_id: self.$route.params.project_id,page: self.page, name: \"\", type: \"env\"}).then(data => {\n                    if (data.code === '999999') {\n                        self.EnvList=[];\n                        data.data.data.forEach((item) => {\n                            if (item.status) {\n                                self.EnvList.push(item);\n                            }\n                        })\n                    }else {\n                        self.$message.error({\n                            message: data.msg,\n                            center: true,\n                        })\n                    }\n                });\n            },\n            getData() {\n                let self = this;\n                let headers = {\n                    Authorization: 'Token '+sessionStorage.getItem('token')\n                };\n                getProjectConfig(headers, {project_id: this.$route.params.project_id,page: self.page, name: \"\", type: \"data\"}).then(data => {\n                    if (data.code === '999999') {\n                        self.DataList=[];\n                        data.data.data.forEach((item) => {\n                            if (item.status) {\n                                self.DataList.push(item);\n                            }\n                        })\n                    }else {\n                        self.$message.error({\n                            message: data.msg,\n                            center: true,\n                        })\n                    }\n                });\n            },\n            //显示编辑界面\n            handleEdit: function (index, row) {\n                this.editFormVisible = true;\n                if(this.pageType=='update'){\n                    this.editFormTitle = \"修改步骤\";\n                }else{\n                    this.editFormTitle = \"查看步骤\";\n                }\n                this.editForm = {\"id\":row.stepId,\"name\":row.name,\"type\":row.type,\"params\":row.params,\"steps\":JSON.parse(row.steps),\"description\":row.description};\n                this.editForm.order = index+1;\n            },\n            actiontableshow: function(){\n                const _this = this;\n                let tbody = document.querySelector('.actiontable .el-table__body-wrapper tbody');\n                if(tbody!=null){\n                    Sortable.create(tbody, {\n                      onEnd({ newIndex, oldIndex }) {\n                        const currRow = _this.editForm.steps.splice(oldIndex, 1)[0];\n                        _this.editForm.steps.splice(newIndex, 0, currRow);\n                      }\n                    });\n                }\n            },\n            handleCopy: function (index, row) {\n                this.editFormVisible = true;\n                this.editFormTitle = \"复制步骤\";\n                this.editForm = {\"name\":row.name,\"type\":row.type,\"params\":row.params,\"steps\":JSON.parse(row.steps),\"description\":row.description};\n                this.editForm.order = this.StepList.length+1;\n            },\n            //显示新增界面\n            handleAdd: function () {\n                this.editFormVisible = true;\n                this.editFormTitle = \"添加步骤\";\n                this.editForm=this.addForm;\n                this.editForm.order=this.StepList.length+1;\n            },\n            //显示新增界面\n            handleAddReuse: function () {\n                this.reuseSteps.visible = true;\n                this.reuseSteps.page=1;\n                this.getReuseStepList();\n            },\n            getReuseStepList() {\n                let self=this;\n                let params={project_id: this.$route.params.project_id,page: self.reuseSteps.page};\n                let headers={Authorization:'Token '+sessionStorage.getItem('token')};\n                self.reuseSteps.loading = true;\n                axios.get(test+\"/api/automation/step_list\", {params:params,headers:headers}).then(response => {\n                    self.reuseSteps.loading = false;\n                    if (response.data.code === '999999') {\n                        self.reuseSteps.list = response.data.data.data;\n                        self.reuseSteps.total = response.data.data.total;\n                        self.reuseSteps.pages = response.data.data.pages;\n                    }\n                    else {\n                        self.$message.error({\n                            message: response.data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n                });\n            },\n            // 修改用例\n            editSubmit: function () {\n                if(this.editForm.id==null){\n                    this.addSubmit();\n                }else{\n                    let self = this;\n                    let steps=this.editForm.steps;\n                    if(steps.length==1&&steps[0][\"name\"]==\"\"){\n                        steps=[];\n                    }\n                    this.$refs.editForm.validate((valid) => {\n                        if (valid) {\n                            this.$confirm('确认提交吗？', '提示', {}).then(() => {\n                                self.editLoading = true;\n                                //NProgress.start();\n                                let params = JSON.stringify({\n                                    project_id: Number(this.$route.params.project_id),\n                                    automation_id: Number(this.$route.params.automation_id),\n                                    id: Number(self.editForm.id),\n                                    type: self.editForm.type,\n                                    name: self.editForm.name,\n                                    params: self.editForm.params,\n                                    steps: JSON.stringify(steps),\n                                    description: self.editForm.description,\n                                    order: self.editForm.order\n                                });\n                                let headers={\"Content-Type\": \"application/json\",Authorization: 'Token '+sessionStorage.getItem('token')};\n                                axios.post(test+\"/api/automation/update_step\", params,{headers:headers}).then(response => {\n                                    self.editLoading = false;\n                                    if (response.data.code === '999999') {\n                                        self.$message({\n                                            message: '修改成功',\n                                            center: true,\n                                            type: 'success'\n                                        });\n                                        self.$refs['editForm'].resetFields();\n                                        self.editFormVisible = false;\n                                        self.getAutomationStepList()\n                                    } else if (response.data.code === '999997'){\n                                        self.$message.error({\n                                            message: response.data.msg,\n                                            center: true,\n                                        })\n                                    } else {\n                                        self.$message.error({\n                                            message: response.data.msg,\n                                            center: true,\n                                        })\n                                    }\n                                }).catch(error=>{\n                                });\n                            }).catch(() => {});\n                        }\n                  });\n                }\n            },\n            //新增用例\n            addSubmit: function () {\n                this.$refs.editForm.validate((valid) => {\n                    if (valid) {\n                        let self = this;\n                        let steps=this.editForm.steps;\n                        if(steps.length==1&&steps[0][\"name\"]==\"\"){\n                            steps=[];\n                        }\n                        this.$confirm('确认提交吗？', '提示', {}).then(() => {\n                            self.editLoading = true;\n                            //NProgress.start();\n                            let params = JSON.stringify({\n                                project_id: Number(this.$route.params.project_id),\n                                type: this.editForm.type,\n                                automation_id: Number(this.$route.params.automation_id),\n                                name: self.editForm.name,\n                                params: self.editForm.params,\n                                steps: JSON.stringify(steps),\n                                description: self.editForm.description,\n                                order: self.editForm.order\n                            });\n                            let headers={\"Content-Type\": \"application/json\",Authorization: 'Token '+sessionStorage.getItem('token')};\n                            axios.post(test+\"/api/automation/add_step\", params,{headers:headers}).then(response => {\n                                self.editLoading = false;\n                                if (response.data.code === '999999') {\n                                    self.$message({\n                                        message: '添加成功',\n                                        center: true,\n                                        type: 'success'\n                                    });\n                                    self.$refs['editForm'].resetFields();\n                                    self.editFormVisible = false;\n                                    self.getAutomationStepList()\n                                } else if (response.data.code === '999997'){\n                                    self.$message.error({\n                                        message: response.data.msg,\n                                        center: true,\n                                    })\n                                } else {\n                                    self.$message.error({\n                                        message: response.data.msg,\n                                        center: true,\n                                    });\n                                    self.$refs['editForm'].resetFields();\n                                    self.editFormVisible = false;\n                                    self.getAutomationStepList()\n                                }\n                            }).catch(error=>{\n                            });\n                        }).catch(() => {});\n                    }\n                });\n            },\n            // 修改用例\n            updateAutomation: function () {\n                let self = this;\n                this.$refs.automationForm.validate((valid) => {\n                    if (valid) {\n//                        this.$confirm('确认保存吗？', '提示', {}).then(() => {\n                            let orders=[];\n                            this.StepList.forEach((item) => {\n                                orders.push(item[\"id\"]);\n                            })\n                            let params = JSON.stringify({\n                                project_id: Number(this.$route.params.project_id),\n                                id: Number(self.automationForm.id),\n                                type: self.automationForm.type,\n                                name: self.automationForm.name,\n                                params: self.automationForm.params,\n                                group_id: Number(this.automationForm.group),\n                                description: self.automationForm.description,\n                                orders:orders\n                            });\n                            let headers={\"Content-Type\": \"application/json\",Authorization: 'Token '+sessionStorage.getItem('token')};\n                            axios.post(test+\"/api/automation/update_automation\", params,{headers:headers}).then(response => {\n                                if (response.data.code === '999999') {\n                                    self.$message({\n                                        message: '保存成功',\n                                        center: true,\n                                        type: 'success'\n                                    });\n                                } else {\n                                    self.$message.error({\n                                        message: response.data.msg,\n                                        center: true,\n                                    })\n                                }\n                            }).catch(error=>{\n                            });\n//                        }).catch(() => {});\n                    }\n                });\n            },\n            addCommand(index) {\n                this.editForm.steps.splice(index+1,0,{\"type\":\"\",\"name\":\"\",\"actionId\":0,\"params\":\"{}\",\"description\":\"\",\"disable\":\"False\"})\n            },\n            delCommand(index) {\n                this.editForm.steps.splice(index, 1);\n            },\n            changeCommand(index) {\n                let command=this.commands[this.editForm.steps[index].name];\n                this.editForm.steps[index].name=command.name;\n                this.editForm.steps[index].type=command.type;\n                this.editForm.steps[index].actionId=command.actionId;\n                this.editForm.steps[index].params=command.value;\n                this.editForm.steps[index].description=command.desc;\n            },\n            rowDrop() {\n                try{\n                    const tbody = document.querySelector('.steptable .el-table__body-wrapper tbody');\n                    const _this = this;\n                    Sortable.create(tbody, {\n                      onEnd({ newIndex, oldIndex }) {\n                        const currRow = _this.StepList.splice(oldIndex, 1)[0];\n                        _this.StepList.splice(newIndex, 0, currRow);\n                      }\n                    });\n                }catch(err){\n                    alert(err);\n                }\n            },\n            updateOrder(){\n                if(this.pageType=='update')this.rowDrop();\n                this.updateOrderStatus=true;\n            },\n            init(){\n                this.pageType=this.$route.params.type;\n                this.getAutomationGroupAndInfo();\n                if(this.pageType=='update'){\n                    this.getCommandList();\n                }else{\n                    this.getEnv();\n                    this.getData();\n                }\n            },\n        },\n        mounted() {\n            this.init();\n        },\n        watch: {\n            '$route' (to, from) { //监听路由是否变化\n              if(to.query!= from.query){\n                  this.reload();\n                  if(this.pageType=='update')this.rowDrop();\n//                 this.$router.go(0)\n              }\n            }\n        },\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n    .return-list {\n        margin-top: 0px;\n        margin-bottom: 10px;\n        border-radius: 25px;\n    }\n    .HttpStatus {\n        border-radius: 25px;\n        padding: 10px;\n        box-sizing: border-box;\n        color: #fff;\n        font-size: 15px;\n        background-color: #409eff;\n        text-align: center;\n        margin-right: 10px;\n    }\n    .resultStyle{\n        margin-left: 2%;\n        margin-top: 10px;\n    }\n    .lin{\n        left: 2%;\n        border: 1px solid #e6e6e6;\n        width: 90%;\n        position: relative\n    }\n    .disable-step{\n        opacity:0.5;\n    }\n</style>\n"]}]}