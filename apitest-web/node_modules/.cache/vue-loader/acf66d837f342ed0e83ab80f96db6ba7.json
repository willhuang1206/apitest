{"remainingRequest":"/Users/huangrong/workspace/apitest/apitest-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/huangrong/workspace/apitest/apitest-vue/src/views/project/auto/autoList.vue?vue&type=style&index=0&id=6ef4a1ad&lang=scss&scoped=true&","dependencies":[{"path":"/Users/huangrong/workspace/apitest/apitest-vue/src/views/project/auto/autoList.vue","mtime":1588752070443},{"path":"/Users/huangrong/workspace/apitest/apitest-vue/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-vue/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-vue/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-vue/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.api-title {\n    padding: 15px;\n    margin: 0px;\n    text-align: center;\n    border-radius:5px;\n    font-size: 15px;\n    color: aliceblue;\n    background-color: rgb(32, 160, 255);\n    font-family: PingFang SC;\n}\n.group .editGroup {\n    float:right;\n}\n.row-title {\n    margin: 35px;\n}\n.addGroup {\n    margin-top: 0px;\n    margin-bottom: 10px;\n    border-radius: 25px;\n}\n.api-view-a {\n    margin-left: 15px;\n    margin-right: 15px;\n    display: block;\n}\n.api-view-b {\n    margin-left: 15px;\n    margin-right: 15px;\n    display: none;\n}\na{\ntext-decoration:none;\n}\n",{"version":3,"sources":["autoList.vue"],"names":[],"mappingsgqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"autoList.vue","sourceRoot":"src/views/project/auto","sourcesContent":["<template>\n    <section>\n        <!--工具条-->\n        <el-col :span=\"24\" class=\"toolbar\" style=\"padding-bottom: 0px;\">\n            <el-form :inline=\"true\" :model=\"filters\" @submit.native.prevent>\n                <el-form-item>\n                    <el-input v-model.trim=\"filters.name\" placeholder=\"名称\" @keyup.enter.native=\"handleSearch\"></el-input>\n                </el-form-item>\n                <el-form-item>\n                    <el-select v-model=\"filters.type\"  placeholder=\"类型\">\n                        <el-option v-for=\"(item,index) in automationType\" :label=\"item.label\" :value=\"item.value\"></el-option>\n                    </el-select>\n                </el-form-item>\n                <el-form-item>\n                    <el-button size=\"medium\" type=\"primary\" @click=\"handleSearch\">查询</el-button>\n                </el-form-item>\n                <el-form-item>\n                    <el-button size=\"medium\" type=\"primary\" @click=\"handleAdd\">新增</el-button>\n                </el-form-item>\n                <el-form-item>\n                  <el-button size=\"medium\" type=\"primary\" @click=\"handleImportAutomation\">导入</el-button>\n                </el-form-item>\n                <el-form-item>\n                    <el-button size=\"medium\" type=\"primary\" :disabled=\"update\" @click=\"changeGroup\">修改分组</el-button>\n                </el-form-item>\n            </el-form>\n        </el-col>\n        <el-dialog width=\"40%\" :title=\"editFormTitle\" :visible.sync=\"editFormVisible\" :close-on-click-modal=\"false\">\n            <el-form :model=\"editForm\"  :rules=\"editFormRules\" ref=\"editForm\" label-width=\"80px\">\n                <el-form-item label=\"名称\" prop=\"name\">\n                    <el-input v-model.trim=\"editForm.name\" auto-complete=\"off\"></el-input>\n                </el-form-item>\n                <el-form-item label=\"类型\" label-width=\"83px\" prop=\"type\">\n                    <el-select v-model=\"editForm.type\" placeholder=\"类型\">\n                        <el-option v-for=\"(item,index) in automationType\" :key=\"index+''\" :label=\"item.label\" :value=\"item.value\"></el-option>\n                    </el-select>\n                </el-form-item>\n                <el-form-item label=\"分组\" label-width=\"83px\" prop=\"group\">\n                    <treeselect v-model=\"editForm.group\" :options=\"group\" placeholder=\"请选择\"/>\n                    <!--<SelectTree :options=\"group\" :filter=\"false\" :value=\"editForm.group\"/>-->\n                    <!--<el-select v-model=\"editForm.group\" placeholder=\"分组\">-->\n                        <!--<el-option v-for=\"(item,index) in group\" :key=\"index+''\" :label=\"item.name\" :value=\"item.id\"></el-option>-->\n                    <!--</el-select>-->\n                </el-form-item>\n                <el-form-item label=\"参数\" prop='params'>\n                    <el-input type=\"textarea\" :rows=\"4\" v-model.trim=\"editForm.params\"></el-input>\n                </el-form-item>\n                <el-form-item label=\"描述\" prop='description'>\n                    <el-input type=\"textarea\" :rows=\"4\" v-model.trim=\"editForm.description\"></el-input>\n                </el-form-item>\n            </el-form>\n            <div slot=\"footer\" class=\"dialog-footer\">\n                <el-button @click.native=\"editFormVisible = false\">取消</el-button>\n                <el-button type=\"primary\" @click.native=\"editSubmit\" :loading=\"editLoading\">提交</el-button>\n            </div>\n        </el-dialog>\n\n        <el-dialog width=\"40%\" title=\"修改所属分组\" :visible.sync=\"updateGroupFormVisible\" :close-on-click-modal=\"false\">\n            <el-form :model=\"updateGroupForm\" label-width=\"80px\"  :rules=\"updateGroupFormRules\" ref=\"updateGroupForm\">\n                <el-form-item label=\"分组\" prop=\"firstGroup\">\n                    <treeselect v-model=\"updateGroupForm.firstGroup\" :options=\"group\" placeholder=\"请选择\"/>\n                    <!--<SelectTree :options=\"group\" :filter=\"false\" :value=\"updateGroupForm.firstGroup\"/>-->\n                    <!--<el-select v-model=\"updateGroupForm.firstGroup\" placeholder=\"请选择分组\">-->\n                        <!--<el-option v-for=\"(item,index) in group\" :key=\"index+''\" :label=\"item.name\" :value=\"item.id\">-->\n                        <!--</el-option>-->\n                    <!--</el-select>-->\n                </el-form-item>\n            </el-form>\n            <div slot=\"footer\" class=\"dialog-footer\">\n                <el-button @click.native=\"updateGroupFormVisible = false\">取消</el-button>\n                <el-button type=\"primary\" @click.native=\"updateGroupSubmit\" :loading=\"updateGroupLoading\">提交</el-button>\n            </div>\n        </el-dialog>\n\n        <el-dialog width=\"40%\" title=\"导入用例\" :visible.sync=\"importAutomation.visible\" :close-on-click-modal=\"false\">\n          <el-form label-width=\"80px\" :rules=\"importAutomation.rules\">\n            <!--<el-form-item label=\"导入分组\" prop=\"importApi.importGroup\">-->\n              <!--<el-select v-model=\"updatePublishForm.publish\" placeholder=\"请选择\">-->\n                <!--<el-option v-for=\"(item,index) in updatePublishForm.publishlist\" :key=\"index+''\" :label=\"item\" :value=\"item\">-->\n                <!--</el-option>-->\n              <!--</el-select>-->\n              <!--<el-tree :data=\"importApi.data\" show-checkbox></el-tree>-->\n            <!--</el-form-item>-->\n            <el-form-item label=\"文件名:\" prop='importAutomation.fileName'>\n              <el-input v-model.trim=\"importAutomation.fileName\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"导入分组:\" prop=\"importAutomation.toGroup\">\n              <treeselect v-model=\"importAutomation.toGroup\" :options=\"group\" placeholder=\"请选择\"/>\n              <!--<SelectTree :options=\"group\" :filter=\"false\" :value=\"importAutomation.toGroup\"/>-->\n              <!--<el-select v-model=\"importAutomation.toGroup\" placeholder=\"请选择\">-->\n                <!--<el-option v-for=\"(item,index) in group\" :key=\"index+''\" :label=\"item.name\" :value=\"item.id\">-->\n                <!--</el-option>-->\n              <!--</el-select>-->\n            </el-form-item>\n            <el-row>\n              <a :href=\"downloadTemplateUrl\">下载模板</a>\n              <el-upload\n                class=\"upload-demo\"\n                :action=\"uploadFileUrl\"\n                :on-success=\"handleUploadSuccess\"\n                :limit=\"1\"\n                accept=\".xls,.xlsx\"\n                :file-list=\"fileList\">\n                <el-button size=\"small\" type=\"primary\">点击上传</el-button>\n                <div slot=\"tip\" class=\"el-upload__tip\">只能上传并导入excel文件</div>\n              </el-upload>\n            </el-row>\n            </el-form>\n          <div slot=\"footer\" class=\"dialog-footer\">\n            <el-button @click.native=\"importAutomation.visible = false\">取消</el-button>\n            <el-button type=\"primary\" @click.native=\"importAutomationSubmit\" :loading=\"importAutomation.loading\">提交</el-button>\n          </div>\n        </el-dialog>\n\n        <!--列表-->\n        <el-table :data=\"automationlist\" stripe border element-loading-text=\"拼命加载中\" element-loading-spinner=\"el-icon-loading\" highlight-current-row v-loading=\"listLoading\" @selection-change=\"selsChange\" style=\"width: 100%;\">\n            <el-table-column type=\"selection\" min-width=\"5%\">\n            </el-table-column>\n            <el-table-column prop=\"id\" label=\"ID\" sortable min-width=\"5%\">\n            </el-table-column>\n            <el-table-column prop=\"name\" label=\"自动化名称\" sortable min-width=\"20%\" show-overflow-tooltip>\n                <template slot-scope=\"scope\">\n                    <el-icon name=\"name\"></el-icon>\n                    <router-link :to=\"{ name: '自动化步骤列表', params: {automation_id: scope.row.id}}\" style='text-decoration: none;'>{{ scope.row.name }}</router-link>\n                </template>\n            </el-table-column>\n            <el-table-column prop=\"type\" label=\"类型\" min-width=\"5%\" show-overflow-tooltip>\n            </el-table-column>\n            <el-table-column prop=\"description\" label=\"描述\" min-width=\"20%\" show-overflow-tooltip>\n            </el-table-column>\n            <el-table-column prop=\"userUpdate\" label=\"更新人\" min-width=\"10%\" show-overflow-tooltip>\n            </el-table-column>\n            <el-table-column prop=\"updateTime\" label=\"更新日期\" min-width=\"15%\" show-overflow-tooltip>\n            </el-table-column>\n            <!--<el-table-column v-show=\"listType==='list'\" prop=\"result\" label=\"执行结果\" min-width=\"10%\" sortable show-overflow-tooltip>-->\n                <!--<template slot-scope=\"scope\">-->\n                    <!--<span v-show=\"!scope.row.result\">尚无执行结果</span>-->\n                    <!--<span v-show=\"scope.row.result==='PASS'\" style=\"color: #11b95c;\">成功</span>-->\n                    <!--<span v-show=\"scope.row.result==='FAIL'\" style=\"color: #cc0000;\">失败</span>-->\n                <!--</template>-->\n            <!--</el-table-column>-->\n            <el-table-column label=\"操作\" min-width=\"20%\">\n                <template slot-scope=\"scope\">\n                  <!--<el-button-group>-->\n                    <!--<router-link :to=\"{ name: '更新自动化步骤', params: {automation_id: scope.row.id,type: 'update'}}\" style='text-decoration: none;'><el-button size=\"mini\"\">修改</el-button></router-link>-->\n                    <!--<el-button type=\"primary\" size=\"mini\" @click=\"handleCopy(scope.$index, scope.row)\">复制</el-button>-->\n                    <!--<el-button type=\"danger\" size=\"mini\" @click=\"handleDel(scope.$index, scope.row)\">删除</el-button>-->\n                  <!--</el-button-group>-->\n                  <el-dropdown>\n                    <router-link :to=\"{ name: '更新自动化步骤', params: {automation_id: scope.row.id,type: 'update'}}\" style='text-decoration: none;'>\n                      <el-button type=\"primary\" size=\"small\" plain>修改<i class=\"el-icon-arrow-down el-icon--right\"></i></el-button>\n                    </router-link>\n                    <el-dropdown-menu slot=\"dropdown\">\n                      <el-dropdown-item><el-button type=\"primary\" size=\"small\" @click=\"handleCopy(scope.$index, scope.row)\" plain>复制</el-button></el-dropdown-item>\n                      <el-dropdown-item><el-button type=\"danger\" size=\"small\" @click=\"handleDel(scope.$index, scope.row)\" plain>删除</el-button></el-dropdown-item>\n                    </el-dropdown-menu>\n                  </el-dropdown>\n                </template>\n            </el-table-column>\n        </el-table>\n\n        <!--工具条-->\n        <el-col :span=\"24\" class=\"toolbar\">\n            <el-button type=\"danger\" @click=\"batchRemove\" :disabled=\"this.sels.length===0\">批量删除</el-button>\n            <el-pagination layout=\"total, prev, pager, next\" @current-change=\"handleCurrentChange\" :current-page.sync=\"page\" :total=\"total\" :page-size=\"page_size\" :page-count=\"pages\" style=\"float:right;\">\n            </el-pagination>\n        </el-col>\n    </section>\n</template>\n\n<script>\n    import Treeselect from '@riophae/vue-treeselect'\n    import Cookies from 'js-cookie'\n    import '@riophae/vue-treeselect/dist/vue-treeselect.css'\n//    import SelectTree from \"../../../components/treeSelect.vue\";\n    import { test,getProjectConfig,runAutomation } from '../../../api/api'\n    import $ from 'jquery'\n    import moment from \"moment\"\n    import axios from 'axios'\n    export default {\n        components: {\n//          SelectTree,\n          Treeselect,\n        },\n        data() {\n            return {\n                automationType: [\n                    {value: '', label: ''},\n                    {value: 'case', label: '普通用例'},\n                    {value: 'reuse', label: '可复用用例'},\n                    {value: 'list', label: '用例集'},\n                    {value: 'data', label: '数据用例'},\n                    {value: 'monitor', label: '接口监控'},\n                ],\n                listType: \"\",\n                filters: {\n                    name: '',\n                    type: '',\n                },\n                env: '',\n                automationlist: [],\n                total: 0,\n                pages: 0,\n                page: 1,\n                page_size: 20,\n                listLoading: false,\n                sels: [],//列表选中列\n                delLoading: false,\n                disDel: true,\n                TestStatus: false,\n                updateGroupFormVisible: false,\n                updateGroupForm: {\n                    firstGroup: null,\n                },\n                updateGroupFormRules: {\n                    firstGroup : [{ type: 'number', required: true, message: '请选择父分组', trigger: 'blur'}],\n                },\n                group: [],\n                updateGroupLoading: false,\n                update: true,\n\n                editFormVisible: false,//编辑界面是否显示\n                editFormTitle: \"\",\n                editLoading: false,\n                editFormRules: {\n                    name: [\n                        { required: true, message: '请输入名称', trigger: 'blur' },\n                        { min: 1, max: 1024, message: '长度在 1 到 1024 个字符', trigger: 'blur' }\n                    ],\n                    group: [\n                        { type: 'number', required: true, message: '请选择分组', trigger: 'blur'}\n                    ],\n                    description: [\n                        { required: false, message: '请输入描述', trigger: 'blur' },\n                        { max: 1024, message: '不能超过1024个字符', trigger: 'blur' }\n                    ]\n                },\n                //编辑界面数据\n                editForm: {\n                    name: '',\n                    group: null,\n                    description: '',\n                    params: '{}',\n                    type: 'case',\n                },\n                getResultTimer: '',\n                importAutomation:{\n                    visible: false,\n                    loading: false,\n                    rules: {\n                        fromGroup : [{ type: 'string', required: true, message: '请选择源分组', trigger: 'blur'}],\n                        toGroup : [{ type: 'string', required: true, message: '请选择导入分组', trigger: 'blur'}],\n                    },\n                    value: null,\n                    fromGroup: null,\n                    toGroup: null,\n                    fromDate: \"\",\n                    toDate: \"\",\n                    groups: [],\n                    fileName: \"\",\n                },\n                fileList: [],\n                formData: [],\n                role: Cookies.get('role'),\n                uploadFileUrl: test + \"/api/imports/uploadfile\",\n                downloadTemplateUrl: test + \"/api/imports/downloadtemplate\"\n            }\n        },\n        methods: {\n            handleUploadSuccess(res, file) {\n              this.importAutomation.fileName=file.name;\n            },\n            handleSearch(){\n                this.page=1;\n                this.getAutomationList();\n            },\n            // 获取用例列表\n            getAutomationList() {\n                this.listLoading = true;\n                let self = this;\n                sessionStorage.setItem(\"auto_name\",self.filters.name);\n                sessionStorage.setItem(\"auto_type\",self.filters.type);\n                let param = { project_id: this.$route.params.project_id, page: self.page, name: self.filters.name, type: self.filters.type};\n                if (this.$route.params.firstGroup) {\n                    param['first_group_id'] = this.$route.params.firstGroup;\n                }\n                axios.get(test+\"/api/automation/automation_list\", { params: param}).then(response => {\n                    self.listLoading = false;\n                    if (response.data.code === '999999') {\n                        self.total = response.data.data.total;\n                        self.pages = response.data.data.pages;\n                        self.page_size=response.data.data.page_size;\n                        self.automationlist=[];\n                        response.data.data.data.forEach((item) =>{\n                            item.result = false;\n                            self.automationlist.push(item)\n                        });\n                    }\n                    else {\n                        self.$message.error({\n                            message: response.data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            // 获取接口列表\n            getAutomationDomainList() {\n                this.importAutomation.loading = true;\n                let self = this;\n                let param = {};\n                axios.get(test+\"/api/imports/autodomainlist\", {params:param,headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                    let data=response.data;\n                    self.importAutomation.loading = false;\n                    if (data.code === '999999') {\n//                        alert(JSON.stringify(data.data));\n                        self.importAutomation.groups = data.data;\n                    }\n                    else {\n                        self.$message.error({\n                            message: data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            // 修改用例所属分组\n            updateGroupSubmit() {\n                let ids = this.sels.map(item => item.id);\n                let self = this;\n                this.$confirm('确认修改所属分组吗？', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    self.updateGroupLoading = true;\n                    //NProgress.start();\n                    let params = JSON.stringify({\n                        project_id: Number(this.$route.params.project_id),\n                        group_id: self.updateGroupForm.firstGroup,\n                        ids:ids\n                    });\n                    let header = {\n                        \"Content-Type\": \"application/json\",\n                        Authorization: 'Token '+sessionStorage.getItem('token')\n                    };\n                    axios.post(test+\"/api/automation/update_automation_group\", params,{headers:header}).then(response => {\n                        self.updateGroupLoading = false;\n                        if (response.data.code === '999999') {\n                            self.$message({\n                                message: '修改成功',\n                                center: true,\n                                type: 'success'\n                            });\n                            self.$router.push({ name: '分组自动化列表', params: { project_id: self.$route.params.project_id, firstGroup: self.updateGroupForm.firstGroup}});\n                        }\n                        else {\n                            self.$message.error({\n                                message: response.data.msg,\n                                center: true,\n                            })\n                        }\n                        self.updateGroupFormVisible = false;\n                        self.getAutomationList();\n                    }).catch(error=>{\n\n                    });\n                }).catch(() => {\n\n                });\n            },\n            importAutomationSubmit() {\n                let self = this;\n                this.$confirm('确认导入用例吗？', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    this.importAutomation.loading = true;\n                    //NProgress.start();\n                    let params = JSON.stringify({\n                        project_id:Number(this.$route.params.project_id),\n                        group_id: this.importAutomation.toGroup,\n                        fileName: this.importAutomation.fileName,\n                    });\n                    axios.post(test+\"/api/imports/automation_importfromexcel\", params,{headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                        let data=response.data;\n                        self.importAutomation.loading = false;\n                        if (data.code === '999999') {\n                            self.$message({\n                                message: data.msg,\n                                center: true,\n                                type: 'success'\n                            });\n                        }\n                        else {\n                            self.$message.error({\n                                message: data.msg,\n                                center: true,\n                            })\n                        }\n                        self.importAutomation.visible = false;\n                        self.getAutomationList();\n                    }).catch(error=>{\n\n                    });\n                }).catch(() => {\n\n                });\n            },\n            // 获取用例分组\n            getAutomationGroup() {\n                let self = this;\n                axios.get(test+\"/api/automation/group\", {params:{project_id: this.$route.params.project_id}}).then(response => {\n                    if (response.data.code === '999999') {\n                        self.group = response.data.data;\n                    }\n                    else {\n                        self.$message.error({\n                            message: response.data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            changeGroup() {\n                this.getAutomationGroup();\n                this.updateGroupFormVisible = true;\n            },\n            handleImportAutomation() {\n                this.getAutomationGroup();\n//                this.getAutomationDomainList();\n                this.importAutomation.visible = true;\n            },\n            //删除\n            handleDel: function (index, row) {\n                this.$confirm('确认删除用例[' + row.name + ']吗?', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    this.listLoading = true;\n                    //NProgress.start();\n                    let self = this;\n                    let param=JSON.stringify({\n                                project_id: Number(this.$route.params.project_id),\n                                ids: [row.id] });\n                    let header = {\n                        \"Content-Type\": \"application/json\",\n                        Authorization: 'Token '+sessionStorage.getItem('token')\n                    };\n                    axios.post(test+\"/api/automation/del_automation\",param,{headers:header}).then(response => {\n                        if (response.data.code === '999999') {\n                            self.$message({\n                                message: '删除成功',\n                                center: true,\n                                type: 'success'\n                            })\n                        }else {\n                            self.$message.error({\n                                message: response.data.msg,\n                                center: true,\n                            })\n                        }\n                        this.listLoading = true;\n                        self.getAutomationList();\n                    }).catch(error=>{\n                        this.listLoading = true;\n                    });\n                }).catch(() => {\n                });\n            },\n            handleCurrentChange(val) {\n                this.page = val;\n                this.getAutomationList()\n            },\n            selsChange: function (sels) {\n                if (sels.length>0) {\n                    this.sels = sels;\n                    this.update = false\n                } else {\n                    this.update = true\n                }\n            },\n            //批量删除\n            batchRemove: function () {\n                let ids = this.sels.map(item => item.id);\n                let self = this;\n                this.$confirm('确认删除选中记录吗？', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    self.listLoading = true;\n                    //NProgress.start();\n                    let param=JSON.stringify({ project_id: Number(this.$route.params.project_id), ids: ids});\n                    let header = {\n                        \"Content-Type\": \"application/json\",\n                        Authorization: 'Token '+sessionStorage.getItem('token')\n                    };\n                    axios.post(test+\"/api/automation/del_automation\",param,{headers:header}).then(response => {\n                        self.listLoading = false;\n                        if (response.data.code === '999999') {\n                            self.$message({\n                                message: '删除成功',\n                                center: true,\n                                type: 'success'\n                            })\n                        }\n                        else {\n                            self.$message.error({\n                                message: response.data.msg,\n                                center: true,\n                            })\n                        }\n                        self.getAutomationList();\n                    }).catch(error=>{\n\n                    });\n                }).catch(() => {\n\n                });\n            },\n            //显示编辑界面\n            handleEdit: function (index, row) {\n                this.getAutomationGroup();\n                this.editFormTitle=\"编辑\";\n                this.editFormVisible = true;\n                this.editForm = {\"id\":row.id,\"name\":row.name,\"type\":row.type,\"params\":row.params,\"group\":row.group,\"description\":row.description};\n            },\n            //显示新增页面,复制用例\n            handleCopy: function (index, row) {\n                this.getAutomationGroup();\n                this.editFormTitle=\"复制\";\n                this.editForm={\"copyId\":row.id,\"name\":row.name,\"type\":row.type,\"params\":row.params,\"group\":row.group,\"description\":row.description};\n                this.editFormVisible = true;\n            },\n            //显示新增界面\n            handleAdd: function () {\n                this.getAutomationGroup();\n                this.editFormTitle=\"新增\";\n                this.editFormVisible = true;\n            },\n            // 修改用例\n            editSubmit: function () {\n                if(this.editForm.id==null){\n                    this.addSubmit();\n                }else{\n                    let self = this;\n                    this.$refs.editForm.validate((valid) => {\n                        if (valid) {\n                            this.$confirm('确认提交吗？', '提示', {}).then(() => {\n                                self.editLoading = true;\n                                //NProgress.start();\n                                let params = JSON.stringify({\n                                    project_id: Number(this.$route.params.project_id),\n                                    id: Number(self.editForm.id),\n                                    type: self.editForm.type,\n                                    name: self.editForm.name,\n                                    params: self.editForm.params,\n                                    group_id: Number(this.editForm.group),\n                                    description: self.editForm.description });\n                                let headers={\"Content-Type\": \"application/json\",Authorization: 'Token '+sessionStorage.getItem('token')};\n                                axios.post(test+\"/api/automation/update_automation\", params,{headers:headers}).then(response => {\n                                    self.editLoading = false;\n                                    if (response.data.code === '999999') {\n                                        self.$message({\n                                            message: '修改成功',\n                                            center: true,\n                                            type: 'success'\n                                        });\n                                        self.$refs['editForm'].resetFields();\n                                        self.editFormVisible = false;\n                                        self.getAutomationList();\n                                    } else if (response.data.code === '999997'){\n                                        self.$message.error({\n                                            message: response.data.msg,\n                                            center: true,\n                                        });\n                                    } else {\n                                        self.$message.error({\n                                            message: response.data.msg,\n                                            center: true,\n                                        });\n                                    }\n                                }).catch(error=>{\n\n                                });\n                            }).catch(() => {});\n                        }\n                    });\n                }\n            },\n            //新增用例\n            addSubmit: function () {\n                this.$refs.editForm.validate((valid) => {\n                    if (valid) {\n                        let self = this;\n                        this.$confirm('确认提交吗？', '提示', {}).then(() => {\n                            self.editLoading = true;\n                            //NProgress.start();\n                            let param = {\n                                project_id: Number(this.$route.params.project_id),\n                                type: this.editForm.type,\n                                group_id: this.editForm.group,\n                                name: self.editForm.name,\n                                params: self.editForm.params,\n                                description: self.editForm.description };\n                            if(this.editFormTitle==\"复制\"){\n                                param[\"copyId\"]=self.editForm.copyId;\n                            }\n                            param=JSON.stringify(param);\n                            let headers={\"Content-Type\": \"application/json\",Authorization: 'Token '+sessionStorage.getItem('token')};\n                            axios.post(test+\"/api/automation/add_automation\", param,{headers:headers}).then(response => {\n                                self.editLoading = false;\n                                if (response.data.code === '999999') {\n                                    self.$message({\n                                        message: '添加成功',\n                                        center: true,\n                                        type: 'success'\n                                    });\n                                    self.$refs['editForm'].resetFields();\n                                    self.editFormVisible = false;\n                                    self.getAutomationList()\n                                } else if (response.data.code === '999997'){\n                                    self.$message.error({\n                                        message: response.data.msg,\n                                        center: true,\n                                    })\n                                } else {\n                                    self.$message.error({\n                                        message: response.data.msg,\n                                        center: true,\n                                    });\n                                    self.$refs['editForm'].resetFields();\n                                    self.editFormVisible = false;\n                                    self.getAutomationList()\n                                }\n                            }).catch(error=>{\n\n                            });\n                        }).catch(() => {});\n                    }\n                });\n            },\n            init(){\n                if(sessionStorage.getItem(\"auto_name\")!=null){\n                    this.filters.name=sessionStorage.getItem(\"auto_name\");\n                }\n                if(sessionStorage.getItem(\"auto_type\")!=null){\n                    this.filters.type=sessionStorage.getItem(\"auto_type\");\n                }\n//                this.getAutomationGroup();\n                this.getAutomationList();\n                if (this.$route.params.firstGroup) {\n                    this.updateGroupForm.firstGroup = Number(this.$route.params.firstGroup);\n                    this.editForm.group=Number(this.$route.params.firstGroup);\n                }\n            },\n        },\n        mounted() {\n            this.init();\n        },\n        watch: {\n            '$route' (to, from) { //监听路由是否变化\n              if(to.query!= from.query){\n                this.init();//重新加载数据\n              }\n            }\n        },\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n    .api-title {\n        padding: 15px;\n        margin: 0px;\n        text-align: center;\n        border-radius:5px;\n        font-size: 15px;\n        color: aliceblue;\n        background-color: rgb(32, 160, 255);\n        font-family: PingFang SC;\n    }\n    .group .editGroup {\n        float:right;\n    }\n    .row-title {\n        margin: 35px;\n    }\n    .addGroup {\n        margin-top: 0px;\n        margin-bottom: 10px;\n        border-radius: 25px;\n    }\n    .api-view-a {\n        margin-left: 15px;\n        margin-right: 15px;\n        display: block;\n    }\n    .api-view-b {\n        margin-left: 15px;\n        margin-right: 15px;\n        display: none;\n    }\n    a{\n    text-decoration:none;\n    }\n</style>\n"]}]}