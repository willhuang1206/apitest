{"remainingRequest":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/huangrong/workspace/apitest/apitest-web/src/views/project/auto/autoStepList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/huangrong/workspace/apitest/apitest-web/src/views/project/auto/autoStepList.vue","mtime":1590723735042},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n    import Treeselect from '@riophae/vue-treeselect'\n    // import the styles\n    import '@riophae/vue-treeselect/dist/vue-treeselect.css'\n    import { test,getProjectConfig,runAutomation } from '../../../api/api'\n//    import SelectTree from \"../../../components/treeSelect.vue\";\n    import Sortable from 'sortablejs'\n    import $ from 'jquery'\n    import moment from \"moment\"\n    import axios from \"axios\"\n    export default {\n        components: {\n          Treeselect\n        },\n//        inject: [\"reload\"],\n        data() {\n            return{\n                automationType: [{value: 'case', label: '普通用例'},\n                     {value: 'reuse', label: '可复用用例'},\n                    {value: 'list', label: '用例集'},\n                    {value: 'data', label: '数据用例'},\n                    {value: 'monitor', label: '接口监控'},\n                ],\n                currentType: \"\",\n                result_color: {\"PASS\":\"color:green\",\"FAIL\":\"color:red\"},\n                stepType: [{value: 'normal', label: '普通'},\n                    {value: 'project', label: '项目'},\n                    {value: 'global', label: '全局'}],\n                project: \"\",\n                automation: \"\",\n                StepList: [],\n                stepIds: [],\n                failIds: [],\n                failRerunShow: false,\n                ids: [],\n                listLoading: false,\n                running: false,\n                updateOrderStatus: false,\n                searchName: \"\",\n                total: 0,\n                page: 1,\n                env: '',\n                data: '',\n                group: [],\n                EnvList: [],\n                DataList: [],\n                commands: {},\n                groupData: [],\n                sels: [],//列表选中列\n                AutomationResult: false,\n                StepResultDetails: [],\n                StepResultName: \"\",\n                result: {},\n                StepListLen: \"\",\n                StepListIndex: 0,\n                activeIndex: \"\",\n\n                editFormVisible: false,//编辑界面是否显示\n                editFormTitle: \"\",\n                editLoading: false,\n                editFormRules: {\n                    name: [\n                        { required: true, message: '请输入名称', trigger: 'blur' },\n                        { min: 1, max: 1024, message: '长度在 1 到 1024 个字符', trigger: 'blur' }\n                    ],\n                    type: [\n                        { required: true, message: '请选择类型', trigger: 'blur'}\n                    ],\n                    description: [\n                        { required: false, message: '请输入描述', trigger: 'blur' },\n                        { max: 1024, message: '不能超过1024个字符', trigger: 'blur' }\n                    ]\n                },\n                //编辑界面数据\n                editForm: {\n                    name: '',\n                    params: '{}',\n                    steps: [],\n                    description: '',\n                    type: 'normal',\n                    order: ''\n                },\n                //新增界面数据\n                addForm: {\n                    name: '',\n                    params: '{}',\n                    steps: [{\"type\":\"\",\"name\":\"\",\"actionId\":0,\"params\":\"{}\",\"description\":\"\",\"disable\":\"False\"}],\n                    description: '',\n                    type: 'normal',\n                    order: ''\n                },\n                automationForm: {\n                    name: '',\n                    type: '',\n                    group: null,\n                    params: '{}',\n                    description: '',\n                    id: ''\n                },\n                linkAutomation: {\n                    visible: false,\n                    loading: false,\n                    list: [],\n                    page: 1,\n                    pages: 0,\n                    total: 0,\n                    selAutomations: []\n                },\n                linkApi: {\n                    visible: false,\n                    loading: false,\n                    list: [],\n                    page: 1,\n                    pages: 0,\n                    total: 0,\n                    selApis: []\n                },\n                reuseSteps: {\n                    visible: false,\n                    loading: false,\n                    list: [],\n                    total: 0,\n                    page: 1,\n                    pages: 0,\n                    selSteps: []\n                },\n                result: {\n                    resulttrace: '',\n                    ResultList: []\n                },\n                getResultTimer: '',\n                getResultTimes: 0,\n                project_id: this.$route.params.project_id,\n                pageType: '',\n            }\n        },\n        methods: {\n            selsChange: function (sels) {\n                if(this.automationForm.type==\"monitor\"){\n                    this.ids = sels.map(item => item.id);\n                }else{\n                    this.ids = sels.map(item => item.stepId);\n                }\n            },\n            getStepRowClass({ row }) {\n              if (!row.status) {\n                return 'disable-step';\n              }\n              return '';\n            },\n            handleSelect(key, keyPath) {\n                this.activeIndex = key;\n                console.log(this.activeIndex)\n            },\n            // 获取用例分组\n            getAutomationGroupAndInfo() {\n                let self = this;\n                axios.get(test+\"/api/automation/group\", {params:{project_id:this.$route.params.project_id}}).then(response => {\n                    if (response.data.code === '999999') {\n                        self.group = response.data.data;\n                    }else{\n                        self.$message.error({\n                            message: response.data.msg,\n                            center: true,\n                        })\n                    }\n                    self.getAutomationStepList();\n                }).catch(error=>{\n\n                });\n            },\n            getAutomationStepList() {\n                this.listLoading = true;\n                let self = this;\n                let params={ project_id: this.$route.params.project_id,\n                    page: self.page,\n                    name: self.searchName,\n                    automation_id: this.$route.params.automation_id\n                };\n                axios.get(test+\"/api/automation/step_list\", {params:params}).then(response => {\n                    self.listLoading = false;\n                    self.stepIds=[];\n                    if (response.data.code === '999999') {\n                        self.currentType=response.data.data.automation.type;\n                        self.StepList = [];\n                        self.result.ResultList = [];\n                        self.automationForm=response.data.data.automation;\n                        self.automationForm.group=response.data.data.automation.group;\n                        response.data.data.steps.forEach((item) =>{\n                            item.result = false;\n                            self.StepList.push(item);\n                            if(response.data.data.automation.type=='list'){\n                                self.stepIds.push(item.stepId);\n                            }else if(response.data.data.automation.type=='monitor'){\n                                self.stepIds.push(item.id);\n                            }\n                        });\n                        response.data.data.results.forEach((item) =>{\n                            self.result.ResultList.push(item);\n                        });\n                        // self.ApiList = data.data.data\n                    }else {\n                        self.$message.error({\n                            message: response.data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n                });\n            },\n            getCommandList() {\n                this.listLoading = true;\n                let self = this;\n                axios.get(test+\"/api/automation/command_list\", {params:{project_id:this.$route.params.project_id,automation_id: this.$route.params.automation_id}}).then(response => {\n                    self.listLoading = false;\n                    if (response.data.code === '999999') {\n                        self.commands = {};\n                        response.data.data.data.forEach((item) =>{\n                            self.commands[item.name]=item;\n                        });\n                        // self.ApiList = data.data.data\n                    }\n                    else {\n                        self.$message.error({\n                            message: response.data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            getResult(trace) {\n                let self = this;\n                let params={ project_id: this.$route.params.project_id,\n                    automation_id: this.$route.params.automation_id,\n                    trace: trace\n                };\n                if(!self.running) {\n                  self.StepList.forEach((item, index) => {\n                    item.testtime = \"\";\n                    item.result = null;\n                    item.details = [];\n                  });\n                };\n                axios.get(test+\"/api/automation/getresult\", {params:params}).then(response => {\n                    self.getResultTimes++;\n                    if (response.data.code === '999999') {\n                        self.failIds=[]\n                        response.data.data.details.forEach((item,index) =>{\n                            self.StepList.forEach((step,stepIndex)=>{\n                                if(((item.type==\"step\"||item.type==\"automation\")&&item[\"id\"]==step[\"stepId\"])||((item.type==\"api\")&&item[\"id\"]==step[\"id\"])){\n                                  step.result=item.status;\n                                  step.testtime=item.testtime;\n                                  step.details=item.details;\n                                  step.trace=item.trace;\n                                  if(item.status==\"FAIL\"&&(item[\"type\"]==\"api\"||item[\"type\"]==\"automation\")){\n                                      self.failIds.push(item[\"id\"]);\n                                  }\n                                }\n                            })\n                        });\n                        if(response.data.data.status!=\"RUNNING\"||self.getResultTimes>100){\n                            self.getResultTimes=0;\n                            clearInterval(self.getResultTimer);\n                            self.running=false;\n                            if(self.failIds.length>0){\n                                self.failRerunShow=true;\n                            }else{\n                                self.failRerunShow=false;\n                            }\n                        }\n                    }else{\n                        self.$message.error({\n                            message: '获取失败',\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            StepTotal() {\n                this.StepListLen = this.StepList.length;\n            },\n            handleLinkApi: function () {\n                this.linkApi.visible = true;\n                this.linkApi.page=1;\n                this.getApiList();\n            },\n            getApiList(){\n                let self=this;\n                self.linkApi.loading = true;\n                let params={\n                    project_id: this.$route.params.project_id,\n                    page: self.linkApi.page,\n                    name: self.linkApi.name,\n                    exclude: JSON.stringify(self.stepIds),\n                };\n                axios.get(test+\"/api/api/api_list\", {params:params}).then(response => {\n                    self.linkApi.loading = false;\n                    if (response.data.code === '999999') {\n                        self.linkApi.list = response.data.data.data;\n                        self.linkApi.total = response.data.data.total;\n                        self.linkApi.pages = response.data.data.pages;\n                    }\n                    else {\n                        self.$message.error({\n                            message: response.data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            //取消关联\n            handleUnlinkApi: function (index, row) {\n                this.$confirm('确认取消关联接口[' + row.name + ']吗?', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    this.listLoading = true;\n                    let self = this;\n                    let params=JSON.stringify({ project_id: Number(this.$route.params.project_id), automation_id: Number(this.$route.params.automation_id),ids: [row.id] });\n                    let headers={\n                        \"Content-Type\": \"application/json\",\n                        Authorization: 'Token '+sessionStorage.getItem('token')\n                    };\n                    axios.post(test+\"/api/automation/unlink_api\", params,{headers:headers}).then(response => {\n                        self.listLoading = false;\n                        if (response.data.code === '999999') {\n                            self.$message({\n                                message: '取消关联成功',\n                                center: true,\n                                type: 'success'\n                            })\n                        } else {\n                            self.$message.error({\n                                message: response.data.msg,\n                                center: true,\n                            })\n                        }\n                        self.getAutomationStepList();\n                    }).catch(error=>{\n\n                    });\n                }).catch(() => {\n                });\n            },\n            //取消关联\n            handleUnlinkAutomation: function (index, row) {\n                this.$confirm('确认取消关联用例[' + row.name + ']吗?', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    this.listLoading = true;\n                    //NProgress.start();\n                    let self = this;\n                    let params=JSON.stringify({ project_id: Number(this.$route.params.project_id), automation_id: Number(this.$route.params.automation_id),ids: [row.stepId] });\n                    let headers={\n                        \"Content-Type\": \"application/json\",\n                        Authorization: 'Token '+sessionStorage.getItem('token')\n                    };\n                    axios.post(test+\"/api/automation/unlink_automation\", params,{headers:headers}).then(response => {\n                        self.listLoading = false;\n                        if (response.data.code === '999999') {\n                            self.$message({\n                                message: '取消关联成功',\n                                center: true,\n                                type: 'success'\n                            })\n                        } else {\n                            self.$message.error({\n                                message: response.data.msg,\n                                center: true,\n                            })\n                        }\n                        self.getAutomationStepList();\n                    }).catch(error=>{\n\n                    });\n                }).catch(() => {\n                });\n            },\n            handleChangeStatus: function(index, row) {\n                let self = this;\n                this.listLoading = true;\n                let headers = {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: 'Token '+sessionStorage.getItem('token')\n                };\n                let params = {project_id: Number(this.$route.params.project_id),id: row.id,status:!row.status,type:row.type};\n                let successMsg='禁用成功';\n                if(!row.status){\n                    successMsg='启用成功';\n                }\n                axios.post(test+\"/api/automation/stepstatus_update\", params,{headers:headers}).then(response => {\n                    self.listLoading = false;\n                    if (response.data.code === '999999') {\n                        self.$message({\n                            message: successMsg,\n                            center: true,\n                            type: 'success'\n                        })\n                        row.status = !row.status;\n                    }else {\n                        self.$message.error({\n                            message: response.data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n                });\n            },\n            linkApiSubmit: function () {\n                let ids = this.linkApi.selApis.map(item => item.id);\n                let self = this;\n                this.$confirm('确认关联选中的接口吗？', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    self.listLoading = true;\n                    //NProgress.start();\n                    let params=JSON.stringify({\n                        project_id: Number(this.$route.params.project_id),\n                        automation_id: Number(this.$route.params.automation_id),\n                        ids: ids\n                    });\n                    let headers={\n                        \"Content-Type\": \"application/json\",\n                        Authorization: 'Token '+sessionStorage.getItem('token')\n                    };\n                    axios.post(test+\"/api/automation/link_api\", params,{headers:headers}).then(response => {\n                        self.listLoading = false;\n                        if (response.data.code === '999999') {\n                            self.$message({\n                                message: '关联成功',\n                                center: true,\n                                type: 'success'\n                            })\n                        }else {\n                            self.$message.error({\n                                message: response.data.msg,\n                                center: true,\n                            })\n                        }\n                        self.linkApi.visible = false;\n                        self.getAutomationStepList()\n                    }).catch(error=>{\n                    });\n                }).catch(() => {\n\n                });\n            },\n            getAutomationList(){\n                let self=this;\n                self.linkAutomation.loading = true;\n                let params={\n                    project_id: this.$route.params.project_id,\n                    type: \"case\",\n                    page: self.linkAutomation.page,\n                    exclude: JSON.stringify(self.stepIds),\n                };\n                if(this.linkAutomation.name!=\"\"){\n                    params[\"name\"]=this.linkAutomation.name;\n                }\n                let headers={Authorization: 'Token '+sessionStorage.getItem('token')};\n                axios.get(test+\"/api/automation/automation_list\", {params:params,headers:headers}).then(response => {\n                    self.linkAutomation.loading = false;\n                    if (response.data.code === '999999') {\n                        self.linkAutomation.list = response.data.data.data;\n                        self.linkAutomation.total = response.data.data.total;\n                        self.linkAutomation.pages = response.data.data.pages;\n                    }else{\n                        self.$message.error({\n                            message: response.data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n                });\n            },\n            //显示新增界面\n            handleLinkAutomation: function () {\n                this.linkAutomation.visible = true;\n                this.linkAutomation.page = 1;\n                this.getAutomationList();\n            },\n            linkAutomationSubmit: function () {\n                let ids = this.linkAutomation.selAutomations.map(item => item.id);\n                let self = this;\n                this.$confirm('确认关联选中的用例吗？', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    self.listLoading = true;\n                    //NProgress.start();\n                    let params=JSON.stringify({\n                        project_id: Number(this.$route.params.project_id),\n                        automation_id: Number(this.$route.params.automation_id),\n                        ids: ids\n                    });\n                    let headers={\"Content-Type\": \"application/json\",Authorization: 'Token '+sessionStorage.getItem('token')};\n                    axios.post(test+\"/api/automation/link_automation\", params,{headers:headers}).then(response => {\n                        self.listLoading = false;\n                        if (response.data.code === '999999') {\n                            self.$message({\n                                message: '关联成功',\n                                center: true,\n                                type: 'success'\n                            })\n                        }\n                        else {\n                            self.$message.error({\n                                message: response.data.msg,\n                                center: true,\n                            })\n                        }\n                        self.linkAutomation.visible = false;\n                        self.getAutomationStepList()\n                    }).catch(error=>{\n                    });\n                }).catch(() => {\n\n                });\n            },\n            RunAutomation(ids) {\n                if (this.env) {\n                    let self = this;\n                    let data={\n                            project_id: Number(this.$route.params.project_id),\n                            automation_id: Number(this.$route.params.automation_id),\n                            params: this.automationForm.params,\n                            env: this.env,\n                            data: this.data,\n                    };\n                    if(ids&&ids.length>0){\n                        data[\"ids\"]=ids;\n                    }\n                    let header = {\n                                \"Content-Type\": \"application/json\",\n                                Authorization: 'Token '+sessionStorage.getItem('token')\n                            };\n                    runAutomation(header,data).then(data => {\n                        if (data.code === '999999') {\n                            self.$message({\n                                message: '开始执行',\n                                center: true,\n                                type: \"success\",\n                            }),\n                            self.StepList.forEach((item,index) =>{\n                                item.testtime=\"\";\n                                item.result=null;\n                                item.details=[];\n                            });\n                            self.result.ResultList.splice(0,0,{\"testTime\":data.data.testtime,\"trace\":data.data.trace,\"result\":data.data.status});\n                            if(data.data.status==\"RUNNING\"){\n                                self.running=true;\n                                self.getResultTimes=0;\n                                self.getResultTimer = setInterval(() =>{\n//                                        self.getAutomationStepList();\n                                    self.getResult(data.data.trace);\n                                }, 3000);\n                            }\n                        }else {\n                            self.$message.error({\n                                message: data.msg,\n                                center: true,\n                            })\n                        }\n                    });\n                } else {\n                    this.$message({\n                        message: '请选择测试环境',\n                        center: true,\n                        type: 'warning'\n                    })\n                }\n            },\n            handleDel(index, row){\n                this.$confirm('确认删除步骤[' + row.name + ']吗?', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    this.listLoading = true;\n                    let self = this;\n                    let params=JSON.stringify({\n                            project_id: Number(this.$route.params.project_id),\n                            automation_id: Number(this.$route.params.automation_id),\n                            ids: [{\"order\":index+1,\"id\":row.stepId}] });\n                    let headers={\"Content-Type\": \"application/json\",Authorization: 'Token '+sessionStorage.getItem('token')};\n                    axios.post(test+\"/api/automation/del_step\", params,{headers:headers}).then(response => {\n                        self.listLoading = false;\n                        if (response.data.code === '999999') {\n                            self.$message({\n                                message: '删除成功',\n                                center: true,\n                                type: 'success'\n                            })\n                        } else {\n                            self.$message.error({\n                                message: response.data.msg,\n                                center: true,\n                            })\n                        }\n                        self.getAutomationStepList();\n                    }).catch(error=>{\n                    });\n                }).catch(() => {\n                });\n            },\n            resultShow(row) {\n                this.AutomationResult=true;\n                this.StepResultDetails=row.details;\n                this.StepResultName=row.name;\n            },\n            handleCurrentChangeStep(val) {\n                this.reuseSteps.page = val;\n                this.getReuseStepList();\n            },\n            handleCurrentChangeAutomation(val) {\n                this.linkAutomation.page = val;\n                this.getAutomationList();\n            },\n            handleCurrentChangeApi(val) {\n                this.linkApi.page = val;\n                this.getApiList();\n            },\n            selStepsChange(sels){\n                this.reuseSteps.selSteps = sels;\n            },\n            selApisChange(sels){\n                this.linkApi.selApis = sels;\n            },\n            selAutomationsChange(sels){\n                this.linkAutomation.selAutomations = sels;\n            },\n            addReuseSteps: function () {\n                let ids = this.reuseSteps.selSteps.map(item => item.id);\n                let self = this;\n                this.$confirm('确认添加选中的步骤吗？', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    self.listLoading = true;\n                    let params=JSON.stringify({\n                        project_id: Number(this.$route.params.project_id),\n                        automation_id: Number(this.$route.params.automation_id),\n                        ids: ids\n                    });\n                    let headers={\"Content-Type\": \"application/json\",Authorization: 'Token '+sessionStorage.getItem('token')};\n                    axios.post(test+\"/api/automation/add_reuse_steps\", params,{headers:headers}).then(response => {\n                        self.listLoading = false;\n                        if (response.data.code === '999999') {\n                            self.$message({\n                                message: '添加成功',\n                                center: true,\n                                type: 'success'\n                            })\n                        }\n                        else {\n                            self.$message.error({\n                                message: response.data.msg,\n                                center: true,\n                            })\n                        }\n                        self.reuseSteps.visible = false;\n                        self.getAutomationStepList();\n                    }).catch(error=>{\n                    });\n                }).catch(() => {\n\n                });\n            },\n            getEnv() {\n                let self = this;\n                let headers = {\n                    Authorization: 'Token '+sessionStorage.getItem('token')\n                };\n                getProjectConfig(headers, {project_id: self.$route.params.project_id,page: self.page, name: \"\", type: \"env\"}).then(data => {\n                    if (data.code === '999999') {\n                        self.EnvList=[];\n                        data.data.data.forEach((item) => {\n                            if (item.status) {\n                                self.EnvList.push(item);\n                            }\n                        })\n                    }else {\n                        self.$message.error({\n                            message: data.msg,\n                            center: true,\n                        })\n                    }\n                });\n            },\n            getData() {\n                let self = this;\n                let headers = {\n                    Authorization: 'Token '+sessionStorage.getItem('token')\n                };\n                getProjectConfig(headers, {project_id: this.$route.params.project_id,page: self.page, name: \"\", type: \"data\"}).then(data => {\n                    if (data.code === '999999') {\n                        self.DataList=[];\n                        data.data.data.forEach((item) => {\n                            if (item.status) {\n                                self.DataList.push(item);\n                            }\n                        })\n                    }else {\n                        self.$message.error({\n                            message: data.msg,\n                            center: true,\n                        })\n                    }\n                });\n            },\n            //显示编辑界面\n            handleEdit: function (index, row) {\n                this.editFormVisible = true;\n                if(this.pageType=='update'){\n                    this.editFormTitle = \"修改步骤\";\n                }else{\n                    this.editFormTitle = \"查看步骤\";\n                }\n                this.editForm = {\"id\":row.stepId,\"name\":row.name,\"type\":row.type,\"params\":row.params,\"steps\":JSON.parse(row.steps),\"description\":row.description};\n                this.editForm.order = index+1;\n            },\n            actiontableshow: function(){\n                const _this = this;\n                let tbody = document.querySelector('.actiontable .el-table__body-wrapper tbody');\n                if(tbody!=null){\n                    Sortable.create(tbody, {\n                      onEnd({ newIndex, oldIndex }) {\n                        const currRow = _this.editForm.steps.splice(oldIndex, 1)[0];\n                        _this.editForm.steps.splice(newIndex, 0, currRow);\n                      }\n                    });\n                }\n            },\n            handleCopy: function (index, row) {\n                this.editFormVisible = true;\n                this.editFormTitle = \"复制步骤\";\n                this.editForm = {\"name\":row.name,\"type\":row.type,\"params\":row.params,\"steps\":JSON.parse(row.steps),\"description\":row.description};\n                this.editForm.order = this.StepList.length+1;\n            },\n            //显示新增界面\n            handleAdd: function () {\n                this.editFormVisible = true;\n                this.editFormTitle = \"添加步骤\";\n                this.editForm=this.addForm;\n                this.editForm.order=this.StepList.length+1;\n            },\n            //显示新增界面\n            handleAddReuse: function () {\n                this.reuseSteps.visible = true;\n                this.reuseSteps.page=1;\n                this.getReuseStepList();\n            },\n            getReuseStepList() {\n                let self=this;\n                let params={project_id: this.$route.params.project_id,page: self.reuseSteps.page};\n                let headers={Authorization:'Token '+sessionStorage.getItem('token')};\n                self.reuseSteps.loading = true;\n                axios.get(test+\"/api/automation/step_list\", {params:params,headers:headers}).then(response => {\n                    self.reuseSteps.loading = false;\n                    if (response.data.code === '999999') {\n                        self.reuseSteps.list = response.data.data.data;\n                        self.reuseSteps.total = response.data.data.total;\n                        self.reuseSteps.pages = response.data.data.pages;\n                    }\n                    else {\n                        self.$message.error({\n                            message: response.data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n                });\n            },\n            // 修改用例\n            editSubmit: function () {\n                if(this.editForm.id==null){\n                    this.addSubmit();\n                }else{\n                    let self = this;\n                    let steps=this.editForm.steps;\n                    if(steps.length==1&&steps[0][\"name\"]==\"\"){\n                        steps=[];\n                    }\n                    this.$refs.editForm.validate((valid) => {\n                        if (valid) {\n                            this.$confirm('确认提交吗？', '提示', {}).then(() => {\n                                self.editLoading = true;\n                                //NProgress.start();\n                                let params = JSON.stringify({\n                                    project_id: Number(this.$route.params.project_id),\n                                    automation_id: Number(this.$route.params.automation_id),\n                                    id: Number(self.editForm.id),\n                                    type: self.editForm.type,\n                                    name: self.editForm.name,\n                                    params: self.editForm.params,\n                                    steps: JSON.stringify(steps),\n                                    description: self.editForm.description,\n                                    order: self.editForm.order\n                                });\n                                let headers={\"Content-Type\": \"application/json\",Authorization: 'Token '+sessionStorage.getItem('token')};\n                                axios.post(test+\"/api/automation/update_step\", params,{headers:headers}).then(response => {\n                                    self.editLoading = false;\n                                    if (response.data.code === '999999') {\n                                        self.$message({\n                                            message: '修改成功',\n                                            center: true,\n                                            type: 'success'\n                                        });\n                                        self.$refs['editForm'].resetFields();\n                                        self.editFormVisible = false;\n                                        self.getAutomationStepList()\n                                    } else if (response.data.code === '999997'){\n                                        self.$message.error({\n                                            message: response.data.msg,\n                                            center: true,\n                                        })\n                                    } else {\n                                        self.$message.error({\n                                            message: response.data.msg,\n                                            center: true,\n                                        })\n                                    }\n                                }).catch(error=>{\n                                });\n                            }).catch(() => {});\n                        }\n                  });\n                }\n            },\n            //新增用例\n            addSubmit: function () {\n                this.$refs.editForm.validate((valid) => {\n                    if (valid) {\n                        let self = this;\n                        let steps=this.editForm.steps;\n                        if(steps.length==1&&steps[0][\"name\"]==\"\"){\n                            steps=[];\n                        }\n                        this.$confirm('确认提交吗？', '提示', {}).then(() => {\n                            self.editLoading = true;\n                            //NProgress.start();\n                            let params = JSON.stringify({\n                                project_id: Number(this.$route.params.project_id),\n                                type: this.editForm.type,\n                                automation_id: Number(this.$route.params.automation_id),\n                                name: self.editForm.name,\n                                params: self.editForm.params,\n                                steps: JSON.stringify(steps),\n                                description: self.editForm.description,\n                                order: self.editForm.order\n                            });\n                            let headers={\"Content-Type\": \"application/json\",Authorization: 'Token '+sessionStorage.getItem('token')};\n                            axios.post(test+\"/api/automation/add_step\", params,{headers:headers}).then(response => {\n                                self.editLoading = false;\n                                if (response.data.code === '999999') {\n                                    self.$message({\n                                        message: '添加成功',\n                                        center: true,\n                                        type: 'success'\n                                    });\n                                    self.$refs['editForm'].resetFields();\n                                    self.editFormVisible = false;\n                                    self.getAutomationStepList()\n                                } else if (response.data.code === '999997'){\n                                    self.$message.error({\n                                        message: response.data.msg,\n                                        center: true,\n                                    })\n                                } else {\n                                    self.$message.error({\n                                        message: response.data.msg,\n                                        center: true,\n                                    });\n                                    self.$refs['editForm'].resetFields();\n                                    self.editFormVisible = false;\n                                    self.getAutomationStepList()\n                                }\n                            }).catch(error=>{\n                            });\n                        }).catch(() => {});\n                    }\n                });\n            },\n            // 修改用例\n            updateAutomation: function () {\n                let self = this;\n                this.$refs.automationForm.validate((valid) => {\n                    if (valid) {\n//                        this.$confirm('确认保存吗？', '提示', {}).then(() => {\n                            let orders=[];\n                            this.StepList.forEach((item) => {\n                                orders.push(item[\"id\"]);\n                            })\n                            let params = JSON.stringify({\n                                project_id: Number(this.$route.params.project_id),\n                                id: Number(self.automationForm.id),\n                                type: self.automationForm.type,\n                                name: self.automationForm.name,\n                                params: self.automationForm.params,\n                                group_id: Number(this.automationForm.group),\n                                description: self.automationForm.description,\n                                orders:orders\n                            });\n                            let headers={\"Content-Type\": \"application/json\",Authorization: 'Token '+sessionStorage.getItem('token')};\n                            axios.post(test+\"/api/automation/update_automation\", params,{headers:headers}).then(response => {\n                                if (response.data.code === '999999') {\n                                    self.$message({\n                                        message: '保存成功',\n                                        center: true,\n                                        type: 'success'\n                                    });\n                                } else {\n                                    self.$message.error({\n                                        message: response.data.msg,\n                                        center: true,\n                                    })\n                                }\n                            }).catch(error=>{\n                            });\n//                        }).catch(() => {});\n                    }\n                });\n            },\n            addCommand(index) {\n                this.editForm.steps.splice(index+1,0,{\"type\":\"\",\"name\":\"\",\"actionId\":0,\"params\":\"{}\",\"description\":\"\",\"disable\":\"False\"})\n            },\n            delCommand(index) {\n                this.editForm.steps.splice(index, 1);\n            },\n            changeCommand(index) {\n                let command=this.commands[this.editForm.steps[index].name];\n                this.editForm.steps[index].name=command.name;\n                this.editForm.steps[index].type=command.type;\n                this.editForm.steps[index].actionId=command.actionId;\n                this.editForm.steps[index].params=command.value;\n                this.editForm.steps[index].description=command.desc;\n            },\n            rowDrop() {\n                try{\n                    const tbody = document.querySelector('.steptable .el-table__body-wrapper tbody');\n                    const _this = this;\n                    Sortable.create(tbody, {\n                      onEnd({ newIndex, oldIndex }) {\n                        const currRow = _this.StepList.splice(oldIndex, 1)[0];\n                        _this.StepList.splice(newIndex, 0, currRow);\n                      }\n                    });\n                }catch(err){\n                    alert(err);\n                }\n            },\n            updateOrder(){\n                if(this.pageType=='update')this.rowDrop();\n                this.updateOrderStatus=true;\n            },\n            init(){\n                this.pageType=this.$route.params.type;\n                this.getAutomationGroupAndInfo();\n                if(this.pageType=='update'){\n                    this.getCommandList();\n                }else{\n                    this.getEnv();\n                    this.getData();\n                }\n            },\n        },\n        mounted() {\n            this.init();\n        },\n        watch: {\n            '$route' (to, from) { //监听路由是否变化\n              if(to.query!= from.query){\n                  this.reload();\n                  if(this.pageType=='update')this.rowDrop();\n//                 this.$router.go(0)\n              }\n            }\n        },\n    }\n",null]}