{"remainingRequest":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/huangrong/workspace/apitest/apitest-web/src/views/project/api/apiRequest.vue?vue&type=style&index=1&lang=scss&","dependencies":[{"path":"/Users/huangrong/workspace/apitest/apitest-web/src/views/project/api/apiRequest.vue","mtime":1588927573598},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.selectInput{\n    input{\n        border-right: 0px;\n        border-radius: 4px 0px 0px 4px;\n    }\n}\n",{"version":3,"sources":["apiRequest.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyVA;AACA;AACA;AACA;AACA;AACA","file":"apiRequest.vue","sourceRoot":"src/views/project/api","sourcesContent":["<template>\n    <section>\n        <el-form :model=\"form\" ref=\"form\" :rules=\"formRules\">\n            <el-row :span=\"24\">\n                <el-collapse v-model=\"activeNames\">\n                    <el-collapse-item title=\"请求头部\" name=\"1\">\n                        <el-table :data=\"head\" highlight-current-row @selection-change=\"selsChangeHead\" ref=\"multipleHeadTable\">\n                            <el-table-column type=\"selection\" min-width=\"5%\" label=\"头部\">\n                            </el-table-column>\n                            <el-table-column prop=\"name\" label=\"参数名\" min-width=\"20%\">\n                                <template slot-scope=\"scope\">\n                                    <el-select placeholder=\"head标签\" filterable v-model=\"scope.row.name\">\n                                        <el-option v-for=\"(item,index) in header\" :key=\"index+''\" :label=\"item.label\" :value=\"item.value\"></el-option>\n                                    </el-select>\n                                    <el-input class=\"selectInput\" v-model.trim=\"scope.row.name\" :value=\"scope.row.name\" placeholder=\"请输入内容\"></el-input>\n                                </template>\n                            </el-table-column>\n                            <el-table-column prop=\"value\" label=\"参数值\" min-width=\"40%\">\n                                <template slot-scope=\"scope\">\n                                    <el-input v-model.trim=\"scope.row.value\" :value=\"scope.row.value\" placeholder=\"请输入内容\"></el-input>\n                                </template>\n                            </el-table-column>\n                            <el-table-column label=\"操作\" min-width=\"15%\">\n                                <template slot-scope=\"scope\">\n                                    <el-button class=\"el-icon-delete\" size=\"mini\" @click=\"delHead(scope.$index)\"></el-button>\n                                    <el-button v-if=\"scope.$index===(head.length-1)\" size=\"mini\" class=\"el-icon-plus\" @click=\"addEmptyHead\"></el-button>\n                                </template>\n                            </el-table-column>\n                        </el-table>\n                    </el-collapse-item>\n                    <el-collapse-item title=\"请求参数\" name=\"2\">\n                        <div style=\"margin: 5px\">\n                            <el-row :span=\"24\">\n                                <el-col :span=\"4\"><el-radio v-model=\"requestParameterType\" label=\"application/x-www-form-urlencoded\">表单</el-radio></el-col>\n                                <el-col :span=\"4\"><el-radio v-model=\"requestParameterType\" label=\"application/json\">JSON</el-radio></el-col>\n                                <el-col :span=\"4\"><el-radio v-model=\"requestParameterType\" label=\"raw\">JSON源数据</el-radio><el-button v-show=\"form.type==='jyb'\" type=\"primary\" size=\"mini\" @click=\"jybDecodePost\">解密</el-button></el-col>\n                                <!--<el-col v-if=\"request3\" :span=\"4\"><el-radio v-model=\"requestParameterType\" label=\"text/plain\">Text</el-radio></el-col>-->\n                                <!--<el-col v-if=\"request3\" :span=\"8\"><el-checkbox v-model=\"radioType\" label=\"3\" v-show=\"ParameterType\">表单转源数据</el-checkbox></el-col>-->\n                            </el-row>\n                        </div>\n                        <el-table :data=\"parameter\" highlight-current-row :class=\"ParameterType? 'parameter-a': 'parameter-b'\" @selection-change=\"selsChangeParameter\" ref=\"multipleParameterTable\">\n                            <el-table-column type=\"selection\" min-width=\"5%\" label=\"头部\">\n                            </el-table-column>\n                            <el-table-column prop=\"name\" label=\"参数名\" min-width=\"20%\">\n                                <template slot-scope=\"scope\">\n                                    <el-input v-model.trim=\"scope.row.name\" :value=\"scope.row.name\" placeholder=\"请输入参数值\"></el-input>\n                                </template>\n                            </el-table-column>\n                            <el-table-column prop=\"value\" label=\"参数值\" min-width=\"40%\">\n                                <template slot-scope=\"scope\">\n                                    <el-input type=\"textarea\" :rows=\"1\" v-model.trim=\"scope.row.value\" :value=\"scope.row.value\" placeholder=\"请输入参数值\"></el-input>\n                                </template>\n                            </el-table-column>\n                            <el-table-column label=\"操作\" min-width=\"15%\">\n                                <template slot-scope=\"scope\">\n                                    <el-button class=\"el-icon-delete\" size=\"mini\" @click=\"delParameter(scope.$index)\"></el-button>\n                                    <el-button v-if=\"scope.$index===(parameter.length-1)\" size=\"mini\" class=\"el-icon-plus\" @click=\"addEmptyParameter\"></el-button>\n                                </template>\n                            </el-table-column>\n                        </el-table>\n                        <template>\n                            <el-input :class=\"ParameterType? 'parameter-b': 'parameter-a'\" type=\"textarea\" :rows=\"5\" placeholder=\"请输入内容\" v-model.trim=\"parameterRaw\"></el-input>\n                        </template>\n                    </el-collapse-item>\n                </el-collapse>\n            </el-row>\n        </el-form>\n    </section>\n</template>\n<script>\n    import $ from 'jquery';\n    import { test } from '@/api/api'\n    import axios from 'axios';\n    export default {\n        name: 'ApiRequest',\n        data() {\n            return {\n                paramType: [{value: 'Int', label: 'Int'},\n                    {value: 'String', label: 'String'},\n                    {value: 'Object', label: 'Object'},\n                    {value: 'Array', label: 'Array'}],\n                loadingSend: false,\n                header: [{value: 'Accept', label: 'Accept'},\n                    {value: 'Accept-Charset', label: 'Accept-Charset'},\n                    {value: 'Accept-Encoding', label: 'Accept-Encoding'},\n                    {value: 'Accept-Language', label: 'Accept-Language'},\n                    {value: 'Accept-Ranges', label: 'Accept-Ranges'},\n                    {value: 'Authorization', label: 'Authorization'},\n                    {value: 'Cache-Control', label: 'Cache-Control'},\n                    {value: 'Connection', label: 'Connection'},\n                    {value: 'Cookie', label: 'Cookie'},\n                    {value: 'Content-Length', label: 'Content-Length'},\n                    {value: 'Content-Type', label: 'Content-Type'},\n                    {value: 'Content-MD5', label: 'Content-MD5'},\n                    {value: 'Date', label: 'Date'},\n                    {value: 'Expect', label: 'Expect'},\n                    {value: 'From', label: 'From'},\n                    {value: 'Host', label: 'Host'},\n                    {value: 'If-Match', label: 'If-Match'},\n                    {value: 'If-Modified-Since', label: 'If-Modified-Since'},\n                    {value: 'If-None-Match', label: 'If-None-Match'},\n                    {value: 'If-Range', label: 'If-Range'},\n                    {value: 'If-Unmodified-Since', label: 'If-Unmodified-Since'},\n                    {value: 'Max-Forwards', label: 'Max-Forwards'},\n                    {value: 'Origin', label: 'Origin'},\n                    {value: 'Pragma', label: 'Pragma'},\n                    {value: 'Proxy-Authorization', label: 'Proxy-Authorization'},\n                    {value: 'Range', label: 'Range'},\n                    {value: 'Referer', label: 'Referer'},\n                    {value: 'TE', label: 'TE'},\n                    {value: 'Upgrade', label: 'Upgrade'},\n                    {value: 'User-Agent', label: 'User-Agent'},\n                    {value: 'Via', label: 'Via'},\n                    {value: 'Warning', label: 'Warning'}],\n                requestParameterType: \"application/json\",\n                ParameterType: true,\n                radioType: \"\",\n                result: true,\n                activeNames: ['2', '3', '4', '5'],\n                id: \"\",\n                head: [],\n                parameter: [],\n                parameterRaw: \"\",\n                formRules: {\n                },\n                listLoading: false,\n                headers: \"\",\n                parameters: \"\",\n                format: false,\n                form: {\n                    type: \"http\",\n                    addr: \"\"\n                }\n            }\n        },\n        methods: {\n            toggleHeadSelection(rows) {\n                rows.forEach(row => {\n                    this.$refs.multipleHeadTable.toggleRowSelection(row, true);\n                });\n            },\n            toggleParameterSelection(rows) {\n                rows.forEach(row => {\n                    this.$refs.multipleParameterTable.toggleRowSelection(row, true);\n                });\n            },\n            selsChangeParameter: function (sels) {\n                this.parameters = sels;\n            },\n            selsChangeHead: function (sels) {\n                this.headers = sels;\n            },\n            addEmptyHead() {\n                let head = {name: \"\", value: \"\"};\n                this.addHead(head);\n            },\n            addHead(head) {\n                this.head.push(head);\n                let rows = [this.head[this.head.length-1]];\n                this.toggleHeadSelection(rows)\n            },\n            delHead(index) {\n                if (this.head.length !== 1) {\n                    this.head.splice(index, 1)\n                }\n            },\n            addEmptyParameter(){\n                let parameter = {name: \"\", value: \"\", required:\"True\", restrict: \"\", description: \"\"};\n                this.addParameter(parameter);\n            },\n            addParameter(parameter) {\n                this.parameter.push(parameter);\n                let rows = [this.parameter[this.parameter.length-1]];\n                this.toggleParameterSelection(rows)\n            },\n            delParameter(index) {\n                if (this.parameter.length !== 1) {\n                    this.parameter.splice(index, 1)\n                }\n            },\n            getDataType(value){\n                let type=\"String\";\n                try{\n                    if(value instanceof Array){\n                        type = 'Array';\n                    }else if(value instanceof Object){\n                        type = 'Object';\n                    }else if(typeof(value)=='number'){\n                        type = 'Int';\n                    }\n                }catch(Exception){}\n                return type;\n            },\n            getParameters(){\n                let parameters={}\n                if ( this.requestParameterType === 'application/x-www-form-urlencoded'||this.requestParameterType === 'application/json'||this.requestParameterType === 'text/plain') {\n                    for (let i = 0; i < this.parameters.length; i++) {\n                        var a = this.parameters[i][\"name\"];\n                        if (a) {\n                            let parameterType=this.getDataType(this.parameters[i][\"value\"]);\n                            if(parameterType==\"Object\"||parameterType==\"Array\"){\n                                parameters[a] = JSON.parse(this.parameters[i][\"value\"]);\n                            }else{\n                                parameters[a] = this.parameters[i][\"value\"];\n                            }\n                        }\n                    }\n                } else {\n                    parameters = this.parameterRaw;\n                }\n                return parameters;\n            },\n            changeParameterType() {\n                if (this.requestParameterType === 'application/json') {\n                    this.ParameterType = true;\n                    if(this.parameterRaw!=\"\"&&(this.parameters==\"\"||(this.parameters.length==1&&this.parameters[0][\"name\"]==\"\"))){\n                        try{\n                            let self=this;\n                            this.parameter.splice(0);\n                            let json=JSON.parse(this.parameterRaw);\n                            $.each(json, function (name, value) {\n                                if(typeof(value)!='string'){\n                                    value=JSON.stringify(value);\n                                }\n                                let parameter = {name: name, value: value, required:\"True\", restrict: \"\", description: \"\"};\n                                self.addParameter(parameter);\n                            });\n                        }catch(e){\n                            console.log(e);\n                        }\n                    }\n                } else if (this.requestParameterType === 'application/x-www-form-urlencoded'||this.requestParameterType === 'text/plain') {\n                    this.ParameterType = true;\n                } else if (this.requestParameterType === 'raw'){\n                    this.ParameterType = false;\n                    if(this.parameters!=\"\"&&this.parameterRaw==\"\"){\n                        try{\n                            let parameters={};\n                            for (let i = 0; i < this.parameters.length; i++) {\n                                var a = this.parameters[i][\"name\"];\n                                if (a) {\n                                    let parameterType=this.getDataType(this.parameters[i][\"value\"]);\n                                    if(parameterType==\"Object\"||parameterType==\"Array\"){\n                                        parameters[a] = JSON.parse(this.parameters[i][\"value\"]);\n                                    }else{\n                                        parameters[a] = this.parameters[i][\"value\"];\n                                    }\n                                }\n                            }\n                            this.parameterRaw=JSON.stringify(parameters);\n                        }catch(e){\n                            console.log(e);\n                        }\n                    }\n                }\n            },\n            jybDecodePost() {\n                var encodePost=this.parameterRaw.trim();\n                if(encodePost==\"\")return;\n                var apiUrl=this.form.addr.trim();\n                var pos=0;\n                var reg = new RegExp(\"(^|&)_pos=([^&]*)(&|$)\", \"i\");\n                var r = apiUrl.match(reg);\n                if (r != null) {\n                    pos=unescape(r[2]);\n                }\n                var version=\"\";\n                reg = new RegExp(\"(^|&)ver=([^&]*)(&|$)\", \"i\");\n                r = apiUrl.match(reg);\n                if (r != null) {\n                    version=unescape(r[2]);\n                }\n                let params = {\n                    pos: pos,\n                    post:encodePost,\n                    version:version\n                };\n                let headers = {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: 'Token '+sessionStorage.getItem('token')\n                };\n                let self=this;\n                axios.post(test + '/api/api/jybdecode', params,{headers:headers}).then(res => {\n                    let {msg, code, data} = res.data;\n                    if (code === '999999') {\n                        self.parameterRaw=JSON.stringify(data);\n                    }else {\n                        self.$message.error({\n                            message: msg,\n                            center: true,\n                        })\n                    }\n                })\n            },\n        },\n        watch: {\n            requestParameterType() {\n                this.changeParameterType()\n            }\n        },\n        mounted() {\n            this.toggleHeadSelection(this.head);\n            this.toggleParameterSelection(this.parameter);\n        }\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n    .return-list {\n        margin-top: 0px;\n        margin-bottom: 10px;\n        border-radius: 25px;\n    }\n    .head-class {\n        font-size: 17px\n    }\n    .parameter-a {\n        display: block;\n    }\n    .parameter-b {\n        display: none;\n    }\n    .selectInput {\n        position: absolute;\n        /*margin-left: 7px;*/\n        padding-left: 9px;\n        width: 180px;\n        /*border-radius:0px;*/\n        /*height: 38px;*/\n        left: 1px;\n        border-right: 0px;\n    }\n    .HOST {\n        position: absolute;\n        right: 30px;\n        top: 0px;\n    }\n    .raw {\n        border: 1px solid #e6e6e6;\n        margin-bottom: 10px;\n        padding:15px;\n        text-align: center\n    }\n</style>\n<style lang=\"scss\">\n    .selectInput{\n        input{\n            border-right: 0px;\n            border-radius: 4px 0px 0px 4px;\n        }\n    }\n</style>\n"]}]}