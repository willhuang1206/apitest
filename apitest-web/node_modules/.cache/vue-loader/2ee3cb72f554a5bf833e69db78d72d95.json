{"remainingRequest":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/huangrong/workspace/apitest/apitest-web/src/views/project/api/apiList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/huangrong/workspace/apitest/apitest-web/src/views/project/api/apiList.vue","mtime":1590476789715},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n//    import SelectTree from \"../../../components/treeSelect.vue\";\n    import Treeselect from '@riophae/vue-treeselect'\n    import '@riophae/vue-treeselect/dist/vue-treeselect.css'\n    import { test } from '../../../api/api'\n    import axios from 'axios'\n    export default {\n        components: {\n//          SelectTree,\n          Treeselect,\n        },\n        data() {\n            return {\n                filters: {\n                    name: '',\n                    type: '',\n                },\n                type: [{value: '', label: ''},\n                    {value: 'http', label: '普通http'},\n                    {value: 'jyb', label: '加油宝app'},\n                    {value: 'service', label: '微服务'}],\n                api: [],\n                total: 0,\n                page: 1,\n                pages: 0,\n                page_size:20,\n                listLoading: false,\n                sels: [],//列表选中列\n                updateGroupFormVisible: false,\n                updateGroupForm: {\n                    firstGroup: null,\n                },\n                updateGroupFormRules: {\n                    firstGroup : [{ type: 'number', required: true, message: '请选择分组', trigger: 'blur'}],\n                },\n                group: [],\n                updateGroupLoading: false,\n                update: true,\n                loadSwaggerApi: false,\n                addLoading: false,\n                //新增界面数据\n                swaggerUrl: \"\",\n                updatePublishForm: {\n                    visible: false,\n                    loading: false,\n                    publish: \"\",\n                    publishlist: [\"加油宝\",\"资产系统\"],\n                    rules: {\n                        publish : [{ type: 'string', required: true, message: '请选择发布项目', trigger: 'blur'}],\n                    },\n                },\n                importApi:{\n                    type: \"auto\",\n                    types: [{value: 'auto', label: 'auto'},\n                      {value: 'mock.fe', label: 'mock.fe'}],\n                    visible: false,\n                    loading: false,\n                    rules: {\n                        fromGroup : [{ type: 'string', required: true, message: '请选择源分组', trigger: 'blur'}],\n                        toGroup : [{ type: 'string', required: true, message: '请选择导入分组', trigger: 'blur'}],\n                    },\n                    value: null,\n                    fromGroup: null,\n                    toGroup: null,\n                    fromDate: \"\",\n                    toDate: \"\",\n                    groups: [],\n                    fileName: \"\",\n                },\n                uploadActionUrl: test + \"/api/imports/uploadfile\",\n                fileList: []\n            }\n        },\n        methods: {\n            handleUploadSuccess(res, file) {\n              this.importApi.fileName=file.name;\n            },\n            // 修改mock状态\n            checkMockStatus(row){\n                let self = this;\n                let param = JSON.stringify({\n                    project_id:Number(this.$route.params.project_id),\n                    id:Number(row.id)\n                });\n                axios.post(test+\"/api/api/updateMock\", param, {headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                    let data=response.data;\n                    self.listLoading = false;\n                    if (data.code === '999999') {\n                        self.$message.success({\n                            message: data.msg,\n                            center: true,\n                        });\n                        self.getApiList();\n                    }\n                    else {\n                        self.$message.error({\n                            message: data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n\t\t\t      },\n            handleSearch(){\n                this.page=1;\n                this.getApiList();\n            },\n            // 获取接口列表\n            getApiList() {\n                this.listLoading = true;\n                let self = this;\n                sessionStorage.setItem(\"api_name\",self.filters.name);\n                sessionStorage.setItem(\"api_type\",self.filters.type);\n                let param = { project_id: this.$route.params.project_id, page: self.page, name: self.filters.name,type: self.filters.type};\n                if (this.$route.params.firstGroup) {\n                    param['apiGroupLevelFirst_id'] = this.$route.params.firstGroup;\n                }\n                axios.get(test+\"/api/api/api_list\", {params:param,headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                    let data=response.data;\n                    self.listLoading = false;\n                    if (data.code === '999999') {\n                        self.total = data.data.total;\n                        self.pages=data.data.pages;\n                        self.page_size=data.data.page_size;\n                        self.api = data.data.data\n                    }\n                    else {\n                        self.$message.error({\n                            message: data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            // 获取接口列表\n            getDevApiGroupList() {\n                this.importApi.loading = true;\n                let self = this;\n                let param = {};\n                let url=test+\"/api/imports/apidomainlist\";\n                if(self.importApi.type==\"mock.fe\"){\n                    url=test+\"/api/imports/devapi_grouplist\";\n                }\n                axios.get(url, {params:param,headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                    let data=response.data;\n                    self.importApi.loading = false;\n                    if (data.code === '999999') {\n                        self.importApi.groups = data.data;\n                    }\n                    else {\n                        self.$message.error({\n                            message: data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            // 修改接口所属分组\n            importApiSubmit() {\n                let self = this;\n                this.$confirm('确认导入接口吗？', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    this.importApi.loading = true;\n                    //NProgress.start();\n                    let params = JSON.stringify({\n                        project_id:Number(this.$route.params.project_id),\n                        group_id: this.importApi.toGroup,\n                        fileName: this.importApi.fileName,\n                    });\n                    let url=test+\"/api/imports/api_importfrompostman\";\n                    axios.post(url, params,{headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                        let data=response.data;\n                        self.importApi.loading = false;\n                        if (data.code === '999999') {\n                            self.$message({\n                                message: data.msg,\n                                center: true,\n                                type: 'success'\n                            });\n                        }\n                        else {\n                            self.$message.error({\n                                message: data.msg,\n                                center: true,\n                            })\n                        }\n                        self.importApi.visible = false;\n                        self.getApiList();\n                    }).catch(error=>{\n\n                    });\n                }).catch(() => {\n\n                });\n            },\n            // 修改接口所属分组\n            updateGroupSubmit() {\n                let ids = this.sels.map(item => item.id);\n                let self = this;\n                this.$confirm('确认修改所属分组吗？', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    self.updateGroupLoading = true;\n                    //NProgress.start();\n                    let params = JSON.stringify({\n                        project_id:Number(this.$route.params.project_id),\n                        apiGroupLevelFirst_id: Number(self.updateGroupForm.firstGroup),\n                        ids: ids,\n                    });\n                    axios.post(test+\"/api/api/update_group\", params,{headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                        let data=response.data;\n                        self.updateGroupLoading = false;\n                        if (data.code === '999999') {\n                            self.$message({\n                                message: '修改成功',\n                                center: true,\n                                type: 'success'\n                            });\n                            self.$router.push({ name: '分组接口列表', params: { project_id: self.$route.params.project_id, firstGroup: self.updateGroupForm.firstGroup}});\n                        }\n                        else {\n                            self.$message.error({\n                                message: data.msg,\n                                center: true,\n                            })\n                        }\n                        self.updateGroupFormVisible = false;\n                        self.getApiList();\n                    }).catch(error=>{\n\n                    });\n                }).catch(() => {\n\n                });\n            },\n            // 修改接口所属发布项目\n            updatePublishSubmit() {\n                let ids = this.sels.map(item => item.id);\n                let self = this;\n                this.$confirm('确认修改发布项目吗？', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    self.updatePublishForm.loading = true;\n                    //NProgress.start();\n                    let params = JSON.stringify({\n                        project_id:Number(this.$route.params.project_id),\n                        publish: self.updatePublishForm.publish,\n                        ids: ids,\n                    });\n                    axios.post(test+\"/api/api/update_publish\", params,{headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                        let data=response.data;\n                        self.updatePublishForm.loading = false;\n                        if (data.code === '999999') {\n                            self.$message({\n                                message: '修改成功',\n                                center: true,\n                                type: 'success'\n                            });\n//\t\t\t\t\t\t\t\t                self.$router.push({ name: '分组接口列表', params: { project_id: self.$route.params.project_id, firstGroup: self.updateGroupForm.firstGroup}});\n                        }\n                        else {\n                            self.$message.error({\n                                message: data.msg,\n                                center: true,\n                            })\n                        }\n                        self.updatePublishForm.visible = false;\n                        self.getApiList();\n                    }).catch(error=>{\n\n                    });\n                }).catch(() => {\n\n                });\n            },\n            // 获取api分组\n            getApiGroup() {\n                let self = this;\n                axios.get(test+\"/api/api/group\", {params:{ project_id: this.$route.params.project_id},headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                    let data=response.data;\n                    if (data.code === '999999') {\n                        self.group = data.data;\n                    }\n                    else {\n                        self.$message.error({\n                            message: data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n\t\t\t// 修改分组弹窗\n            changeGroup() {\n                this.getApiGroup();\n                this.updateGroupFormVisible = true;\n            },\n            changePublish() {\n                this.updatePublishForm.visible = true;\n            },\n            handleImportApi() {\n                this.getApiGroup();\n                this.getDevApiGroupList();\n                this.importApi.visible = true;\n            },\n            //删除\n            handleDel: function (index, row) {\n                this.$confirm('确认删除接口[' + row.name + ']吗?', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    this.listLoading = true;\n                    //NProgress.start();\n                    let self = this;\n                    axios.post(test+\"/api/api/del_api\", JSON.stringify({ project_id: Number(this.$route.params.project_id), ids: [row.id] }),{headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                        let data=response.data;\n                        if (data.code === '999999') {\n                            self.$message({\n                                message: '删除成功',\n                                center: true,\n                                type: 'success'\n                            })\n                        } else {\n                            self.$message.error({\n                                message: data.msg,\n                                center: true,\n                            })\n                        }\n                        self.getApiList();\n                    }).catch(error=>{\n\n                    });\n                }).catch(() => {\n                });\n            },\n\t\t\t// 下载接口文档\n            DownloadApi() {\n                axios.get(test+\"/api/api/Download\", {params:{ project_id: this.$route.params.project_id},headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                    let data=response.data;\n                    if (data.code === \"999999\") {\n                        window.open(test+\"/api/api/download_doc?url=\"+data.data)\n                    }\n                }).catch(error=>{\n\n                });\n            },\n\t\t\t// 翻页\n            handleCurrentChange(val) {\n                this.page = val;\n                this.getApiList()\n            },\n            selsChange: function (sels) {\n                if (sels.length>0) {\n                    this.sels = sels;\n                    this.update = false\n                } else {\n                    this.update = true\n                }\n            },\n            //批量删除\n            batchRemove: function () {\n                let ids = this.sels.map(item => item.id);\n                let self = this;\n                this.$confirm('确认删除选中记录吗？', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    self.listLoading = true;\n                    //NProgress.start();\n                    axios.post(test+\"/api/api/del_api\", JSON.stringify({ project_id: Number(this.$route.params.project_id), ids: ids}),{headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                        let data=response.data;\n                        self.listLoading = false;\n                        if (data.code === '999999') {\n                            self.$message({\n                                message: '删除成功',\n                                center: true,\n                                type: 'success'\n                            })\n                        }\n                        else {\n                            self.$message.error({\n                                message: data.msg,\n                                center: true,\n                            })\n                        }\n                        self.getApiList();\n                    }).catch(error=>{\n\n                    });\n                }).catch(() => {\n                });\n            },\n            addSubmit(){\n                let self = this;\n                this.addLoading = true;\n                console.log(this.swaggerUrl);\n                if (this.swaggerUrl){\n                    axios.post(test+\"/api/api/lead_swagger\", JSON.stringify({ project_id: Number(this.$route.params.project_id), url: this.swaggerUrl}),{headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                        let data=response.data;\n                        if (data.code === '999999') {\n                            self.$message({\n                                message: '添加成功',\n                                center: true,\n                                type: 'success'\n                            });\n                            self.listLoading = true;\n                            self.addLoading = false;\n                            self.loadSwaggerApi = false;\n                            self.getApiList()\n                        }\n                        else {\n                            self.addLoading = false;\n                            self.$message.error({\n                                message: \"导入失败，请检查地址是否正确\",\n                                center: true,\n                            })\n                        }\n                        self.getApiList();\n                    }).catch(error=>{\n\n                    });\n                } else {\n                    this.addLoading = false\n                }\n            },\n            load(){\n                if(sessionStorage.getItem(\"api_name\")!=null){\n                    this.filters.name=sessionStorage.getItem(\"api_name\");\n                }\n                if(sessionStorage.getItem(\"api_type\")!=null){\n                    this.filters.type=sessionStorage.getItem(\"api_type\");\n                }\n                this.getApiList();\n                if (this.$route.params.firstGroup) {\n                    this.updateGroupForm.firstGroup = Number(this.$route.params.firstGroup);\n                    this.importApi.toGroup=Number(this.$route.params.firstGroup);\n                    sessionStorage.setItem(\"api_group\",this.$route.params.firstGroup);\n                }\n            },\n        },\n        mounted() {\n            this.load();\n        },\n        watch: {\n            '$route' (to, from) { //监听路由是否变化\n              if(to.query!= from.query){\n                this.load();\n              }\n            }\n        },\n    }\n",null]}