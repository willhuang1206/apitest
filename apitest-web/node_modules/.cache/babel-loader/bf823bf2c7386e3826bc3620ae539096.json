{"remainingRequest":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/thread-loader/dist/cjs.js!/Users/huangrong/workspace/apitest/apitest-web/node_modules/babel-loader/lib/index.js!/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/huangrong/workspace/apitest/apitest-web/src/views/project/auto/taskList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/huangrong/workspace/apitest/apitest-web/src/views/project/auto/taskList.vue","mtime":1588820978807},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { test, getProjectConfig } from \"../../../api/api\";\nimport $ from 'jquery';\nimport moment from \"moment\";\nimport axios from \"axios\";\nexport default {\n  data: function data() {\n    return {\n      status: [{\n        value: true,\n        label: '启动'\n      }, {\n        value: false,\n        label: '停止'\n      }],\n      sendEmail: [{\n        value: 0,\n        label: '不发送'\n      }, {\n        value: 1,\n        label: '发送'\n      }],\n      filters: {\n        name: ''\n      },\n      env: '',\n      EnvList: [],\n      automationlist: [],\n      memberData: [],\n      tasklist: [],\n      total: 0,\n      page: 1,\n      pages: 0,\n      listLoading: false,\n      editLoading: false,\n      sels: [],\n      //列表选中列\n      taskVShow: false,\n      taskVType: \"add\",\n      formTitle: \"定时任务\",\n      delLoading: false,\n      disDel: true,\n      form: {\n        id: \"\",\n        name: \"\",\n        env: \"\",\n        automations: [],\n        params: \"\",\n        crontab: \"\",\n        status: \"true\",\n        sendEmail: 0,\n        emails: []\n      },\n      formRules: {\n        name: [{\n          required: true,\n          message: '请输入任务名称',\n          trigger: 'blur'\n        }, {\n          min: 1,\n          max: 50,\n          message: '长度在 1 到 50 个字符',\n          trigger: 'blur'\n        }],\n        env: [{\n          required: true,\n          message: '请选择执行环境'\n        }],\n        automation: [{\n          required: true,\n          message: '请选择执行的用例集'\n        }],\n        crontab: [{\n          required: true,\n          message: '请输入crontab表达式'\n        }]\n      }\n    };\n  },\n  methods: {\n    // 获取用例列表\n    getAutomationList: function getAutomationList() {\n      var self = this;\n      var param = {\n        project_id: this.$route.params.project_id,\n        page: self.page,\n        page_size: 1000\n      };\n      axios.get(test + \"/api/automation/automation_list\", {\n        params: param,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: 'Token ' + sessionStorage.getItem('token')\n        }\n      }).then(function (response) {\n        var data = response.data;\n\n        if (data.code === '999999') {\n          self.automationlist = [];\n          data.data.data.forEach(function (item) {\n            self.automationlist.push(item);\n          });\n        } else {\n          self.$message.error({\n            message: data.msg,\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    // 获取成员列表\n    getProjectMember: function getProjectMember() {\n      var self = this;\n      var params = {\n        project_id: this.$route.params.project_id,\n        page: self.page,\n        page_size: 100\n      };\n      var headers = {\n        \"Content-Type\": \"application/json\",\n        Authorization: 'Token ' + sessionStorage.getItem('token')\n      };\n      axios.get(\"\".concat(test, \"/api/member/project_member\"), {\n        params: params,\n        headers: headers\n      }).then(function (res) {\n        var _res$data = res.data,\n            msg = _res$data.msg,\n            code = _res$data.code,\n            data = _res$data.data;\n\n        if (code === '999999') {\n          self.memberData = data.data;\n        } else {\n          self.$message.error({\n            message: msg,\n            center: true\n          });\n        }\n      });\n    },\n    handleSearch: function handleSearch() {\n      this.page = 1;\n      this.getTaskList();\n    },\n    // 获取用例列表\n    getTaskList: function getTaskList() {\n      var self = this;\n      self.listLoading = true;\n      var param = {\n        project_id: this.$route.params.project_id,\n        page: self.page,\n        name: self.filters.name\n      };\n      axios.get(test + \"/api/automation/task_list\", {\n        params: param,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: 'Token ' + sessionStorage.getItem('token')\n        }\n      }).then(function (response) {\n        var data = response.data;\n        self.listLoading = false;\n\n        if (data.code === '999999') {\n          self.total = data.data.total;\n          self.pages = data.data.pages;\n          self.tasklist = [];\n          data.data.data.forEach(function (item) {\n            self.tasklist.push(item);\n          });\n        } else {\n          self.$message.error({\n            message: data.msg,\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    //删除\n    handleDel: function handleDel(index, row) {\n      var _this = this;\n\n      this.$confirm('确认删除任务[' + row.name + ']吗?', '提示', {\n        type: 'warning'\n      }).then(function () {\n        var self = _this;\n        self.listLoading = true;\n        var param = JSON.stringify({\n          project_id: Number(_this.$route.params.project_id),\n          ids: [row.id]\n        });\n        axios.post(test + \"/api/automation/del_task\", param, {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: 'Token ' + sessionStorage.getItem('token')\n          }\n        }).then(function (response) {\n          self.listLoading = false;\n          var data = response.data;\n\n          if (data.code === '999999') {\n            self.$message({\n              message: '删除成功',\n              center: true,\n              type: 'success'\n            });\n          } else {\n            self.$message.error({\n              message: data.msg,\n              center: true\n            });\n          }\n\n          self.getTaskList();\n        }).catch(function (error) {});\n      }).catch(function () {});\n    },\n    handleCurrentChange: function handleCurrentChange(val) {\n      this.page = val;\n      this.getTaskList();\n    },\n    selsChange: function selsChange(sels) {\n      if (sels.length > 0) {\n        this.sels = sels;\n        this.update = false;\n      } else {\n        this.update = true;\n      }\n    },\n    //批量删除\n    batchRemove: function batchRemove() {\n      var _this2 = this;\n\n      var ids = this.sels.map(function (item) {\n        return item.id;\n      });\n      var self = this;\n      this.$confirm('确认删除选中任务吗？', '提示', {\n        type: 'warning'\n      }).then(function () {\n        self.listLoading = true; //NProgress.start();\n\n        axios.post(test + \"/api/automation/del_task\", JSON.stringify({\n          project_id: Number(_this2.$route.params.project_id),\n          ids: ids\n        }), {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: 'Token ' + sessionStorage.getItem('token')\n          }\n        }).then(function (response) {\n          var data = response.data;\n          self.listLoading = false;\n\n          if (data.code === '999999') {\n            self.$message({\n              message: '删除成功',\n              center: true,\n              type: 'success'\n            });\n          } else {\n            self.$message.error({\n              message: data.msg,\n              center: true\n            });\n          }\n\n          self.getTaskList();\n        }).catch(function (error) {});\n      }).catch(function () {});\n    },\n    //显示编辑界面\n    handleEdit: function handleEdit(index, row) {\n      this.formTitle = \"编辑\";\n      this.taskVType = \"edit\";\n      this.taskVShow = true;\n      this.form = Object.assign({}, row); //                this.form = {\"id\":row.id,\"name\":row.name,\"type\":row.type,\"params\":row.params,\"group\":row.group,\"description\":row.description};\n    },\n    //显示新增界面\n    handleAdd: function handleAdd() {\n      this.formTitle = \"新增\";\n      this.taskVType = \"add\";\n      this.taskVShow = true;\n      this.form = {\n        name: \"\",\n        env: \"\",\n        automations: [],\n        params: \"{}\",\n        crontab: \"0 * * * *\",\n        status: true,\n        sendEmail: 0,\n        emails: []\n      };\n    },\n    //显示新增页面,复制用例\n    handleCopy: function handleCopy(index, row) {\n      this.formTitle = \"复制\"; //this.form={\"name\":row.name,\"type\":row.type,\"params\":row.params,\"group\":row.group,\"description\":row.description};\n\n      var form = Object.assign({}, row);\n      delete form[\"id\"];\n      this.form = form;\n      this.taskVShow = true;\n      this.taskVType = \"copy\";\n    },\n    // 修改任务\n    editSubmit: function editSubmit() {\n      var _this3 = this;\n\n      if (this.form.automations.length == 0) {\n        this.$message.error({\n          message: \"请选择用例!\",\n          center: true\n        });\n        return;\n      }\n\n      var self = this;\n      this.$refs.form.validate(function (valid) {\n        if (valid) {\n          _this3.$confirm('确认提交吗？', '提示', {}).then(function () {\n            self.editLoading = true; //NProgress.start();\n\n            var param = {\n              project_id: Number(_this3.$route.params.project_id),\n              automations: JSON.stringify(self.form.automations),\n              name: self.form.name,\n              params: self.form.params,\n              env: self.form.env,\n              crontab: self.form.crontab,\n              //                                startTime: self.form.timeArray[0],\n              //                                endTime: self.form.timeArray[1],\n              status: self.form.status,\n              sendEmail: self.form.sendEmail,\n              emails: JSON.stringify(self.form.emails)\n            };\n            var url = test + \"/api/automation/add_task\";\n\n            if (self.form.id != null) {\n              param[\"id\"] = Number(self.form.id);\n              url = test + \"/api/automation/update_task\";\n            }\n\n            axios.post(url, param, {\n              headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: 'Token ' + sessionStorage.getItem('token')\n              }\n            }).then(function (response) {\n              var data = response.data;\n              self.editLoading = false;\n\n              if (data.code === '999999') {\n                self.$message({\n                  message: '执行成功',\n                  center: true,\n                  type: 'success'\n                });\n                self.$refs['form'].resetFields();\n                self.taskVShow = false;\n                self.getTaskList();\n              } else if (data.code === '999997') {\n                self.$message.error({\n                  message: data.msg,\n                  center: true\n                });\n              } else {\n                self.$message.error({\n                  message: data.msg,\n                  center: true\n                });\n              }\n            }).catch(function (error) {});\n          }).catch(function () {});\n        }\n      });\n    },\n    // 改变任务状态\n    handleChangeStatus: function handleChangeStatus(index, row) {\n      var self = this;\n      var url = \"\";\n      var message = \"\";\n      this.listLoading = true;\n      var param = JSON.stringify({\n        project_id: Number(this.$route.params.project_id),\n        id: row.id\n      });\n\n      if (row.status) {\n        url = test + \"/api/automation/stop_task\";\n        message = '禁用成功';\n      } else {\n        url = test + \"/api/automation/start_task\";\n        message = '启用成功';\n      }\n\n      axios.post(url, param, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: 'Token ' + sessionStorage.getItem('token')\n        }\n      }).then(function (response) {\n        var _response$data = response.data,\n            msg = _response$data.msg,\n            code = _response$data.code,\n            data = _response$data.data;\n        self.listLoading = false;\n\n        if (code === '999999') {\n          self.$message({\n            message: message,\n            center: true,\n            type: 'success'\n          });\n          row.status = !row.status;\n        } else {\n          self.$message.error({\n            message: msg,\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    handleRun: function handleRun(index, row) {\n      this.formTitle = \"执行\";\n      this.taskVShow = true;\n      this.taskVType = \"run\";\n      this.form = Object.assign({}, row);\n    },\n    runSubmit: function runSubmit() {\n      var _this4 = this;\n\n      this.$confirm('确认执行定时任务[' + this.form.name + ']吗?', '提示', {}).then(function () {\n        var self = _this4;\n        var url = \"\";\n        var message = \"\";\n        _this4.listLoading = true;\n        var param = {\n          project_id: Number(_this4.$route.params.project_id),\n          id: self.form.id,\n          sendEmail: self.form.sendEmail,\n          emails: self.form.emails\n        };\n        axios.post(test + \"/api/automation/execute_task\", param, {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: 'Token ' + sessionStorage.getItem('token')\n          }\n        }).then(function (response) {\n          var _response$data2 = response.data,\n              msg = _response$data2.msg,\n              code = _response$data2.code,\n              data = _response$data2.data;\n          self.listLoading = false;\n          self.taskVShow = false;\n\n          if (code === '999999') {\n            self.$message({\n              message: \"开始执行\",\n              center: true,\n              type: 'success'\n            });\n          } else {\n            self.$message.error({\n              message: msg,\n              center: true\n            });\n          }\n        }).catch(function (error) {});\n      }).catch(function () {});\n    },\n    getEnv: function getEnv() {\n      var self = this;\n      var headers = {\n        Authorization: 'Token ' + sessionStorage.getItem('token')\n      };\n      getProjectConfig(headers, {\n        project_id: self.$route.params.project_id,\n        page: self.page,\n        name: \"\",\n        type: \"env\"\n      }).then(function (data) {\n        if (data.code === '999999') {\n          data.data.data.forEach(function (item) {\n            if (item.status) {\n              self.EnvList.push(item);\n            }\n          });\n        } else {\n          self.$message.error({\n            message: data.msg,\n            center: true\n          });\n        }\n      });\n    },\n    init: function init() {\n      this.getTaskList();\n      this.getAutomationList();\n      this.getProjectMember();\n      this.getEnv();\n    }\n  },\n  mounted: function mounted() {\n    this.init();\n  },\n  watch: {\n    '$route': function $route(to, from) {\n      //监听路由是否变化\n      if (to.query != from.query) {\n        this.init(); //重新加载数据\n      }\n    }\n  }\n};",null]}