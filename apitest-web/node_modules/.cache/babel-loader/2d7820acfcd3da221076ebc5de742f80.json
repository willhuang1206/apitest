{"remainingRequest":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/thread-loader/dist/cjs.js!/Users/huangrong/workspace/apitest/apitest-web/node_modules/babel-loader/lib/index.js!/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/huangrong/workspace/apitest/apitest-web/src/views/project/api/addApi.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/huangrong/workspace/apitest/apitest-web/src/views/project/api/addApi.vue","mtime":1590723579263},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _typeof from \"/Users/huangrong/workspace/apitest/apitest-web/node_modules/@babel/runtime-corejs2/helpers/esm/typeof\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Treeselect from '@riophae/vue-treeselect'; // import the styles\n\nimport '@riophae/vue-treeselect/dist/vue-treeselect.css';\nimport { test } from '@/api/api';\nimport axios from 'axios';\nimport $ from 'jquery';\nexport default {\n  components: {\n    //          SelectTree,\n    Treeselect: Treeselect\n  },\n  data: function data() {\n    return {\n      type: [{\n        value: 'http',\n        label: '普通http'\n      }, {\n        value: 'jyb',\n        label: '加油宝app'\n      }, {\n        value: 'service',\n        label: '微服务'\n      }],\n      request: [{\n        value: 'GET',\n        label: 'GET'\n      }, {\n        value: 'POST',\n        label: 'POST'\n      }, {\n        value: 'PUT',\n        label: 'PUT'\n      }, {\n        value: 'DELETE',\n        label: 'DELETE'\n      }],\n      Http: [{\n        value: 'HTTP',\n        label: 'HTTP'\n      }, {\n        value: 'HTTPS',\n        label: 'HTTPS'\n      }],\n      paramType: [{\n        value: 'Int',\n        label: 'Int'\n      }, {\n        value: 'String',\n        label: 'String'\n      }, {\n        value: 'Object',\n        label: 'Object'\n      }, {\n        value: 'Array',\n        label: 'Array'\n      }],\n      checkHeadList: [],\n      checkParameterList: [],\n      ParameterType: true,\n      group: [],\n      requestParameterType: \"application/json\",\n      secondGroup: [],\n      status: [{\n        value: true,\n        label: '启用'\n      }, {\n        value: false,\n        label: '禁用'\n      }],\n      header: [{\n        value: 'Accept',\n        label: 'Accept'\n      }, {\n        value: 'Accept-Charset',\n        label: 'Accept-Charset'\n      }, {\n        value: 'Accept-Encoding',\n        label: 'Accept-Encoding'\n      }, {\n        value: 'Accept-Language',\n        label: 'Accept-Language'\n      }, {\n        value: 'Accept-Ranges',\n        label: 'Accept-Ranges'\n      }, {\n        value: 'Authorization',\n        label: 'Authorization'\n      }, {\n        value: 'Cache-Control',\n        label: 'Cache-Control'\n      }, {\n        value: 'Connection',\n        label: 'Connection'\n      }, {\n        value: 'Cookie',\n        label: 'Cookie'\n      }, {\n        value: 'Content-Length',\n        label: 'Content-Length'\n      }, {\n        value: 'Content-Type',\n        label: 'Content-Type'\n      }, {\n        value: 'Content-MD5',\n        label: 'Content-MD5'\n      }, {\n        value: 'Date',\n        label: 'Date'\n      }, {\n        value: 'Expect',\n        label: 'Expect'\n      }, {\n        value: 'From',\n        label: 'From'\n      }, {\n        value: 'Host',\n        label: 'Host'\n      }, {\n        value: 'If-Match',\n        label: 'If-Match'\n      }, {\n        value: 'If-Modified-Since',\n        label: 'If-Modified-Since'\n      }, {\n        value: 'If-None-Match',\n        label: 'If-None-Match'\n      }, {\n        value: 'If-Range',\n        label: 'If-Range'\n      }, {\n        value: 'If-Unmodified-Since',\n        label: 'If-Unmodified-Since'\n      }, {\n        value: 'Max-Forwards',\n        label: 'Max-Forwards'\n      }, {\n        value: 'Origin',\n        label: 'Origin'\n      }, {\n        value: 'Pragma',\n        label: 'Pragma'\n      }, {\n        value: 'Proxy-Authorization',\n        label: 'Proxy-Authorization'\n      }, {\n        value: 'Range',\n        label: 'Range'\n      }, {\n        value: 'Referer',\n        label: 'Referer'\n      }, {\n        value: 'TE',\n        label: 'TE'\n      }, {\n        value: 'Upgrade',\n        label: 'Upgrade'\n      }, {\n        value: 'User-Agent',\n        label: 'User-Agent'\n      }, {\n        value: 'Via',\n        label: 'Via'\n      }, {\n        value: 'Warning',\n        label: 'Warning'\n      }],\n      header4: \"\",\n      addParameterFormVisible: false,\n      addResponseFormVisible: false,\n      required4: [{\n        value: true,\n        label: '是'\n      }, {\n        value: false,\n        label: '否'\n      }],\n      httpCode: [{\n        value: '',\n        label: ''\n      }, {\n        value: '200',\n        label: '200'\n      }, {\n        value: '404',\n        label: '404'\n      }, {\n        value: '400',\n        label: '400'\n      }, {\n        value: '500',\n        label: '500'\n      }, {\n        value: '502',\n        label: '502'\n      }, {\n        value: '302',\n        label: '302'\n      }],\n      result: true,\n      activeNames: ['2', '3', '4'],\n      id: \"\",\n      parameterRaw: \"\",\n      form: {\n        apiGroupLevelFirst_id: null,\n        name: '',\n        type: 'http',\n        status: true,\n        requestType: 'POST',\n        httpType: 'HTTP',\n        apiAddress: '',\n        headDict: [{\n          name: \"\",\n          value: \"\"\n        }],\n        requestList: [{\n          name: \"\",\n          value: \"\",\n          _type: \"String\",\n          required: true,\n          restrict: \"\",\n          description: \"\"\n        }],\n        requestParameterType: \"application/json\",\n        responseList: [{\n          name: \"\",\n          value: \"\",\n          _type: \"String\",\n          required: true,\n          description: \"\"\n        }],\n        mockCode: '',\n        data: '',\n        jsonData: ''\n      },\n      FormRules: {\n        name: [{\n          required: true,\n          message: '请输入名称',\n          trigger: 'blur'\n        }, {\n          max: 50,\n          message: '不能超过50个字',\n          trigger: 'blur'\n        }],\n        type: [{\n          required: true,\n          message: '请选择类型',\n          trigger: 'blur'\n        }],\n        apiAddress: [{\n          required: true,\n          message: '请输入地址',\n          trigger: 'blur'\n        }],\n        required: [{\n          type: 'boolean',\n          required: true,\n          message: '请选择状态',\n          trigger: 'blur'\n        }],\n        apiGroupLevelFirst_id: [{\n          required: true,\n          message: '请选择分组',\n          trigger: 'blur'\n        }]\n      },\n      editForm: {\n        name: \"\",\n        value: \"\",\n        required: \"\",\n        restrict: \"\",\n        description: \"\"\n      },\n      format: false // editLoading: false\n\n    };\n  },\n  methods: {\n    isJsonString: function isJsonString(str) {\n      try {\n        if (_typeof(JSON.parse(str)) === \"object\") {\n          return true;\n        }\n      } catch (e) {}\n\n      return false;\n    },\n    addApiInfo: function addApiInfo() {\n      if (this.form.data && this.form.mockCode) {\n        if (!this.isJsonString(this.form.data)) {\n          this.$message({\n            message: 'mock格式错误',\n            center: true,\n            type: 'error'\n          });\n        } else {\n          this.addApi();\n        }\n      } else if (this.form.data || this.form.mockCode) {\n        this.$message({\n          message: 'HTTP状态或mock为空',\n          center: true,\n          type: 'warning'\n        });\n      } else {\n        this.addApi();\n      }\n    },\n    addApi: function addApi() {\n      var _this = this;\n\n      this.$refs.form.validate(function (valid) {\n        if (valid) {\n          var self = _this;\n          console.log(_this.form.requestList);\n\n          _this.$confirm('确认提交吗？', '提示', {}).then(function () {\n            self.form.parameterType = self.requestParameterType;\n            var _type = self.form.parameterType;\n            var _parameter = {};\n            var params = {};\n\n            if (_type === 'application/x-www-form-urlencoded' || _type === 'application/json' || _type === 'text/plain') {\n              _parameter = self.form.requestList;\n              self.form.requestList.forEach(function (item) {\n                if (item.required) {\n                  if (item._type == \"Object\" || item._type == \"Array\") {\n                    params[item.name] = JSON.parse(item.value);\n                  } else {\n                    params[item.name] = item.value;\n                  }\n                }\n              });\n            } else {\n              _parameter = self.parameterRaw;\n            }\n\n            console.log(_parameter);\n            var param = {\n              project_id: Number(self.$route.params.project_id),\n              apiGroupLevelFirst_id: Number(self.form.apiGroupLevelFirst_id),\n              name: self.form.name,\n              type: self.form.type,\n              httpType: self.form.httpType,\n              requestType: self.form.requestType,\n              apiAddress: self.form.apiAddress,\n              status: self.form.status,\n              headDict: self.form.headDict,\n              requestParameterType: _type,\n              requestList: _parameter,\n              responseList: self.form.responseList,\n              mockCode: self.form.mockCode,\n              data: self.form.data,\n              description: self.form.description,\n              params: JSON.stringify(params)\n            };\n            var headers = {\n              \"Content-Type\": \"application/json\",\n              Authorization: 'Token ' + sessionStorage.getItem('token')\n            };\n\n            if (self.parameterRaw && _type === \"raw\" && !self.isJsonString(self.parameterRaw)) {\n              self.$message({\n                message: '源数据格式错误',\n                center: true,\n                type: 'error'\n              });\n            } else {\n              axios.post(\"\".concat(test, \"/api/api/add_api\"), param, {\n                headers: headers\n              }).then(function (res) {\n                var _res$data = res.data,\n                    msg = _res$data.msg,\n                    code = _res$data.code,\n                    data = _res$data.data;\n\n                if (code === '999999') {\n                  self.$router.push({\n                    name: '分组接口列表',\n                    params: {\n                      project_id: self.$route.params.project_id,\n                      firstGroup: self.form.apiGroupLevelFirst_id\n                    }\n                  });\n                  self.$message({\n                    message: '保存成功',\n                    center: true,\n                    type: 'success'\n                  });\n                } else {\n                  self.$message.error({\n                    message: msg,\n                    center: true\n                  });\n                }\n              });\n            }\n          }).catch(function () {});\n        }\n      });\n    },\n    editParameterSubmit: function editParameterSubmit() {\n      var _this2 = this;\n\n      this.$refs.editForm.validate(function (valid) {\n        if (valid) {\n          _this2.form.requestList[_this2.id] = _this2.editForm;\n          _this2.addParameterFormVisible = false;\n        }\n      });\n    },\n    handleParameterEdit: function handleParameterEdit(index, row) {\n      this.addParameterFormVisible = true;\n      this.id = index;\n      this.editForm = Object.assign({}, row);\n    },\n    editResponseSubmit: function editResponseSubmit() {\n      var _this3 = this;\n\n      this.$refs.editForm.validate(function (valid) {\n        if (valid) {\n          _this3.form.responseList[_this3.id] = _this3.editForm;\n          _this3.addResponseFormVisible = false;\n        }\n      });\n    },\n    handleResponseEdit: function handleResponseEdit(index, row) {\n      this.addResponseFormVisible = true;\n      this.id = index;\n      this.editForm = Object.assign({}, row);\n    },\n    // 获取api分组\n    getApiGroup: function getApiGroup() {\n      var _this4 = this;\n\n      var self = this;\n      var params = {\n        project_id: this.$route.params.project_id\n      };\n      var headers = {\n        \"Content-Type\": \"application/json\",\n        Authorization: 'Token ' + sessionStorage.getItem('token')\n      };\n      axios.get(\"\".concat(test, \"/api/api/group\"), {\n        params: params,\n        headers: headers\n      }).then(function (res) {\n        var _res$data2 = res.data,\n            msg = _res$data2.msg,\n            code = _res$data2.code,\n            data = _res$data2.data;\n\n        if (code === '999999') {\n          self.group = data;\n\n          if (sessionStorage.getItem(\"api_group\") != null) {\n            _this4.form.apiGroupLevelFirst_id = Number(sessionStorage.getItem(\"api_group\"));\n          }\n        } else {\n          self.$message.error({\n            message: msg,\n            center: true\n          });\n        }\n      });\n    },\n    addHead: function addHead() {\n      var headers = {\n        name: \"\",\n        value: \"\"\n      };\n      this.form.headDict.push(headers);\n    },\n    delHead: function delHead(index) {\n      this.form.headDict.splice(index, 1);\n\n      if (this.form.headDict.length === 0) {\n        this.form.headDict.push({\n          name: \"\",\n          value: \"\"\n        });\n      }\n    },\n    addParameter: function addParameter() {\n      var headers = {\n        name: \"\",\n        value: \"\",\n        _type: \"String\",\n        required: true,\n        restrict: \"\",\n        description: \"\"\n      };\n      this.form.requestList.push(headers);\n    },\n    delParameter: function delParameter(index) {\n      this.form.requestList.splice(index, 1);\n\n      if (this.form.requestList.length === 0) {\n        this.form.requestList.push({\n          name: \"\",\n          value: \"\",\n          _type: \"String\",\n          required: true,\n          restrict: \"\",\n          description: \"\"\n        });\n      }\n    },\n    addResponse: function addResponse() {\n      var headers = {\n        name: \"\",\n        value: \"\",\n        _type: \"String\",\n        required: true,\n        description: \"\"\n      };\n      this.form.responseList.push(headers);\n    },\n    delResponse: function delResponse(index) {\n      this.form.responseList.splice(index, 1);\n\n      if (this.form.responseList.length === 0) {\n        this.form.responseList.push({\n          name: \"\",\n          value: \"\",\n          _type: \"String\",\n          required: true,\n          description: \"\"\n        });\n      }\n    },\n    changeParameterType: function changeParameterType() {\n      if (this.requestParameterType === 'application/json') {\n        this.ParameterType = true;\n\n        if (this.parameterRaw != \"\" && (this.form.requestList.length == 0 || this.form.requestList[0][\"name\"] == \"\")) {\n          try {\n            var self = this;\n            this.form.requestList = [];\n            var json = JSON.parse(this.parameterRaw);\n            $.each(json, function (name, value) {\n              var type = \"String\";\n\n              if (_typeof(value) == 'object') {\n                if (value instanceof Array) {\n                  type = 'Array';\n                } else if (value instanceof Object) {\n                  type = 'Object';\n                }\n\n                value = JSON.stringify(value);\n              } else if (typeof value == 'number') {\n                type = 'Int';\n              }\n\n              var parameter = {\n                name: name,\n                value: value,\n                _type: type,\n                required: \"True\",\n                restrict: \"\",\n                description: \"\"\n              };\n              self.form.requestList.push(parameter);\n            });\n          } catch (e) {\n            alert(e);\n          }\n        }\n      } else if (this.requestParameterType === 'application/x-www-form-urlencoded' || this.requestParameterType === 'text/plain') {\n        this.ParameterType = true;\n      } else {\n        this.ParameterType = false;\n      }\n    },\n    showData: function showData() {\n      this.result = true;\n    },\n    showHead: function showHead() {\n      this.result = false;\n    },\n    handleChange: function handleChange(val) {},\n    formatResponse: function formatResponse() {\n      if (!this.format && this.form.data != \"\") {\n        try {\n          this.form.jsonData = JSON.parse(this.form.data);\n        } catch (e) {}\n      }\n\n      this.format = !this.format;\n    },\n    getDataType: function getDataType(value) {\n      var type = \"String\";\n\n      try {\n        if (value instanceof Array) {\n          type = 'Array';\n        } else if (value instanceof Object) {\n          type = 'Object';\n        } else if (typeof value == 'number') {\n          type = 'Int';\n        }\n      } catch (Exception) {}\n\n      return type;\n    },\n    updateResponse: function updateResponse() {\n      var _this5 = this;\n\n      this.$confirm('确认根据返回样例生成返回参数吗？', '提示', {}).then(function () {\n        _this5.form.responseList = [];\n\n        try {\n          var data = JSON.parse(_this5.form.data);\n\n          if (typeof data != 'number') {\n            _this5.convertResponse('', data, 2);\n          }\n        } catch (err) {\n          alert(err);\n        }\n      }).catch(function () {});\n    },\n    convertResponse: function convertResponse(parent, data, depth) {\n      var self = this;\n      $.each(data, function (name, value) {\n        var item = {\n          required: true,\n          description: \"\"\n        };\n\n        try {\n          if (parent != '') {\n            item['name'] = parent + '.' + name;\n          } else {\n            item['name'] = name;\n          }\n\n          var type = self.getDataType(value);\n\n          if (type == 'String' || type == 'Int') {\n            item['_type'] = type;\n            item['value'] = value;\n            self.form.responseList.push(item);\n          } else if (type == 'Array') {\n            item['_type'] = type;\n            var childType = self.getDataType(value[0]);\n\n            if (childType == 'String' || childType == 'Int') {\n              item['value'] = JSON.stringify(value);\n              self.form.responseList.push(item);\n            } else if (childType == 'Object') {\n              item['value'] = '[]';\n              self.form.responseList.push(item);\n\n              if (depth > 0) {\n                self.convertResponse(item['name'] + \"[*]\", value[0], depth - 1);\n              }\n            }\n          } else if (type == 'Object') {\n            item['_type'] = type;\n            item['value'] = '{}';\n            self.form.responseList.push(item);\n\n            if (depth > 0) {\n              self.convertResponse(item['name'], value, depth - 1);\n            }\n          }\n        } catch (err) {\n          alert(err.message);\n        }\n      });\n    },\n    jybDecodePost: function jybDecodePost() {\n      var encodePost = this.parameterRaw.trim();\n      if (encodePost == \"\") return;\n      var apiUrl = this.form.apiAddress.trim();\n      var pos = 0;\n      var reg = new RegExp(\"(^|&)_pos=([^&]*)(&|$)\", \"i\");\n      var r = apiUrl.match(reg);\n\n      if (r != null) {\n        pos = unescape(r[2]);\n      }\n\n      var version = \"\";\n      reg = new RegExp(\"(^|&)ver=([^&]*)(&|$)\", \"i\");\n      r = apiUrl.match(reg);\n\n      if (r != null) {\n        version = unescape(r[2]);\n      }\n\n      var params = {\n        pos: pos,\n        post: encodePost,\n        version: version\n      };\n      var headers = {\n        \"Content-Type\": \"application/json\",\n        Authorization: 'Token ' + sessionStorage.getItem('token')\n      };\n      var self = this;\n      axios.post(test + '/api/api/jybdecode', params, {\n        headers: headers\n      }).then(function (res) {\n        var _res$data3 = res.data,\n            msg = _res$data3.msg,\n            code = _res$data3.code,\n            data = _res$data3.data;\n\n        if (code === '999999') {\n          self.parameterRaw = JSON.stringify(data);\n        } else {\n          self.$message.error({\n            message: msg,\n            center: true\n          });\n        }\n      });\n    },\n    fastAdd: function fastAdd() {\n      var _this6 = this;\n\n      var form = this.$route.params.addForm;\n\n      if (form) {\n        this.form.requestList = [];\n        this.form.requestType = form.method.toUpperCase();\n        this.form.type = form.type;\n        this.form.httpType = form.http;\n        this.form.apiAddress = form.addr;\n\n        if (form.headers.length > 0) {\n          this.form.headDict = form.headers;\n        }\n\n        this.form.parameterRaw = form.parameter;\n        form.parameters.forEach(function (item) {\n          item['_type'] = _this6.getDataType(item[\"value\"]);\n          item['required'] = true;\n          item['restrict'] = '';\n          item['description'] = '';\n\n          _this6.form.requestList.push(item);\n        }); // this.form.parameter = form.parameter;\n\n        this.form.mockCode = form.statusCode;\n        this.form.jsonData = form.resultData;\n        this.form.data = JSON.stringify(form.resultData);\n\n        if (form.contentType) {\n          this.form.requestParameterType = form.contentType;\n        }\n      }\n    }\n  },\n  watch: {\n    requestParameterType: function requestParameterType() {\n      this.changeParameterType();\n    }\n  },\n  mounted: function mounted() {\n    this.getApiGroup();\n    this.fastAdd();\n  }\n};",null]}