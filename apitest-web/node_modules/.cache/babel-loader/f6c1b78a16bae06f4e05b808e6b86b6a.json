{"remainingRequest":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/thread-loader/dist/cjs.js!/Users/huangrong/workspace/apitest/apitest-web/node_modules/babel-loader/lib/index.js!/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/huangrong/workspace/apitest/apitest-web/src/views/project/api/apiRequest.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/huangrong/workspace/apitest/apitest-web/src/views/project/api/apiRequest.vue","mtime":1588927573598},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport $ from 'jquery';\nimport { test } from '@/api/api';\nimport axios from 'axios';\nexport default {\n  name: 'ApiRequest',\n  data: function data() {\n    return {\n      paramType: [{\n        value: 'Int',\n        label: 'Int'\n      }, {\n        value: 'String',\n        label: 'String'\n      }, {\n        value: 'Object',\n        label: 'Object'\n      }, {\n        value: 'Array',\n        label: 'Array'\n      }],\n      loadingSend: false,\n      header: [{\n        value: 'Accept',\n        label: 'Accept'\n      }, {\n        value: 'Accept-Charset',\n        label: 'Accept-Charset'\n      }, {\n        value: 'Accept-Encoding',\n        label: 'Accept-Encoding'\n      }, {\n        value: 'Accept-Language',\n        label: 'Accept-Language'\n      }, {\n        value: 'Accept-Ranges',\n        label: 'Accept-Ranges'\n      }, {\n        value: 'Authorization',\n        label: 'Authorization'\n      }, {\n        value: 'Cache-Control',\n        label: 'Cache-Control'\n      }, {\n        value: 'Connection',\n        label: 'Connection'\n      }, {\n        value: 'Cookie',\n        label: 'Cookie'\n      }, {\n        value: 'Content-Length',\n        label: 'Content-Length'\n      }, {\n        value: 'Content-Type',\n        label: 'Content-Type'\n      }, {\n        value: 'Content-MD5',\n        label: 'Content-MD5'\n      }, {\n        value: 'Date',\n        label: 'Date'\n      }, {\n        value: 'Expect',\n        label: 'Expect'\n      }, {\n        value: 'From',\n        label: 'From'\n      }, {\n        value: 'Host',\n        label: 'Host'\n      }, {\n        value: 'If-Match',\n        label: 'If-Match'\n      }, {\n        value: 'If-Modified-Since',\n        label: 'If-Modified-Since'\n      }, {\n        value: 'If-None-Match',\n        label: 'If-None-Match'\n      }, {\n        value: 'If-Range',\n        label: 'If-Range'\n      }, {\n        value: 'If-Unmodified-Since',\n        label: 'If-Unmodified-Since'\n      }, {\n        value: 'Max-Forwards',\n        label: 'Max-Forwards'\n      }, {\n        value: 'Origin',\n        label: 'Origin'\n      }, {\n        value: 'Pragma',\n        label: 'Pragma'\n      }, {\n        value: 'Proxy-Authorization',\n        label: 'Proxy-Authorization'\n      }, {\n        value: 'Range',\n        label: 'Range'\n      }, {\n        value: 'Referer',\n        label: 'Referer'\n      }, {\n        value: 'TE',\n        label: 'TE'\n      }, {\n        value: 'Upgrade',\n        label: 'Upgrade'\n      }, {\n        value: 'User-Agent',\n        label: 'User-Agent'\n      }, {\n        value: 'Via',\n        label: 'Via'\n      }, {\n        value: 'Warning',\n        label: 'Warning'\n      }],\n      requestParameterType: \"application/json\",\n      ParameterType: true,\n      radioType: \"\",\n      result: true,\n      activeNames: ['2', '3', '4', '5'],\n      id: \"\",\n      head: [],\n      parameter: [],\n      parameterRaw: \"\",\n      formRules: {},\n      listLoading: false,\n      headers: \"\",\n      parameters: \"\",\n      format: false,\n      form: {\n        type: \"http\",\n        addr: \"\"\n      }\n    };\n  },\n  methods: {\n    toggleHeadSelection: function toggleHeadSelection(rows) {\n      var _this = this;\n\n      rows.forEach(function (row) {\n        _this.$refs.multipleHeadTable.toggleRowSelection(row, true);\n      });\n    },\n    toggleParameterSelection: function toggleParameterSelection(rows) {\n      var _this2 = this;\n\n      rows.forEach(function (row) {\n        _this2.$refs.multipleParameterTable.toggleRowSelection(row, true);\n      });\n    },\n    selsChangeParameter: function selsChangeParameter(sels) {\n      this.parameters = sels;\n    },\n    selsChangeHead: function selsChangeHead(sels) {\n      this.headers = sels;\n    },\n    addEmptyHead: function addEmptyHead() {\n      var head = {\n        name: \"\",\n        value: \"\"\n      };\n      this.addHead(head);\n    },\n    addHead: function addHead(head) {\n      this.head.push(head);\n      var rows = [this.head[this.head.length - 1]];\n      this.toggleHeadSelection(rows);\n    },\n    delHead: function delHead(index) {\n      if (this.head.length !== 1) {\n        this.head.splice(index, 1);\n      }\n    },\n    addEmptyParameter: function addEmptyParameter() {\n      var parameter = {\n        name: \"\",\n        value: \"\",\n        required: \"True\",\n        restrict: \"\",\n        description: \"\"\n      };\n      this.addParameter(parameter);\n    },\n    addParameter: function addParameter(parameter) {\n      this.parameter.push(parameter);\n      var rows = [this.parameter[this.parameter.length - 1]];\n      this.toggleParameterSelection(rows);\n    },\n    delParameter: function delParameter(index) {\n      if (this.parameter.length !== 1) {\n        this.parameter.splice(index, 1);\n      }\n    },\n    getDataType: function getDataType(value) {\n      var type = \"String\";\n\n      try {\n        if (value instanceof Array) {\n          type = 'Array';\n        } else if (value instanceof Object) {\n          type = 'Object';\n        } else if (typeof value == 'number') {\n          type = 'Int';\n        }\n      } catch (Exception) {}\n\n      return type;\n    },\n    getParameters: function getParameters() {\n      var parameters = {};\n\n      if (this.requestParameterType === 'application/x-www-form-urlencoded' || this.requestParameterType === 'application/json' || this.requestParameterType === 'text/plain') {\n        for (var i = 0; i < this.parameters.length; i++) {\n          var a = this.parameters[i][\"name\"];\n\n          if (a) {\n            var parameterType = this.getDataType(this.parameters[i][\"value\"]);\n\n            if (parameterType == \"Object\" || parameterType == \"Array\") {\n              parameters[a] = JSON.parse(this.parameters[i][\"value\"]);\n            } else {\n              parameters[a] = this.parameters[i][\"value\"];\n            }\n          }\n        }\n      } else {\n        parameters = this.parameterRaw;\n      }\n\n      return parameters;\n    },\n    changeParameterType: function changeParameterType() {\n      if (this.requestParameterType === 'application/json') {\n        this.ParameterType = true;\n\n        if (this.parameterRaw != \"\" && (this.parameters == \"\" || this.parameters.length == 1 && this.parameters[0][\"name\"] == \"\")) {\n          try {\n            var self = this;\n            this.parameter.splice(0);\n            var json = JSON.parse(this.parameterRaw);\n            $.each(json, function (name, value) {\n              if (typeof value != 'string') {\n                value = JSON.stringify(value);\n              }\n\n              var parameter = {\n                name: name,\n                value: value,\n                required: \"True\",\n                restrict: \"\",\n                description: \"\"\n              };\n              self.addParameter(parameter);\n            });\n          } catch (e) {\n            console.log(e);\n          }\n        }\n      } else if (this.requestParameterType === 'application/x-www-form-urlencoded' || this.requestParameterType === 'text/plain') {\n        this.ParameterType = true;\n      } else if (this.requestParameterType === 'raw') {\n        this.ParameterType = false;\n\n        if (this.parameters != \"\" && this.parameterRaw == \"\") {\n          try {\n            var parameters = {};\n\n            for (var i = 0; i < this.parameters.length; i++) {\n              var a = this.parameters[i][\"name\"];\n\n              if (a) {\n                var parameterType = this.getDataType(this.parameters[i][\"value\"]);\n\n                if (parameterType == \"Object\" || parameterType == \"Array\") {\n                  parameters[a] = JSON.parse(this.parameters[i][\"value\"]);\n                } else {\n                  parameters[a] = this.parameters[i][\"value\"];\n                }\n              }\n            }\n\n            this.parameterRaw = JSON.stringify(parameters);\n          } catch (e) {\n            console.log(e);\n          }\n        }\n      }\n    },\n    jybDecodePost: function jybDecodePost() {\n      var encodePost = this.parameterRaw.trim();\n      if (encodePost == \"\") return;\n      var apiUrl = this.form.addr.trim();\n      var pos = 0;\n      var reg = new RegExp(\"(^|&)_pos=([^&]*)(&|$)\", \"i\");\n      var r = apiUrl.match(reg);\n\n      if (r != null) {\n        pos = unescape(r[2]);\n      }\n\n      var version = \"\";\n      reg = new RegExp(\"(^|&)ver=([^&]*)(&|$)\", \"i\");\n      r = apiUrl.match(reg);\n\n      if (r != null) {\n        version = unescape(r[2]);\n      }\n\n      var params = {\n        pos: pos,\n        post: encodePost,\n        version: version\n      };\n      var headers = {\n        \"Content-Type\": \"application/json\",\n        Authorization: 'Token ' + sessionStorage.getItem('token')\n      };\n      var self = this;\n      axios.post(test + '/api/api/jybdecode', params, {\n        headers: headers\n      }).then(function (res) {\n        var _res$data = res.data,\n            msg = _res$data.msg,\n            code = _res$data.code,\n            data = _res$data.data;\n\n        if (code === '999999') {\n          self.parameterRaw = JSON.stringify(data);\n        } else {\n          self.$message.error({\n            message: msg,\n            center: true\n          });\n        }\n      });\n    }\n  },\n  watch: {\n    requestParameterType: function requestParameterType() {\n      this.changeParameterType();\n    }\n  },\n  mounted: function mounted() {\n    this.toggleHeadSelection(this.head);\n    this.toggleParameterSelection(this.parameter);\n  }\n};",null]}