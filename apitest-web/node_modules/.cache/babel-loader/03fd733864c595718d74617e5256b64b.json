{"remainingRequest":"/Users/huangrong/workspace/apitest/apitest-vue/node_modules/babel-loader/lib/index.js!/Users/huangrong/workspace/apitest/apitest-vue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/huangrong/workspace/apitest/apitest-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/huangrong/workspace/apitest/apitest-vue/src/views/project/api/apiRequest.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/huangrong/workspace/apitest/apitest-vue/src/views/project/api/apiRequest.vue","mtime":1588815975524},{"path":"/Users/huangrong/workspace/apitest/apitest-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-vue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/huangrong/workspace/apitest/apitest-vue/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.regexp.match\");\n\nrequire(\"core-js/modules/es6.regexp.constructor\");\n\nrequire(\"core-js/modules/es6.function.name\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nvar _jquery = _interopRequireDefault(require(\"jquery\"));\n\nvar _api = require(\"@/api/api\");\n\nvar _axios = _interopRequireDefault(require(\"axios\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  name: 'ApiRequest',\n  data: function data() {\n    return {\n      paramType: [{\n        value: 'Int',\n        label: 'Int'\n      }, {\n        value: 'String',\n        label: 'String'\n      }, {\n        value: 'Object',\n        label: 'Object'\n      }, {\n        value: 'Array',\n        label: 'Array'\n      }],\n      loadingSend: false,\n      header: [{\n        value: 'Accept',\n        label: 'Accept'\n      }, {\n        value: 'Accept-Charset',\n        label: 'Accept-Charset'\n      }, {\n        value: 'Accept-Encoding',\n        label: 'Accept-Encoding'\n      }, {\n        value: 'Accept-Language',\n        label: 'Accept-Language'\n      }, {\n        value: 'Accept-Ranges',\n        label: 'Accept-Ranges'\n      }, {\n        value: 'Authorization',\n        label: 'Authorization'\n      }, {\n        value: 'Cache-Control',\n        label: 'Cache-Control'\n      }, {\n        value: 'Connection',\n        label: 'Connection'\n      }, {\n        value: 'Cookie',\n        label: 'Cookie'\n      }, {\n        value: 'Content-Length',\n        label: 'Content-Length'\n      }, {\n        value: 'Content-Type',\n        label: 'Content-Type'\n      }, {\n        value: 'Content-MD5',\n        label: 'Content-MD5'\n      }, {\n        value: 'Date',\n        label: 'Date'\n      }, {\n        value: 'Expect',\n        label: 'Expect'\n      }, {\n        value: 'From',\n        label: 'From'\n      }, {\n        value: 'Host',\n        label: 'Host'\n      }, {\n        value: 'If-Match',\n        label: 'If-Match'\n      }, {\n        value: 'If-Modified-Since',\n        label: 'If-Modified-Since'\n      }, {\n        value: 'If-None-Match',\n        label: 'If-None-Match'\n      }, {\n        value: 'If-Range',\n        label: 'If-Range'\n      }, {\n        value: 'If-Unmodified-Since',\n        label: 'If-Unmodified-Since'\n      }, {\n        value: 'Max-Forwards',\n        label: 'Max-Forwards'\n      }, {\n        value: 'Origin',\n        label: 'Origin'\n      }, {\n        value: 'Pragma',\n        label: 'Pragma'\n      }, {\n        value: 'Proxy-Authorization',\n        label: 'Proxy-Authorization'\n      }, {\n        value: 'Range',\n        label: 'Range'\n      }, {\n        value: 'Referer',\n        label: 'Referer'\n      }, {\n        value: 'TE',\n        label: 'TE'\n      }, {\n        value: 'Upgrade',\n        label: 'Upgrade'\n      }, {\n        value: 'User-Agent',\n        label: 'User-Agent'\n      }, {\n        value: 'Via',\n        label: 'Via'\n      }, {\n        value: 'Warning',\n        label: 'Warning'\n      }],\n      requestParameterType: \"application/json\",\n      ParameterType: true,\n      radioType: \"\",\n      result: true,\n      activeNames: ['2', '3', '4', '5'],\n      id: \"\",\n      head: [],\n      parameter: [],\n      parameterRaw: \"\",\n      formRules: {},\n      listLoading: false,\n      headers: \"\",\n      parameters: \"\",\n      format: false,\n      form: {\n        type: \"http\",\n        addr: \"\"\n      }\n    };\n  },\n  methods: {\n    toggleHeadSelection: function toggleHeadSelection(rows) {\n      var _this = this;\n\n      rows.forEach(function (row) {\n        _this.$refs.multipleHeadTable.toggleRowSelection(row, true);\n      });\n    },\n    toggleParameterSelection: function toggleParameterSelection(rows) {\n      var _this2 = this;\n\n      rows.forEach(function (row) {\n        _this2.$refs.multipleParameterTable.toggleRowSelection(row, true);\n      });\n    },\n    selsChangeParameter: function selsChangeParameter(sels) {\n      this.parameters = sels;\n    },\n    selsChangeHead: function selsChangeHead(sels) {\n      this.headers = sels;\n    },\n    addEmptyHead: function addEmptyHead() {\n      var head = {\n        name: \"\",\n        value: \"\"\n      };\n      this.addHead(head);\n    },\n    addHead: function addHead(head) {\n      this.head.push(head);\n      var rows = [this.head[this.head.length - 1]];\n      this.toggleHeadSelection(rows);\n    },\n    delHead: function delHead(index) {\n      if (this.head.length !== 1) {\n        this.head.splice(index, 1);\n      }\n    },\n    addEmptyParameter: function addEmptyParameter() {\n      var parameter = {\n        name: \"\",\n        value: \"\",\n        required: \"True\",\n        restrict: \"\",\n        description: \"\"\n      };\n      this.addParameter(parameter);\n    },\n    addParameter: function addParameter(parameter) {\n      this.parameter.push(parameter);\n      var rows = [this.parameter[this.parameter.length - 1]];\n      this.toggleParameterSelection(rows);\n    },\n    delParameter: function delParameter(index) {\n      if (this.parameter.length !== 1) {\n        this.parameter.splice(index, 1);\n      }\n    },\n    getDataType: function getDataType(value) {\n      var type = \"String\";\n\n      try {\n        if (value instanceof Array) {\n          type = 'Array';\n        } else if (value instanceof Object) {\n          type = 'Object';\n        } else if (typeof value == 'number') {\n          type = 'Int';\n        }\n      } catch (Exception) {}\n\n      return type;\n    },\n    getParameters: function getParameters() {\n      var parameters = {};\n\n      if (this.requestParameterType === 'application/x-www-form-urlencoded' || this.requestParameterType === 'application/json' || this.requestParameterType === 'text/plain') {\n        for (var i = 0; i < this.parameters.length; i++) {\n          var a = this.parameters[i][\"name\"];\n\n          if (a) {\n            var parameterType = this.getDataType(this.parameters[i][\"value\"]);\n\n            if (parameterType == \"Object\" || parameterType == \"Array\") {\n              parameters[a] = JSON.parse(this.parameters[i][\"value\"]);\n            } else {\n              parameters[a] = this.parameters[i][\"value\"];\n            }\n          }\n        }\n      } else {\n        parameters = this.parameterRaw;\n      }\n\n      return parameters;\n    },\n    changeParameterType: function changeParameterType() {\n      if (this.requestParameterType === 'application/json') {\n        this.ParameterType = true;\n\n        if (this.parameterRaw != \"\" && (this.parameters == \"\" || this.parameters.length == 1 && this.parameters[0][\"name\"] == \"\")) {\n          try {\n            var self = this;\n            this.parameter.splice(0);\n            var json = JSON.parse(this.parameterRaw);\n\n            _jquery.default.each(json, function (name, value) {\n              if (typeof value != 'string') {\n                value = JSON.stringify(value);\n              }\n\n              var parameter = {\n                name: name,\n                value: value,\n                required: \"True\",\n                restrict: \"\",\n                description: \"\"\n              };\n              self.addParameter(parameter);\n            });\n          } catch (e) {\n            console.log(e);\n          }\n        }\n      } else if (this.requestParameterType === 'application/x-www-form-urlencoded' || this.requestParameterType === 'text/plain') {\n        this.ParameterType = true;\n      } else if (this.requestParameterType === 'raw') {\n        this.ParameterType = false;\n\n        if (this.parameters != \"\" && this.parameterRaw == \"\") {\n          try {\n            var parameters = {};\n\n            for (var i = 0; i < this.parameters.length; i++) {\n              var a = this.parameters[i][\"name\"];\n\n              if (a) {\n                var parameterType = this.getDataType(this.parameters[i][\"value\"]);\n\n                if (parameterType == \"Object\" || parameterType == \"Array\") {\n                  parameters[a] = JSON.parse(this.parameters[i][\"value\"]);\n                } else {\n                  parameters[a] = this.parameters[i][\"value\"];\n                }\n              }\n            }\n\n            this.parameterRaw = JSON.stringify(parameters);\n          } catch (e) {\n            console.log(e);\n          }\n        }\n      }\n    },\n    jybDecodePost: function jybDecodePost() {\n      var encodePost = this.parameterRaw.trim();\n      if (encodePost == \"\") return;\n      var apiUrl = this.form.addr.trim();\n      var pos = 0;\n      var reg = new RegExp(\"(^|&)_pos=([^&]*)(&|$)\", \"i\");\n      var r = apiUrl.match(reg);\n\n      if (r != null) {\n        pos = unescape(r[2]);\n      }\n\n      var version = \"\";\n      reg = new RegExp(\"(^|&)ver=([^&]*)(&|$)\", \"i\");\n      r = apiUrl.match(reg);\n\n      if (r != null) {\n        version = unescape(r[2]);\n      }\n\n      var params = {\n        pos: pos,\n        post: encodePost,\n        version: version\n      };\n      var headers = {\n        \"Content-Type\": \"application/json\",\n        Authorization: 'Token ' + sessionStorage.getItem('token')\n      };\n      var self = this;\n\n      _axios.default.post(_api.test + '/api/api/jybdecode', params, {\n        headers: headers\n      }).then(function (res) {\n        var _res$data = res.data,\n            msg = _res$data.msg,\n            code = _res$data.code,\n            data = _res$data.data;\n\n        if (code === '999999') {\n          self.parameterRaw = JSON.stringify(data);\n        } else {\n          self.$message.error({\n            message: msg,\n            center: true\n          });\n        }\n      });\n    }\n  },\n  watch: {\n    requestParameterType: function requestParameterType() {\n      this.changeParameterType();\n    }\n  },\n  mounted: function mounted() {\n    this.toggleHeadSelection(this.head);\n    this.toggleParameterSelection(this.parameter);\n  }\n};\nexports.default = _default;",{"version":3,"sources":["apiRequest.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <section>\n        <el-form :model=\"form\" ref=\"form\" :rules=\"formRules\">\n            <el-row :span=\"24\">\n                <el-collapse v-model=\"activeNames\" @change=\"handleChange\">\n                    <el-collapse-item title=\"请求头部\" name=\"1\">\n                        <el-table :data=\"head\" highlight-current-row @selection-change=\"selsChangeHead\" ref=\"multipleHeadTable\">\n                            <el-table-column type=\"selection\" min-width=\"5%\" label=\"头部\">\n                            </el-table-column>\n                            <el-table-column prop=\"name\" label=\"参数名\" min-width=\"20%\">\n                                <template slot-scope=\"scope\">\n                                    <el-select placeholder=\"head标签\" filterable v-model=\"scope.row.name\">\n                                        <el-option v-for=\"(item,index) in header\" :key=\"index+''\" :label=\"item.label\" :value=\"item.value\"></el-option>\n                                    </el-select>\n                                    <el-input class=\"selectInput\" v-model.trim=\"scope.row.name\" :value=\"scope.row.name\" placeholder=\"请输入内容\"></el-input>\n                                </template>\n                            </el-table-column>\n                            <el-table-column prop=\"value\" label=\"参数值\" min-width=\"40%\">\n                                <template slot-scope=\"scope\">\n                                    <el-input v-model.trim=\"scope.row.value\" :value=\"scope.row.value\" placeholder=\"请输入内容\"></el-input>\n                                </template>\n                            </el-table-column>\n                            <el-table-column label=\"操作\" min-width=\"15%\">\n                                <template slot-scope=\"scope\">\n                                    <el-button class=\"el-icon-delete\" size=\"mini\" @click=\"delHead(scope.$index)\"></el-button>\n                                    <el-button v-if=\"scope.$index===(head.length-1)\" size=\"mini\" class=\"el-icon-plus\" @click=\"addEmptyHead\"></el-button>\n                                </template>\n                            </el-table-column>\n                        </el-table>\n                    </el-collapse-item>\n                    <el-collapse-item title=\"请求参数\" name=\"2\">\n                        <div style=\"margin: 5px\">\n                            <el-row :span=\"24\">\n                                <el-col :span=\"4\"><el-radio v-model=\"requestParameterType\" label=\"application/x-www-form-urlencoded\">表单</el-radio></el-col>\n                                <el-col :span=\"4\"><el-radio v-model=\"requestParameterType\" label=\"application/json\">JSON</el-radio></el-col>\n                                <el-col :span=\"4\"><el-radio v-model=\"requestParameterType\" label=\"raw\">JSON源数据</el-radio><el-button v-show=\"form.type==='jyb'\" type=\"primary\" size=\"mini\" @click=\"jybDecodePost\">解密</el-button></el-col>\n                                <!--<el-col v-if=\"request3\" :span=\"4\"><el-radio v-model=\"requestParameterType\" label=\"text/plain\">Text</el-radio></el-col>-->\n                                <!--<el-col v-if=\"request3\" :span=\"8\"><el-checkbox v-model=\"radioType\" label=\"3\" v-show=\"ParameterType\">表单转源数据</el-checkbox></el-col>-->\n                            </el-row>\n                        </div>\n                        <el-table :data=\"parameter\" highlight-current-row :class=\"ParameterType? 'parameter-a': 'parameter-b'\" @selection-change=\"selsChangeParameter\" ref=\"multipleParameterTable\">\n                            <el-table-column type=\"selection\" min-width=\"5%\" label=\"头部\">\n                            </el-table-column>\n                            <el-table-column prop=\"name\" label=\"参数名\" min-width=\"20%\">\n                                <template slot-scope=\"scope\">\n                                    <el-input v-model.trim=\"scope.row.name\" :value=\"scope.row.name\" placeholder=\"请输入参数值\"></el-input>\n                                </template>\n                            </el-table-column>\n                            <el-table-column prop=\"value\" label=\"参数值\" min-width=\"40%\">\n                                <template slot-scope=\"scope\">\n                                    <el-input type=\"textarea\" :rows=\"1\" v-model.trim=\"scope.row.value\" :value=\"scope.row.value\" placeholder=\"请输入参数值\"></el-input>\n                                </template>\n                            </el-table-column>\n                            <el-table-column label=\"操作\" min-width=\"15%\">\n                                <template slot-scope=\"scope\">\n                                    <el-button class=\"el-icon-delete\" size=\"mini\" @click=\"delParameter(scope.$index)\"></el-button>\n                                    <el-button v-if=\"scope.$index===(parameter.length-1)\" size=\"mini\" class=\"el-icon-plus\" @click=\"addEmptyParameter\"></el-button>\n                                </template>\n                            </el-table-column>\n                        </el-table>\n                        <template>\n                            <el-input :class=\"ParameterType? 'parameter-b': 'parameter-a'\" type=\"textarea\" :rows=\"5\" placeholder=\"请输入内容\" v-model.trim=\"parameterRaw\"></el-input>\n                        </template>\n                    </el-collapse-item>\n                </el-collapse>\n            </el-row>\n        </el-form>\n    </section>\n</template>\n<script>\n    import $ from 'jquery';\n    import { test } from '@/api/api'\n    import axios from 'axios';\n    export default {\n        name: 'ApiRequest',\n        data() {\n            return {\n                paramType: [{value: 'Int', label: 'Int'},\n                    {value: 'String', label: 'String'},\n                    {value: 'Object', label: 'Object'},\n                    {value: 'Array', label: 'Array'}],\n                loadingSend: false,\n                header: [{value: 'Accept', label: 'Accept'},\n                    {value: 'Accept-Charset', label: 'Accept-Charset'},\n                    {value: 'Accept-Encoding', label: 'Accept-Encoding'},\n                    {value: 'Accept-Language', label: 'Accept-Language'},\n                    {value: 'Accept-Ranges', label: 'Accept-Ranges'},\n                    {value: 'Authorization', label: 'Authorization'},\n                    {value: 'Cache-Control', label: 'Cache-Control'},\n                    {value: 'Connection', label: 'Connection'},\n                    {value: 'Cookie', label: 'Cookie'},\n                    {value: 'Content-Length', label: 'Content-Length'},\n                    {value: 'Content-Type', label: 'Content-Type'},\n                    {value: 'Content-MD5', label: 'Content-MD5'},\n                    {value: 'Date', label: 'Date'},\n                    {value: 'Expect', label: 'Expect'},\n                    {value: 'From', label: 'From'},\n                    {value: 'Host', label: 'Host'},\n                    {value: 'If-Match', label: 'If-Match'},\n                    {value: 'If-Modified-Since', label: 'If-Modified-Since'},\n                    {value: 'If-None-Match', label: 'If-None-Match'},\n                    {value: 'If-Range', label: 'If-Range'},\n                    {value: 'If-Unmodified-Since', label: 'If-Unmodified-Since'},\n                    {value: 'Max-Forwards', label: 'Max-Forwards'},\n                    {value: 'Origin', label: 'Origin'},\n                    {value: 'Pragma', label: 'Pragma'},\n                    {value: 'Proxy-Authorization', label: 'Proxy-Authorization'},\n                    {value: 'Range', label: 'Range'},\n                    {value: 'Referer', label: 'Referer'},\n                    {value: 'TE', label: 'TE'},\n                    {value: 'Upgrade', label: 'Upgrade'},\n                    {value: 'User-Agent', label: 'User-Agent'},\n                    {value: 'Via', label: 'Via'},\n                    {value: 'Warning', label: 'Warning'}],\n                requestParameterType: \"application/json\",\n                ParameterType: true,\n                radioType: \"\",\n                result: true,\n                activeNames: ['2', '3', '4', '5'],\n                id: \"\",\n                head: [],\n                parameter: [],\n                parameterRaw: \"\",\n                formRules: {\n                },\n                listLoading: false,\n                headers: \"\",\n                parameters: \"\",\n                format: false,\n                form: {\n                    type: \"http\",\n                    addr: \"\"\n                }\n            }\n        },\n        methods: {\n            toggleHeadSelection(rows) {\n                rows.forEach(row => {\n                    this.$refs.multipleHeadTable.toggleRowSelection(row, true);\n                });\n            },\n            toggleParameterSelection(rows) {\n                rows.forEach(row => {\n                    this.$refs.multipleParameterTable.toggleRowSelection(row, true);\n                });\n            },\n            selsChangeParameter: function (sels) {\n                this.parameters = sels;\n            },\n            selsChangeHead: function (sels) {\n                this.headers = sels;\n            },\n            addEmptyHead() {\n                let head = {name: \"\", value: \"\"};\n                this.addHead(head);\n            },\n            addHead(head) {\n                this.head.push(head);\n                let rows = [this.head[this.head.length-1]];\n                this.toggleHeadSelection(rows)\n            },\n            delHead(index) {\n                if (this.head.length !== 1) {\n                    this.head.splice(index, 1)\n                }\n            },\n            addEmptyParameter(){\n                let parameter = {name: \"\", value: \"\", required:\"True\", restrict: \"\", description: \"\"};\n                this.addParameter(parameter);\n            },\n            addParameter(parameter) {\n                this.parameter.push(parameter);\n                let rows = [this.parameter[this.parameter.length-1]];\n                this.toggleParameterSelection(rows)\n            },\n            delParameter(index) {\n                if (this.parameter.length !== 1) {\n                    this.parameter.splice(index, 1)\n                }\n            },\n            getDataType(value){\n                let type=\"String\";\n                try{\n                    if(value instanceof Array){\n                        type = 'Array';\n                    }else if(value instanceof Object){\n                        type = 'Object';\n                    }else if(typeof(value)=='number'){\n                        type = 'Int';\n                    }\n                }catch(Exception){}\n                return type;\n            },\n            getParameters(){\n                let parameters={}\n                if ( this.requestParameterType === 'application/x-www-form-urlencoded'||this.requestParameterType === 'application/json'||this.requestParameterType === 'text/plain') {\n                    for (let i = 0; i < this.parameters.length; i++) {\n                        var a = this.parameters[i][\"name\"];\n                        if (a) {\n                            let parameterType=this.getDataType(this.parameters[i][\"value\"]);\n                            if(parameterType==\"Object\"||parameterType==\"Array\"){\n                                parameters[a] = JSON.parse(this.parameters[i][\"value\"]);\n                            }else{\n                                parameters[a] = this.parameters[i][\"value\"];\n                            }\n                        }\n                    }\n                } else {\n                    parameters = this.parameterRaw;\n                }\n                return parameters;\n            },\n            changeParameterType() {\n                if (this.requestParameterType === 'application/json') {\n                    this.ParameterType = true;\n                    if(this.parameterRaw!=\"\"&&(this.parameters==\"\"||(this.parameters.length==1&&this.parameters[0][\"name\"]==\"\"))){\n                        try{\n                            let self=this;\n                            this.parameter.splice(0);\n                            let json=JSON.parse(this.parameterRaw);\n                            $.each(json, function (name, value) {\n                                if(typeof(value)!='string'){\n                                    value=JSON.stringify(value);\n                                }\n                                let parameter = {name: name, value: value, required:\"True\", restrict: \"\", description: \"\"};\n                                self.addParameter(parameter);\n                            });\n                        }catch(e){\n                            console.log(e);\n                        }\n                    }\n                } else if (this.requestParameterType === 'application/x-www-form-urlencoded'||this.requestParameterType === 'text/plain') {\n                    this.ParameterType = true;\n                } else if (this.requestParameterType === 'raw'){\n                    this.ParameterType = false;\n                    if(this.parameters!=\"\"&&this.parameterRaw==\"\"){\n                        try{\n                            let parameters={};\n                            for (let i = 0; i < this.parameters.length; i++) {\n                                var a = this.parameters[i][\"name\"];\n                                if (a) {\n                                    let parameterType=this.getDataType(this.parameters[i][\"value\"]);\n                                    if(parameterType==\"Object\"||parameterType==\"Array\"){\n                                        parameters[a] = JSON.parse(this.parameters[i][\"value\"]);\n                                    }else{\n                                        parameters[a] = this.parameters[i][\"value\"];\n                                    }\n                                }\n                            }\n                            this.parameterRaw=JSON.stringify(parameters);\n                        }catch(e){\n                            console.log(e);\n                        }\n                    }\n                }\n            },\n            jybDecodePost() {\n                var encodePost=this.parameterRaw.trim();\n                if(encodePost==\"\")return;\n                var apiUrl=this.form.addr.trim();\n                var pos=0;\n                var reg = new RegExp(\"(^|&)_pos=([^&]*)(&|$)\", \"i\");\n                var r = apiUrl.match(reg);\n                if (r != null) {\n                    pos=unescape(r[2]);\n                }\n                var version=\"\";\n                reg = new RegExp(\"(^|&)ver=([^&]*)(&|$)\", \"i\");\n                r = apiUrl.match(reg);\n                if (r != null) {\n                    version=unescape(r[2]);\n                }\n                let params = {\n                    pos: pos,\n                    post:encodePost,\n                    version:version\n                };\n                let headers = {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: 'Token '+sessionStorage.getItem('token')\n                };\n                let self=this;\n                axios.post(test + '/api/api/jybdecode', params,{headers:headers}).then(res => {\n                    let {msg, code, data} = res.data;\n                    if (code === '999999') {\n                        self.parameterRaw=JSON.stringify(data);\n                    }else {\n                        self.$message.error({\n                            message: msg,\n                            center: true,\n                        })\n                    }\n                })\n            },\n        },\n        watch: {\n            requestParameterType() {\n                this.changeParameterType()\n            }\n        },\n        mounted() {\n            this.toggleHeadSelection(this.head);\n            this.toggleParameterSelection(this.parameter);\n        }\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n    .return-list {\n        margin-top: 0px;\n        margin-bottom: 10px;\n        border-radius: 25px;\n    }\n    .head-class {\n        font-size: 17px\n    }\n    .parameter-a {\n        display: block;\n    }\n    .parameter-b {\n        display: none;\n    }\n    .selectInput {\n        position: absolute;\n        /*margin-left: 7px;*/\n        padding-left: 9px;\n        width: 180px;\n        /*border-radius:0px;*/\n        /*height: 38px;*/\n        left: 1px;\n        border-right: 0px;\n    }\n    .HOST {\n        position: absolute;\n        right: 30px;\n        top: 0px;\n    }\n    .raw {\n        border: 1px solid #e6e6e6;\n        margin-bottom: 10px;\n        padding:15px;\n        text-align: center\n    }\n</style>\n<style lang=\"scss\">\n    .selectInput{\n        input{\n            border-right: 0px;\n            border-radius: 4px 0px 0px 4px;\n        }\n    }\n</style>\n"],"sourceRoot":"src/views/project/api"}]}