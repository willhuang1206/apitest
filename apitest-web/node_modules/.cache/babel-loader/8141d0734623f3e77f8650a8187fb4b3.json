{"remainingRequest":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/thread-loader/dist/cjs.js!/Users/huangrong/workspace/apitest/apitest-web/node_modules/babel-loader/lib/index.js!/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/huangrong/workspace/apitest/apitest-web/src/views/project/api/apiList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/huangrong/workspace/apitest/apitest-web/src/views/project/api/apiList.vue","mtime":1590476789715},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//    import SelectTree from \"../../../components/treeSelect.vue\";\nimport Treeselect from '@riophae/vue-treeselect';\nimport '@riophae/vue-treeselect/dist/vue-treeselect.css';\nimport { test } from \"../../../api/api\";\nimport axios from 'axios';\nexport default {\n  components: {\n    //          SelectTree,\n    Treeselect: Treeselect\n  },\n  data: function data() {\n    return {\n      filters: {\n        name: '',\n        type: ''\n      },\n      type: [{\n        value: '',\n        label: ''\n      }, {\n        value: 'http',\n        label: '普通http'\n      }, {\n        value: 'jyb',\n        label: '加油宝app'\n      }, {\n        value: 'service',\n        label: '微服务'\n      }],\n      api: [],\n      total: 0,\n      page: 1,\n      pages: 0,\n      page_size: 20,\n      listLoading: false,\n      sels: [],\n      //列表选中列\n      updateGroupFormVisible: false,\n      updateGroupForm: {\n        firstGroup: null\n      },\n      updateGroupFormRules: {\n        firstGroup: [{\n          type: 'number',\n          required: true,\n          message: '请选择分组',\n          trigger: 'blur'\n        }]\n      },\n      group: [],\n      updateGroupLoading: false,\n      update: true,\n      loadSwaggerApi: false,\n      addLoading: false,\n      //新增界面数据\n      swaggerUrl: \"\",\n      updatePublishForm: {\n        visible: false,\n        loading: false,\n        publish: \"\",\n        publishlist: [\"加油宝\", \"资产系统\"],\n        rules: {\n          publish: [{\n            type: 'string',\n            required: true,\n            message: '请选择发布项目',\n            trigger: 'blur'\n          }]\n        }\n      },\n      importApi: {\n        type: \"auto\",\n        types: [{\n          value: 'auto',\n          label: 'auto'\n        }, {\n          value: 'mock.fe',\n          label: 'mock.fe'\n        }],\n        visible: false,\n        loading: false,\n        rules: {\n          fromGroup: [{\n            type: 'string',\n            required: true,\n            message: '请选择源分组',\n            trigger: 'blur'\n          }],\n          toGroup: [{\n            type: 'string',\n            required: true,\n            message: '请选择导入分组',\n            trigger: 'blur'\n          }]\n        },\n        value: null,\n        fromGroup: null,\n        toGroup: null,\n        fromDate: \"\",\n        toDate: \"\",\n        groups: [],\n        fileName: \"\"\n      },\n      uploadActionUrl: test + \"/api/imports/uploadfile\",\n      fileList: []\n    };\n  },\n  methods: {\n    handleUploadSuccess: function handleUploadSuccess(res, file) {\n      this.importApi.fileName = file.name;\n    },\n    // 修改mock状态\n    checkMockStatus: function checkMockStatus(row) {\n      var self = this;\n      var param = JSON.stringify({\n        project_id: Number(this.$route.params.project_id),\n        id: Number(row.id)\n      });\n      axios.post(test + \"/api/api/updateMock\", param, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: 'Token ' + sessionStorage.getItem('token')\n        }\n      }).then(function (response) {\n        var data = response.data;\n        self.listLoading = false;\n\n        if (data.code === '999999') {\n          self.$message.success({\n            message: data.msg,\n            center: true\n          });\n          self.getApiList();\n        } else {\n          self.$message.error({\n            message: data.msg,\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    handleSearch: function handleSearch() {\n      this.page = 1;\n      this.getApiList();\n    },\n    // 获取接口列表\n    getApiList: function getApiList() {\n      this.listLoading = true;\n      var self = this;\n      sessionStorage.setItem(\"api_name\", self.filters.name);\n      sessionStorage.setItem(\"api_type\", self.filters.type);\n      var param = {\n        project_id: this.$route.params.project_id,\n        page: self.page,\n        name: self.filters.name,\n        type: self.filters.type\n      };\n\n      if (this.$route.params.firstGroup) {\n        param['apiGroupLevelFirst_id'] = this.$route.params.firstGroup;\n      }\n\n      axios.get(test + \"/api/api/api_list\", {\n        params: param,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: 'Token ' + sessionStorage.getItem('token')\n        }\n      }).then(function (response) {\n        var data = response.data;\n        self.listLoading = false;\n\n        if (data.code === '999999') {\n          self.total = data.data.total;\n          self.pages = data.data.pages;\n          self.page_size = data.data.page_size;\n          self.api = data.data.data;\n        } else {\n          self.$message.error({\n            message: data.msg,\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    // 获取接口列表\n    getDevApiGroupList: function getDevApiGroupList() {\n      this.importApi.loading = true;\n      var self = this;\n      var param = {};\n      var url = test + \"/api/imports/apidomainlist\";\n\n      if (self.importApi.type == \"mock.fe\") {\n        url = test + \"/api/imports/devapi_grouplist\";\n      }\n\n      axios.get(url, {\n        params: param,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: 'Token ' + sessionStorage.getItem('token')\n        }\n      }).then(function (response) {\n        var data = response.data;\n        self.importApi.loading = false;\n\n        if (data.code === '999999') {\n          self.importApi.groups = data.data;\n        } else {\n          self.$message.error({\n            message: data.msg,\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    // 修改接口所属分组\n    importApiSubmit: function importApiSubmit() {\n      var _this = this;\n\n      var self = this;\n      this.$confirm('确认导入接口吗？', '提示', {\n        type: 'warning'\n      }).then(function () {\n        _this.importApi.loading = true; //NProgress.start();\n\n        var params = JSON.stringify({\n          project_id: Number(_this.$route.params.project_id),\n          group_id: _this.importApi.toGroup,\n          fileName: _this.importApi.fileName\n        });\n        var url = test + \"/api/imports/api_importfrompostman\";\n        axios.post(url, params, {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: 'Token ' + sessionStorage.getItem('token')\n          }\n        }).then(function (response) {\n          var data = response.data;\n          self.importApi.loading = false;\n\n          if (data.code === '999999') {\n            self.$message({\n              message: data.msg,\n              center: true,\n              type: 'success'\n            });\n          } else {\n            self.$message.error({\n              message: data.msg,\n              center: true\n            });\n          }\n\n          self.importApi.visible = false;\n          self.getApiList();\n        }).catch(function (error) {});\n      }).catch(function () {});\n    },\n    // 修改接口所属分组\n    updateGroupSubmit: function updateGroupSubmit() {\n      var _this2 = this;\n\n      var ids = this.sels.map(function (item) {\n        return item.id;\n      });\n      var self = this;\n      this.$confirm('确认修改所属分组吗？', '提示', {\n        type: 'warning'\n      }).then(function () {\n        self.updateGroupLoading = true; //NProgress.start();\n\n        var params = JSON.stringify({\n          project_id: Number(_this2.$route.params.project_id),\n          apiGroupLevelFirst_id: Number(self.updateGroupForm.firstGroup),\n          ids: ids\n        });\n        axios.post(test + \"/api/api/update_group\", params, {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: 'Token ' + sessionStorage.getItem('token')\n          }\n        }).then(function (response) {\n          var data = response.data;\n          self.updateGroupLoading = false;\n\n          if (data.code === '999999') {\n            self.$message({\n              message: '修改成功',\n              center: true,\n              type: 'success'\n            });\n            self.$router.push({\n              name: '分组接口列表',\n              params: {\n                project_id: self.$route.params.project_id,\n                firstGroup: self.updateGroupForm.firstGroup\n              }\n            });\n          } else {\n            self.$message.error({\n              message: data.msg,\n              center: true\n            });\n          }\n\n          self.updateGroupFormVisible = false;\n          self.getApiList();\n        }).catch(function (error) {});\n      }).catch(function () {});\n    },\n    // 修改接口所属发布项目\n    updatePublishSubmit: function updatePublishSubmit() {\n      var _this3 = this;\n\n      var ids = this.sels.map(function (item) {\n        return item.id;\n      });\n      var self = this;\n      this.$confirm('确认修改发布项目吗？', '提示', {\n        type: 'warning'\n      }).then(function () {\n        self.updatePublishForm.loading = true; //NProgress.start();\n\n        var params = JSON.stringify({\n          project_id: Number(_this3.$route.params.project_id),\n          publish: self.updatePublishForm.publish,\n          ids: ids\n        });\n        axios.post(test + \"/api/api/update_publish\", params, {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: 'Token ' + sessionStorage.getItem('token')\n          }\n        }).then(function (response) {\n          var data = response.data;\n          self.updatePublishForm.loading = false;\n\n          if (data.code === '999999') {\n            self.$message({\n              message: '修改成功',\n              center: true,\n              type: 'success'\n            }); //\t\t\t\t\t\t\t\t                self.$router.push({ name: '分组接口列表', params: { project_id: self.$route.params.project_id, firstGroup: self.updateGroupForm.firstGroup}});\n          } else {\n            self.$message.error({\n              message: data.msg,\n              center: true\n            });\n          }\n\n          self.updatePublishForm.visible = false;\n          self.getApiList();\n        }).catch(function (error) {});\n      }).catch(function () {});\n    },\n    // 获取api分组\n    getApiGroup: function getApiGroup() {\n      var self = this;\n      axios.get(test + \"/api/api/group\", {\n        params: {\n          project_id: this.$route.params.project_id\n        },\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: 'Token ' + sessionStorage.getItem('token')\n        }\n      }).then(function (response) {\n        var data = response.data;\n\n        if (data.code === '999999') {\n          self.group = data.data;\n        } else {\n          self.$message.error({\n            message: data.msg,\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    // 修改分组弹窗\n    changeGroup: function changeGroup() {\n      this.getApiGroup();\n      this.updateGroupFormVisible = true;\n    },\n    changePublish: function changePublish() {\n      this.updatePublishForm.visible = true;\n    },\n    handleImportApi: function handleImportApi() {\n      this.getApiGroup();\n      this.getDevApiGroupList();\n      this.importApi.visible = true;\n    },\n    //删除\n    handleDel: function handleDel(index, row) {\n      var _this4 = this;\n\n      this.$confirm('确认删除接口[' + row.name + ']吗?', '提示', {\n        type: 'warning'\n      }).then(function () {\n        _this4.listLoading = true; //NProgress.start();\n\n        var self = _this4;\n        axios.post(test + \"/api/api/del_api\", JSON.stringify({\n          project_id: Number(_this4.$route.params.project_id),\n          ids: [row.id]\n        }), {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: 'Token ' + sessionStorage.getItem('token')\n          }\n        }).then(function (response) {\n          var data = response.data;\n\n          if (data.code === '999999') {\n            self.$message({\n              message: '删除成功',\n              center: true,\n              type: 'success'\n            });\n          } else {\n            self.$message.error({\n              message: data.msg,\n              center: true\n            });\n          }\n\n          self.getApiList();\n        }).catch(function (error) {});\n      }).catch(function () {});\n    },\n    // 下载接口文档\n    DownloadApi: function DownloadApi() {\n      axios.get(test + \"/api/api/Download\", {\n        params: {\n          project_id: this.$route.params.project_id\n        },\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: 'Token ' + sessionStorage.getItem('token')\n        }\n      }).then(function (response) {\n        var data = response.data;\n\n        if (data.code === \"999999\") {\n          window.open(test + \"/api/api/download_doc?url=\" + data.data);\n        }\n      }).catch(function (error) {});\n    },\n    // 翻页\n    handleCurrentChange: function handleCurrentChange(val) {\n      this.page = val;\n      this.getApiList();\n    },\n    selsChange: function selsChange(sels) {\n      if (sels.length > 0) {\n        this.sels = sels;\n        this.update = false;\n      } else {\n        this.update = true;\n      }\n    },\n    //批量删除\n    batchRemove: function batchRemove() {\n      var _this5 = this;\n\n      var ids = this.sels.map(function (item) {\n        return item.id;\n      });\n      var self = this;\n      this.$confirm('确认删除选中记录吗？', '提示', {\n        type: 'warning'\n      }).then(function () {\n        self.listLoading = true; //NProgress.start();\n\n        axios.post(test + \"/api/api/del_api\", JSON.stringify({\n          project_id: Number(_this5.$route.params.project_id),\n          ids: ids\n        }), {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: 'Token ' + sessionStorage.getItem('token')\n          }\n        }).then(function (response) {\n          var data = response.data;\n          self.listLoading = false;\n\n          if (data.code === '999999') {\n            self.$message({\n              message: '删除成功',\n              center: true,\n              type: 'success'\n            });\n          } else {\n            self.$message.error({\n              message: data.msg,\n              center: true\n            });\n          }\n\n          self.getApiList();\n        }).catch(function (error) {});\n      }).catch(function () {});\n    },\n    addSubmit: function addSubmit() {\n      var self = this;\n      this.addLoading = true;\n      console.log(this.swaggerUrl);\n\n      if (this.swaggerUrl) {\n        axios.post(test + \"/api/api/lead_swagger\", JSON.stringify({\n          project_id: Number(this.$route.params.project_id),\n          url: this.swaggerUrl\n        }), {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: 'Token ' + sessionStorage.getItem('token')\n          }\n        }).then(function (response) {\n          var data = response.data;\n\n          if (data.code === '999999') {\n            self.$message({\n              message: '添加成功',\n              center: true,\n              type: 'success'\n            });\n            self.listLoading = true;\n            self.addLoading = false;\n            self.loadSwaggerApi = false;\n            self.getApiList();\n          } else {\n            self.addLoading = false;\n            self.$message.error({\n              message: \"导入失败，请检查地址是否正确\",\n              center: true\n            });\n          }\n\n          self.getApiList();\n        }).catch(function (error) {});\n      } else {\n        this.addLoading = false;\n      }\n    },\n    load: function load() {\n      if (sessionStorage.getItem(\"api_name\") != null) {\n        this.filters.name = sessionStorage.getItem(\"api_name\");\n      }\n\n      if (sessionStorage.getItem(\"api_type\") != null) {\n        this.filters.type = sessionStorage.getItem(\"api_type\");\n      }\n\n      this.getApiList();\n\n      if (this.$route.params.firstGroup) {\n        this.updateGroupForm.firstGroup = Number(this.$route.params.firstGroup);\n        this.importApi.toGroup = Number(this.$route.params.firstGroup);\n        sessionStorage.setItem(\"api_group\", this.$route.params.firstGroup);\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.load();\n  },\n  watch: {\n    '$route': function $route(to, from) {\n      //监听路由是否变化\n      if (to.query != from.query) {\n        this.load();\n      }\n    }\n  }\n};",null]}