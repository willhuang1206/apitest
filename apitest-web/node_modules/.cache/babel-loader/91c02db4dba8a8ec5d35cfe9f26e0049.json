{"remainingRequest":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/thread-loader/dist/cjs.js!/Users/huangrong/workspace/apitest/apitest-web/node_modules/babel-loader/lib/index.js!/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/huangrong/workspace/apitest/apitest-web/src/views/project/auto/autoList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/huangrong/workspace/apitest/apitest-web/src/views/project/auto/autoList.vue","mtime":1590650907313},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Treeselect from '@riophae/vue-treeselect';\nimport Cookies from 'js-cookie';\nimport '@riophae/vue-treeselect/dist/vue-treeselect.css'; //    import SelectTree from \"../../../components/treeSelect.vue\";\n\nimport { test, getProjectConfig, runAutomation } from \"../../../api/api\";\nimport $ from 'jquery';\nimport moment from \"moment\";\nimport axios from 'axios';\nexport default {\n  components: {\n    //          SelectTree,\n    Treeselect: Treeselect\n  },\n  data: function data() {\n    return {\n      automationType: [{\n        value: '',\n        label: ''\n      }, {\n        value: 'case',\n        label: '普通用例'\n      }, {\n        value: 'reuse',\n        label: '可复用用例'\n      }, {\n        value: 'list',\n        label: '用例集'\n      }, {\n        value: 'data',\n        label: '数据用例'\n      }, {\n        value: 'monitor',\n        label: '接口监控'\n      }],\n      listType: \"\",\n      filters: {\n        name: '',\n        type: ''\n      },\n      env: '',\n      automationlist: [],\n      total: 0,\n      pages: 0,\n      page: 1,\n      page_size: 20,\n      listLoading: false,\n      sels: [],\n      //列表选中列\n      delLoading: false,\n      disDel: true,\n      TestStatus: false,\n      updateGroupFormVisible: false,\n      updateGroupForm: {\n        firstGroup: null\n      },\n      updateGroupFormRules: {\n        firstGroup: [{\n          type: 'number',\n          required: true,\n          message: '请选择父分组',\n          trigger: 'blur'\n        }]\n      },\n      group: [],\n      updateGroupLoading: false,\n      update: true,\n      editFormVisible: false,\n      //编辑界面是否显示\n      editFormTitle: \"\",\n      editLoading: false,\n      editFormRules: {\n        name: [{\n          required: true,\n          message: '请输入名称',\n          trigger: 'blur'\n        }, {\n          min: 1,\n          max: 1024,\n          message: '长度在 1 到 1024 个字符',\n          trigger: 'blur'\n        }],\n        group: [{\n          required: true,\n          message: '请选择分组',\n          trigger: 'blur'\n        }],\n        description: [{\n          required: false,\n          message: '请输入描述',\n          trigger: 'blur'\n        }, {\n          max: 1024,\n          message: '不能超过1024个字符',\n          trigger: 'blur'\n        }]\n      },\n      //编辑界面数据\n      editForm: {\n        name: '',\n        group: null,\n        description: '',\n        params: '{}',\n        type: 'case'\n      },\n      getResultTimer: '',\n      importAutomation: {\n        visible: false,\n        loading: false,\n        rules: {\n          fromGroup: [{\n            type: 'string',\n            required: true,\n            message: '请选择源分组',\n            trigger: 'blur'\n          }],\n          toGroup: [{\n            type: 'string',\n            required: true,\n            message: '请选择导入分组',\n            trigger: 'blur'\n          }]\n        },\n        value: null,\n        fromGroup: null,\n        toGroup: null,\n        fromDate: \"\",\n        toDate: \"\",\n        groups: [],\n        fileName: \"\"\n      },\n      fileList: [],\n      formData: [],\n      role: Cookies.get('role'),\n      uploadFileUrl: test + \"/api/imports/uploadfile\",\n      downloadTemplateUrl: test + \"/api/imports/downloadtemplate\"\n    };\n  },\n  methods: {\n    handleUploadSuccess: function handleUploadSuccess(res, file) {\n      this.importAutomation.fileName = file.name;\n    },\n    handleSearch: function handleSearch() {\n      this.page = 1;\n      this.getAutomationList();\n    },\n    // 获取用例列表\n    getAutomationList: function getAutomationList() {\n      this.listLoading = true;\n      var self = this;\n      sessionStorage.setItem(\"auto_name\", self.filters.name);\n      sessionStorage.setItem(\"auto_type\", self.filters.type);\n      var param = {\n        project_id: this.$route.params.project_id,\n        page: self.page,\n        name: self.filters.name,\n        type: self.filters.type\n      };\n\n      if (this.$route.params.firstGroup) {\n        param['first_group_id'] = this.$route.params.firstGroup;\n      }\n\n      axios.get(test + \"/api/automation/automation_list\", {\n        params: param\n      }).then(function (response) {\n        self.listLoading = false;\n\n        if (response.data.code === '999999') {\n          self.total = response.data.data.total;\n          self.pages = response.data.data.pages;\n          self.page_size = response.data.data.page_size;\n          self.automationlist = [];\n          response.data.data.data.forEach(function (item) {\n            item.result = false;\n            self.automationlist.push(item);\n          });\n        } else {\n          self.$message.error({\n            message: response.data.msg,\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    // 获取接口列表\n    getAutomationDomainList: function getAutomationDomainList() {\n      this.importAutomation.loading = true;\n      var self = this;\n      var param = {};\n      axios.get(test + \"/api/imports/autodomainlist\", {\n        params: param,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: 'Token ' + sessionStorage.getItem('token')\n        }\n      }).then(function (response) {\n        var data = response.data;\n        self.importAutomation.loading = false;\n\n        if (data.code === '999999') {\n          //                        alert(JSON.stringify(data.data));\n          self.importAutomation.groups = data.data;\n        } else {\n          self.$message.error({\n            message: data.msg,\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    // 修改用例所属分组\n    updateGroupSubmit: function updateGroupSubmit() {\n      var _this = this;\n\n      var ids = this.sels.map(function (item) {\n        return item.id;\n      });\n      var self = this;\n      this.$confirm('确认修改所属分组吗？', '提示', {\n        type: 'warning'\n      }).then(function () {\n        self.updateGroupLoading = true; //NProgress.start();\n\n        var params = JSON.stringify({\n          project_id: Number(_this.$route.params.project_id),\n          group_id: self.updateGroupForm.firstGroup,\n          ids: ids\n        });\n        var header = {\n          \"Content-Type\": \"application/json\",\n          Authorization: 'Token ' + sessionStorage.getItem('token')\n        };\n        axios.post(test + \"/api/automation/update_automation_group\", params, {\n          headers: header\n        }).then(function (response) {\n          self.updateGroupLoading = false;\n\n          if (response.data.code === '999999') {\n            self.$message({\n              message: '修改成功',\n              center: true,\n              type: 'success'\n            });\n            self.$router.push({\n              name: '分组自动化列表',\n              params: {\n                project_id: self.$route.params.project_id,\n                firstGroup: self.updateGroupForm.firstGroup\n              }\n            });\n          } else {\n            self.$message.error({\n              message: response.data.msg,\n              center: true\n            });\n          }\n\n          self.updateGroupFormVisible = false;\n          self.getAutomationList();\n        }).catch(function (error) {});\n      }).catch(function () {});\n    },\n    importAutomationSubmit: function importAutomationSubmit() {\n      var _this2 = this;\n\n      var self = this;\n      this.$confirm('确认导入用例吗？', '提示', {\n        type: 'warning'\n      }).then(function () {\n        _this2.importAutomation.loading = true; //NProgress.start();\n\n        var params = JSON.stringify({\n          project_id: Number(_this2.$route.params.project_id),\n          group_id: _this2.importAutomation.toGroup,\n          fileName: _this2.importAutomation.fileName\n        });\n        axios.post(test + \"/api/imports/automation_importfromexcel\", params, {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: 'Token ' + sessionStorage.getItem('token')\n          }\n        }).then(function (response) {\n          var data = response.data;\n          self.importAutomation.loading = false;\n\n          if (data.code === '999999') {\n            self.$message({\n              message: data.msg,\n              center: true,\n              type: 'success'\n            });\n          } else {\n            self.$message.error({\n              message: data.msg,\n              center: true\n            });\n          }\n\n          self.importAutomation.visible = false;\n          self.getAutomationList();\n        }).catch(function (error) {});\n      }).catch(function () {});\n    },\n    // 获取用例分组\n    getAutomationGroup: function getAutomationGroup() {\n      var self = this;\n      axios.get(test + \"/api/automation/group\", {\n        params: {\n          project_id: this.$route.params.project_id\n        }\n      }).then(function (response) {\n        if (response.data.code === '999999') {\n          self.group = response.data.data;\n        } else {\n          self.$message.error({\n            message: response.data.msg,\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    changeGroup: function changeGroup() {\n      this.getAutomationGroup();\n      this.updateGroupFormVisible = true;\n    },\n    handleImportAutomation: function handleImportAutomation() {\n      this.getAutomationGroup(); //                this.getAutomationDomainList();\n\n      this.importAutomation.visible = true;\n    },\n    //删除\n    handleDel: function handleDel(index, row) {\n      var _this3 = this;\n\n      this.$confirm('确认删除用例[' + row.name + ']吗?', '提示', {\n        type: 'warning'\n      }).then(function () {\n        _this3.listLoading = true; //NProgress.start();\n\n        var self = _this3;\n        var param = JSON.stringify({\n          project_id: Number(_this3.$route.params.project_id),\n          ids: [row.id]\n        });\n        var header = {\n          \"Content-Type\": \"application/json\",\n          Authorization: 'Token ' + sessionStorage.getItem('token')\n        };\n        axios.post(test + \"/api/automation/del_automation\", param, {\n          headers: header\n        }).then(function (response) {\n          if (response.data.code === '999999') {\n            self.$message({\n              message: '删除成功',\n              center: true,\n              type: 'success'\n            });\n          } else {\n            self.$message.error({\n              message: response.data.msg,\n              center: true\n            });\n          }\n\n          _this3.listLoading = true;\n          self.getAutomationList();\n        }).catch(function (error) {\n          _this3.listLoading = true;\n        });\n      }).catch(function () {});\n    },\n    handleCurrentChange: function handleCurrentChange(val) {\n      this.page = val;\n      this.getAutomationList();\n    },\n    selsChange: function selsChange(sels) {\n      if (sels.length > 0) {\n        this.sels = sels;\n        this.update = false;\n      } else {\n        this.update = true;\n      }\n    },\n    //批量删除\n    batchRemove: function batchRemove() {\n      var _this4 = this;\n\n      var ids = this.sels.map(function (item) {\n        return item.id;\n      });\n      var self = this;\n      this.$confirm('确认删除选中记录吗？', '提示', {\n        type: 'warning'\n      }).then(function () {\n        self.listLoading = true; //NProgress.start();\n\n        var param = JSON.stringify({\n          project_id: Number(_this4.$route.params.project_id),\n          ids: ids\n        });\n        var header = {\n          \"Content-Type\": \"application/json\",\n          Authorization: 'Token ' + sessionStorage.getItem('token')\n        };\n        axios.post(test + \"/api/automation/del_automation\", param, {\n          headers: header\n        }).then(function (response) {\n          self.listLoading = false;\n\n          if (response.data.code === '999999') {\n            self.$message({\n              message: '删除成功',\n              center: true,\n              type: 'success'\n            });\n          } else {\n            self.$message.error({\n              message: response.data.msg,\n              center: true\n            });\n          }\n\n          self.getAutomationList();\n        }).catch(function (error) {});\n      }).catch(function () {});\n    },\n    //显示编辑界面\n    handleEdit: function handleEdit(index, row) {\n      this.getAutomationGroup();\n      this.editFormTitle = \"编辑\";\n      this.editFormVisible = true;\n      this.editForm = {\n        \"id\": row.id,\n        \"name\": row.name,\n        \"type\": row.type,\n        \"params\": row.params,\n        \"group\": row.group,\n        \"description\": row.description\n      };\n    },\n    //显示新增页面,复制用例\n    handleCopy: function handleCopy(index, row) {\n      this.getAutomationGroup();\n      this.editFormTitle = \"复制\";\n      this.editForm = {\n        \"copyId\": row.id,\n        \"name\": row.name,\n        \"type\": row.type,\n        \"params\": row.params,\n        \"group\": row.group,\n        \"description\": row.description\n      };\n      this.editFormVisible = true;\n    },\n    //显示新增界面\n    handleAdd: function handleAdd() {\n      this.getAutomationGroup();\n      this.editFormTitle = \"新增\";\n      this.editFormVisible = true;\n    },\n    // 修改用例\n    editSubmit: function editSubmit() {\n      var _this5 = this;\n\n      if (this.editForm.id == null) {\n        this.addSubmit();\n      } else {\n        var self = this;\n        this.$refs.editForm.validate(function (valid) {\n          if (valid) {\n            _this5.$confirm('确认提交吗？', '提示', {}).then(function () {\n              self.editLoading = true; //NProgress.start();\n\n              var params = JSON.stringify({\n                project_id: Number(_this5.$route.params.project_id),\n                id: Number(self.editForm.id),\n                type: self.editForm.type,\n                name: self.editForm.name,\n                params: self.editForm.params,\n                group_id: Number(_this5.editForm.group),\n                description: self.editForm.description\n              });\n              var headers = {\n                \"Content-Type\": \"application/json\",\n                Authorization: 'Token ' + sessionStorage.getItem('token')\n              };\n              axios.post(test + \"/api/automation/update_automation\", params, {\n                headers: headers\n              }).then(function (response) {\n                self.editLoading = false;\n\n                if (response.data.code === '999999') {\n                  self.$message({\n                    message: '修改成功',\n                    center: true,\n                    type: 'success'\n                  });\n                  self.$refs['editForm'].resetFields();\n                  self.editFormVisible = false;\n                  self.getAutomationList();\n                } else if (response.data.code === '999997') {\n                  self.$message.error({\n                    message: response.data.msg,\n                    center: true\n                  });\n                } else {\n                  self.$message.error({\n                    message: response.data.msg,\n                    center: true\n                  });\n                }\n              }).catch(function (error) {});\n            }).catch(function () {});\n          }\n        });\n      }\n    },\n    //新增用例\n    addSubmit: function addSubmit() {\n      var _this6 = this;\n\n      this.$refs.editForm.validate(function (valid) {\n        if (valid) {\n          var self = _this6;\n\n          _this6.$confirm('确认提交吗？', '提示', {}).then(function () {\n            self.editLoading = true; //NProgress.start();\n\n            var param = {\n              project_id: Number(_this6.$route.params.project_id),\n              type: _this6.editForm.type,\n              group_id: Number(_this6.editForm.group),\n              name: self.editForm.name,\n              params: self.editForm.params,\n              description: self.editForm.description\n            };\n\n            if (_this6.editFormTitle == \"复制\") {\n              param[\"copyId\"] = self.editForm.copyId;\n            }\n\n            param = JSON.stringify(param);\n            var headers = {\n              \"Content-Type\": \"application/json\",\n              Authorization: 'Token ' + sessionStorage.getItem('token')\n            };\n            axios.post(test + \"/api/automation/add_automation\", param, {\n              headers: headers\n            }).then(function (response) {\n              self.editLoading = false;\n\n              if (response.data.code === '999999') {\n                self.$message({\n                  message: '添加成功',\n                  center: true,\n                  type: 'success'\n                });\n                self.$refs['editForm'].resetFields();\n                self.editFormVisible = false;\n                self.getAutomationList();\n              } else if (response.data.code === '999997') {\n                self.$message.error({\n                  message: response.data.msg,\n                  center: true\n                });\n              } else {\n                self.$message.error({\n                  message: response.data.msg,\n                  center: true\n                });\n                self.$refs['editForm'].resetFields();\n                self.editFormVisible = false;\n                self.getAutomationList();\n              }\n            }).catch(function (error) {});\n          }).catch(function () {});\n        }\n      });\n    },\n    init: function init() {\n      if (sessionStorage.getItem(\"auto_name\") != null) {\n        this.filters.name = sessionStorage.getItem(\"auto_name\");\n      }\n\n      if (sessionStorage.getItem(\"auto_type\") != null) {\n        this.filters.type = sessionStorage.getItem(\"auto_type\");\n      } //                this.getAutomationGroup();\n\n\n      this.getAutomationList();\n\n      if (this.$route.params.firstGroup) {\n        this.updateGroupForm.firstGroup = Number(this.$route.params.firstGroup);\n        this.editForm.group = Number(this.$route.params.firstGroup);\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.init();\n  },\n  watch: {\n    '$route': function $route(to, from) {\n      //监听路由是否变化\n      if (to.query != from.query) {\n        this.init(); //重新加载数据\n      }\n    }\n  }\n};",null]}