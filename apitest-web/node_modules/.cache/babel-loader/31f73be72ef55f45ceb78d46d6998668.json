{"remainingRequest":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/thread-loader/dist/cjs.js!/Users/huangrong/workspace/apitest/apitest-web/node_modules/babel-loader/lib/index.js!/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/huangrong/workspace/apitest/apitest-web/src/views/project/api/testApi.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/huangrong/workspace/apitest/apitest-web/src/views/project/api/testApi.vue","mtime":1588816148402},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _typeof from \"/Users/huangrong/workspace/apitest/apitest-web/node_modules/@babel/runtime-corejs2/helpers/esm/typeof\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { test } from '@/api/api';\nimport ApiRequest from \"./apiRequest.vue\";\nimport $ from 'jquery';\nimport axios from 'axios';\nexport default {\n  components: {\n    ApiRequest: ApiRequest\n  },\n  data: function data() {\n    return {\n      request: [{\n        value: 'GET',\n        label: 'GET'\n      }, {\n        value: 'POST',\n        label: 'POST'\n      }, {\n        value: 'PUT',\n        label: 'PUT'\n      }, {\n        value: 'DELETE',\n        label: 'DELETE'\n      }],\n      Http: [{\n        value: 'http',\n        label: 'HTTP'\n      }, {\n        value: 'https',\n        label: 'HTTPS'\n      }],\n      loadingSend: false,\n      result: true,\n      activeNames: ['2', '3', '4', '5'],\n      id: \"\",\n      Host: [],\n      form: {\n        url: \"\",\n        method: 'POST',\n        http: 'http',\n        addr: '',\n        statusCode: \"\",\n        resultData: \"\",\n        resultHead: \"\"\n      },\n      formRules: {\n        env: [{\n          required: true,\n          message: '请选择测试环境',\n          trigger: 'blur'\n        }],\n        addr: [{\n          required: true,\n          message: '请输入地址',\n          trigger: 'blur'\n        }]\n      },\n      requestHistory: [],\n      listLoading: false,\n      headers: \"\",\n      parameters: \"\",\n      resultShow: true,\n      format: false,\n      type: \"\"\n    };\n  },\n  methods: {\n    isJsonString: function isJsonString(str) {\n      try {\n        if (_typeof(JSON.parse(str)) === \"object\") {\n          return true;\n        }\n      } catch (e) {}\n\n      return false;\n    },\n    getApiInfo: function getApiInfo() {\n      var _this = this;\n\n      var self = this;\n      var param = {\n        project_id: self.$route.params.project_id,\n        api_id: self.$route.params.api_id\n      };\n      axios.get(test + \"/api/api/api_info\", {\n        params: param\n      }).then(function (response) {\n        var data = response.data;\n\n        if (response.data.code === '999999') {\n          self.form.method = data.data.requestType;\n          self.form.http = data.data.httpType.toLowerCase();\n          self.form.addr = data.data.apiAddress;\n\n          if (data.data.headers.length) {\n            data.data.headers.forEach(function (item) {\n              _this.$refs.apiRequest.addHead(item);\n            });\n          } else {\n            _this.$refs.apiRequest.addEmptyHead();\n          }\n\n          if (data.data.requestParameter.length) {\n            data.data.requestParameter.forEach(function (item) {\n              _this.$refs.apiRequest.addParameter(item);\n            });\n          } else {\n            _this.$refs.apiRequest.addEmptyParameter();\n          }\n\n          try {\n            _this.$refs.apiRequest.requestParameter.parameterRaw = data.data.requestParameterRaw[0].data;\n          } catch (e) {}\n\n          _this.$refs.apiRequest.requestParameterType = data.data.requestParameterType;\n          self.type = data.data.type;\n          self.getHost();\n        } else {\n          self.$message.error({\n            message: data.msg,\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    getHistory: function getHistory() {\n      var self = this;\n      this.listLoading = true;\n      var params = {\n        project_id: this.$route.params.project_id,\n        api_id: self.$route.params.api_id\n      };\n      axios.get(test + \"/api/api/history_list\", {\n        params: params\n      }).then(function (response) {\n        self.listLoading = false;\n\n        if (response.data.code === '999999') {\n          self.requestHistory = response.data.data; // data.data.data.forEach((item) => {\n          //     self.requestHistory.push(item)\n          // })\n        } else {\n          self.$message.error({\n            message: response.data.msg,\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    AddHistroy: function AddHistroy(code) {\n      var self = this;\n      this.listLoading = true;\n      var params = JSON.stringify({\n        project_id: Number(this.$route.params.project_id),\n        api_id: Number(self.$route.params.api_id),\n        requestType: self.form.method,\n        requestAddress: self.form.http + \"://\" + self.form.env + self.form.addr,\n        httpCode: code\n      });\n      var headers = {\n        \"Content-Type\": \"application/json\",\n        Authorization: 'Token ' + sessionStorage.getItem('token')\n      };\n      axios.post(test + \"/api/api/add_history\", params, {\n        headers: headers\n      }).then(function (response) {\n        self.listLoading = false;\n\n        if (response.data.code === '999999') {\n          self.getHistory();\n        } else {\n          self.$message.error({\n            message: response.data.msg,\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    delHistory: function delHistory(row) {\n      var _this2 = this;\n\n      var self = this;\n      var params = JSON.stringify({\n        project_id: Number(self.$route.params.project_id),\n        api_id: Number(self.$route.params.api_id),\n        id: Number(row.id)\n      });\n      var headers = {\n        \"Content-Type\": \"application/json\",\n        Authorization: 'Token ' + sessionStorage.getItem('token')\n      };\n      axios.post(test + \"/api/api/del_history\", params, {\n        headers: headers\n      }).then(function (response) {\n        if (response.data.code === '999999') {\n          _this2.getHistory();\n\n          self.$message.success({\n            message: \"删除成功！\",\n            center: true\n          });\n        } else {\n          self.$message.error({\n            message: response.data.msg,\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    getHost: function getHost() {\n      var self = this;\n      var headers = {\n        Authorization: 'Token ' + sessionStorage.getItem('token')\n      };\n      var params = {\n        project_id: self.$route.params.project_id,\n        page: self.page,\n        name: \"\",\n        type: \"env\"\n      };\n      axios.get(\"\".concat(test, \"/api/project/config_list\"), {\n        params: params,\n        headers: headers\n      }).then(function (res) {\n        var data = res.data;\n\n        if (data.code === '999999') {\n          data.data.data.forEach(function (item) {\n            if (item.status) {\n              self.Host.push(item);\n            }\n          });\n        } else {\n          self.$message.error({\n            message: data.msg,\n            center: true\n          });\n        }\n      });\n    },\n    Test: function Test() {\n      var _this3 = this;\n\n      this.$refs.form.validate(function (valid) {\n        if (valid) {\n          _this3.loadingSend = true;\n          var self = _this3;\n\n          var _parameter = new Object();\n\n          var headers = new Object();\n          self.form.statusCode = '';\n          self.form.resultData = '';\n          self.form.resultHead = '';\n          var head = _this3.$refs.apiRequest.head;\n\n          for (var i = 0; i < head.length; i++) {\n            var a = head[i][\"name\"];\n\n            if (a) {\n              headers[a] = head[i][\"value\"];\n            }\n          }\n\n          var address = _this3.form.addr;\n          var url = \"\";\n          var env = \"\";\n\n          if (address.indexOf(\"http://\") === 0 || address.indexOf(\"https://\") === 0) {\n            url = address;\n            if (self.form.env != \"\") env = self.form.env;\n          } else {\n            url = self.form.http + \"://\" + self.form.env + address;\n          }\n\n          var contentType = _this3.$refs.apiRequest.requestParameterType;\n          var parameters = _this3.$refs.apiRequest.parameters;\n\n          if (contentType === 'application/x-www-form-urlencoded' || contentType === 'application/json' || contentType === 'text/plain') {\n            for (var _i = 0; _i < parameters.length; _i++) {\n              var a = parameters[_i][\"name\"];\n\n              if (a) {\n                if (parameters[_i][\"_type\"] == \"Object\" || parameters[_i][\"_type\"] == \"Array\") {\n                  _parameter[a] = JSON.parse(parameters[_i][\"value\"]);\n                } else {\n                  _parameter[a] = parameters[_i][\"value\"];\n                }\n              }\n            }\n          } else {\n            // POST(url, self.form.parameterRaw, headers)\n            _parameter = _this3.$refs.apiRequest.parameterRaw;\n          }\n\n          var params = JSON.stringify({\n            project_id: self.$route.params.project_id,\n            api_id: self.$route.params.api_id,\n            url: url,\n            headers: headers,\n            data: _parameter,\n            env: env\n          });\n          axios.post(test + \"/api/api/run_api\", params, {\n            headers: {\n              \"Content-Type\": \"application/json\",\n              Authorization: 'Token ' + sessionStorage.getItem('token')\n            }\n          }).then(function (response) {\n            self.loadingSend = false;\n            self.form.statusCode = response.data[\"data\"][\"result\"][0];\n            self.form.resultData = response.data[\"data\"][\"result\"][1];\n            self.form.resultHead = response.data[\"data\"][\"result\"][2]; //                                self.AddHistroy(jqXHR.status)\n          }).catch(function (error) {});\n        }\n      });\n    },\n    neatenFormat: function neatenFormat() {\n      this.format = !this.format;\n    },\n    showBody: function showBody() {\n      this.resultShow = true;\n    },\n    showHeader: function showHeader() {\n      this.resultShow = false;\n    },\n    handleChange: function handleChange(val) {},\n    onSubmit: function onSubmit() {\n      console.log('submit!');\n    }\n  },\n  mounted: function mounted() {\n    this.getApiInfo();\n    this.getHistory();\n  }\n};",null]}