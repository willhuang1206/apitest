{"remainingRequest":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/babel-loader/lib/index.js!/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/huangrong/workspace/apitest/apitest-web/src/views/project/api/testApi.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/huangrong/workspace/apitest/apitest-web/src/views/project/api/testApi.vue","mtime":1588816148402},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _typeof from \"/Users/huangrong/workspace/apitest/apitest-web/node_modules/@babel/runtime-corejs2/helpers/esm/typeof\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { test } from '@/api/api';\nimport ApiRequest from \"./apiRequest.vue\";\nimport $ from 'jquery';\nimport axios from 'axios';\nexport default {\n  components: {\n    ApiRequest: ApiRequest\n  },\n  data: function data() {\n    return {\n      request: [{\n        value: 'GET',\n        label: 'GET'\n      }, {\n        value: 'POST',\n        label: 'POST'\n      }, {\n        value: 'PUT',\n        label: 'PUT'\n      }, {\n        value: 'DELETE',\n        label: 'DELETE'\n      }],\n      Http: [{\n        value: 'http',\n        label: 'HTTP'\n      }, {\n        value: 'https',\n        label: 'HTTPS'\n      }],\n      loadingSend: false,\n      result: true,\n      activeNames: ['2', '3', '4', '5'],\n      id: \"\",\n      Host: [],\n      form: {\n        url: \"\",\n        method: 'POST',\n        http: 'http',\n        addr: '',\n        statusCode: \"\",\n        resultData: \"\",\n        resultHead: \"\"\n      },\n      formRules: {\n        env: [{\n          required: true,\n          message: '请选择测试环境',\n          trigger: 'blur'\n        }],\n        addr: [{\n          required: true,\n          message: '请输入地址',\n          trigger: 'blur'\n        }]\n      },\n      requestHistory: [],\n      listLoading: false,\n      headers: \"\",\n      parameters: \"\",\n      resultShow: true,\n      format: false,\n      type: \"\"\n    };\n  },\n  methods: {\n    isJsonString: function isJsonString(str) {\n      try {\n        if (_typeof(JSON.parse(str)) === \"object\") {\n          return true;\n        }\n      } catch (e) {}\n\n      return false;\n    },\n    getApiInfo: function getApiInfo() {\n      var _this = this;\n\n      var self = this;\n      var param = {\n        project_id: self.$route.params.project_id,\n        api_id: self.$route.params.api_id\n      };\n      axios.get(test + \"/api/api/api_info\", {\n        params: param\n      }).then(function (response) {\n        var data = response.data;\n\n        if (response.data.code === '999999') {\n          self.form.method = data.data.requestType;\n          self.form.http = data.data.httpType.toLowerCase();\n          self.form.addr = data.data.apiAddress;\n\n          if (data.data.headers.length) {\n            data.data.headers.forEach(function (item) {\n              _this.$refs.apiRequest.addHead(item);\n            });\n          } else {\n            _this.$refs.apiRequest.addEmptyHead();\n          }\n\n          if (data.data.requestParameter.length) {\n            data.data.requestParameter.forEach(function (item) {\n              _this.$refs.apiRequest.addParameter(item);\n            });\n          } else {\n            _this.$refs.apiRequest.addEmptyParameter();\n          }\n\n          try {\n            _this.$refs.apiRequest.requestParameter.parameterRaw = data.data.requestParameterRaw[0].data;\n          } catch (e) {}\n\n          _this.$refs.apiRequest.requestParameterType = data.data.requestParameterType;\n          self.type = data.data.type;\n          self.getHost();\n        } else {\n          self.$message.error({\n            message: data.msg,\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    getHistory: function getHistory() {\n      var self = this;\n      this.listLoading = true;\n      var params = {\n        project_id: this.$route.params.project_id,\n        api_id: self.$route.params.api_id\n      };\n      axios.get(test + \"/api/api/history_list\", {\n        params: params\n      }).then(function (response) {\n        self.listLoading = false;\n\n        if (response.data.code === '999999') {\n          self.requestHistory = response.data.data; // data.data.data.forEach((item) => {\n          //     self.requestHistory.push(item)\n          // })\n        } else {\n          self.$message.error({\n            message: response.data.msg,\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    AddHistroy: function AddHistroy(code) {\n      var self = this;\n      this.listLoading = true;\n      var params = JSON.stringify({\n        project_id: Number(this.$route.params.project_id),\n        api_id: Number(self.$route.params.api_id),\n        requestType: self.form.method,\n        requestAddress: self.form.http + \"://\" + self.form.env + self.form.addr,\n        httpCode: code\n      });\n      var headers = {\n        \"Content-Type\": \"application/json\",\n        Authorization: 'Token ' + sessionStorage.getItem('token')\n      };\n      axios.post(test + \"/api/api/add_history\", params, {\n        headers: headers\n      }).then(function (response) {\n        self.listLoading = false;\n\n        if (response.data.code === '999999') {\n          self.getHistory();\n        } else {\n          self.$message.error({\n            message: response.data.msg,\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    delHistory: function delHistory(row) {\n      var _this2 = this;\n\n      var self = this;\n      var params = JSON.stringify({\n        project_id: Number(self.$route.params.project_id),\n        api_id: Number(self.$route.params.api_id),\n        id: Number(row.id)\n      });\n      var headers = {\n        \"Content-Type\": \"application/json\",\n        Authorization: 'Token ' + sessionStorage.getItem('token')\n      };\n      axios.post(test + \"/api/api/del_history\", params, {\n        headers: headers\n      }).then(function (response) {\n        if (response.data.code === '999999') {\n          _this2.getHistory();\n\n          self.$message.success({\n            message: \"删除成功！\",\n            center: true\n          });\n        } else {\n          self.$message.error({\n            message: response.data.msg,\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    getHost: function getHost() {\n      var self = this;\n      var headers = {\n        Authorization: 'Token ' + sessionStorage.getItem('token')\n      };\n      var params = {\n        project_id: self.$route.params.project_id,\n        page: self.page,\n        name: \"\",\n        type: \"env\"\n      };\n      axios.get(\"\".concat(test, \"/api/project/config_list\"), {\n        params: params,\n        headers: headers\n      }).then(function (res) {\n        var data = res.data;\n\n        if (data.code === '999999') {\n          data.data.data.forEach(function (item) {\n            if (item.status) {\n              self.Host.push(item);\n            }\n          });\n        } else {\n          self.$message.error({\n            message: data.msg,\n            center: true\n          });\n        }\n      });\n    },\n    Test: function Test() {\n      var _this3 = this;\n\n      this.$refs.form.validate(function (valid) {\n        if (valid) {\n          _this3.loadingSend = true;\n          var self = _this3;\n\n          var _parameter = new Object();\n\n          var headers = new Object();\n          self.form.statusCode = '';\n          self.form.resultData = '';\n          self.form.resultHead = '';\n          var head = _this3.$refs.apiRequest.head;\n\n          for (var i = 0; i < head.length; i++) {\n            var a = head[i][\"name\"];\n\n            if (a) {\n              headers[a] = head[i][\"value\"];\n            }\n          }\n\n          var address = _this3.form.addr;\n          var url = \"\";\n          var env = \"\";\n\n          if (address.indexOf(\"http://\") === 0 || address.indexOf(\"https://\") === 0) {\n            url = address;\n            if (self.form.env != \"\") env = self.form.env;\n          } else {\n            url = self.form.http + \"://\" + self.form.env + address;\n          }\n\n          var contentType = _this3.$refs.apiRequest.requestParameterType;\n          var parameters = _this3.$refs.apiRequest.parameters;\n\n          if (contentType === 'application/x-www-form-urlencoded' || contentType === 'application/json' || contentType === 'text/plain') {\n            for (var _i = 0; _i < parameters.length; _i++) {\n              var a = parameters[_i][\"name\"];\n\n              if (a) {\n                if (parameters[_i][\"_type\"] == \"Object\" || parameters[_i][\"_type\"] == \"Array\") {\n                  _parameter[a] = JSON.parse(parameters[_i][\"value\"]);\n                } else {\n                  _parameter[a] = parameters[_i][\"value\"];\n                }\n              }\n            }\n          } else {\n            // POST(url, self.form.parameterRaw, headers)\n            _parameter = _this3.$refs.apiRequest.parameterRaw;\n          }\n\n          var params = JSON.stringify({\n            project_id: self.$route.params.project_id,\n            api_id: self.$route.params.api_id,\n            url: url,\n            headers: headers,\n            data: _parameter,\n            env: env\n          });\n          axios.post(test + \"/api/api/run_api\", params, {\n            headers: {\n              \"Content-Type\": \"application/json\",\n              Authorization: 'Token ' + sessionStorage.getItem('token')\n            }\n          }).then(function (response) {\n            self.loadingSend = false;\n            self.form.statusCode = response.data[\"data\"][\"result\"][0];\n            self.form.resultData = response.data[\"data\"][\"result\"][1];\n            self.form.resultHead = response.data[\"data\"][\"result\"][2]; //                                self.AddHistroy(jqXHR.status)\n          }).catch(function (error) {});\n        }\n      });\n    },\n    neatenFormat: function neatenFormat() {\n      this.format = !this.format;\n    },\n    showBody: function showBody() {\n      this.resultShow = true;\n    },\n    showHeader: function showHeader() {\n      this.resultShow = false;\n    },\n    handleChange: function handleChange(val) {},\n    onSubmit: function onSubmit() {\n      console.log('submit!');\n    }\n  },\n  mounted: function mounted() {\n    this.getApiInfo();\n    this.getHistory();\n  }\n};",{"version":3,"sources":["testApi.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <section>\n        <el-form :model=\"form\" ref=\"form\" :rules=\"formRules\">\n            <el-col :span=\"3\" class=\"HOST\">\n                <el-form-item prop=\"env\">\n                    <el-select v-model=\"form.env\"  placeholder=\"测试环境\">\n                        <el-option v-for=\"(item,index) in Host\" :key=\"index+''\" :label=\"item.name\" :value=\"item.name\"></el-option>\n                    </el-select>\n                </el-form-item>\n            </el-col>\n            <div style=\"border: 1px solid #e6e6e6;margin-bottom: 10px; padding:15px; padding-bottom: 0px\">\n                <el-row :gutter=\"10\">\n                    <el-col :span=\"3\">\n                        <el-form-item >\n                            <el-select v-model=\"form.method\"  placeholder=\"请求方式\">\n                                <el-option v-for=\"(item,index) in request\" :key=\"index+''\" :label=\"item.label\" :value=\"item.value\"></el-option>\n                            </el-select>\n                        </el-form-item>\n                    </el-col>\n                    <el-col :span='18'>\n                        <el-form-item prop=\"addr\">\n                            <el-input v-model.trim=\"form.addr\" placeholder=\"地址\" auto-complete></el-input>\n                        </el-form-item>\n                    </el-col>\n                    <el-col :span='2'>\n                        <el-button type=\"primary\" @click=\"Test\" :loading=\"loadingSend\">执行</el-button>\n                    </el-col>\n                </el-row>\n            </div>\n            <el-row :span=\"24\">\n                <el-collapse v-model=\"activeNames\" @change=\"handleChange\">\n                    <ApiRequest ref=\"apiRequest\"/>\n                    <el-collapse-item title=\"响应结果\" name=\"4\">\n                        <div style=\"margin-bottom: 10px\">\n                            <el-button @click=\"showBody\">Body</el-button>\n                            <el-button @click=\"showHeader\">Head</el-button>\n                            <el-button type=\"primary\" @click=\"format = !format\">格式转换</el-button>\n                        </div>\n                        <el-card class=\"box-card\">\n                            <!--<div slot=\"header\" class=\"clearfix\">-->\n                                <!--<span v-model=\"form.statusCode\" style=\"font-size: 25px\">{{form.statusCode}}</span>-->\n                            <!--</div>-->\n                            <div v-model=\"form.resultData\" :class=\"resultShow? 'parameter-a': 'parameter-b'\" v-show=\"!format\">\n                                <div style=\"word-break: break-all;overflow:auto;overflow-x:hidden\">\n                                    {{form.resultData}}\n                                </div>\n                            </div>\n                            <div v-model=\"form.resultHead\" :class=\"resultShow? 'parameter-b': 'parameter-a'\">{{form.resultHead}}</div>\n                            <div :class=\"resultShow? 'parameter-a': 'parameter-b'\" v-show=\"format\">\n                              <json-viewer :value=\"form.resultData\" :expand-depth=5 copyable></json-viewer>\n                            </div>\n                            <div v-show=\"!form.resultData&&!form.resultHead\" class=\"raw\">暂无数据</div>\n                        </el-card>\n                    </el-collapse-item>\n                    <el-collapse-item title=\"请求历史\" name=\"5\" v-show=\"false\">\n                        <el-table :data=\"requestHistory\" stripe style=\"width: 100%\" v-loading=\"listLoading\">\n                            <el-table-column prop=\"requestTime\" label=\"操作时间\" min-width=\"20%\">\n                            </el-table-column>\n                            <el-table-column prop=\"requestType\" label=\"请求方式\" min-width=\"10%\">\n                            </el-table-column>\n                            <el-table-column prop=\"requestAddress\" label=\"请求地址\" min-width=\"49%\">\n                            </el-table-column>\n                            <el-table-column prop=\"httpCode\" label=\"HTTP状态\" min-width=\"11%\">\n                            </el-table-column>\n                            <el-table-column min-width=\"10%\" label=\"操作\">\n                                <template slot-scope=\"scope\">\n                                    <i class=\"el-icon-delete\" style=\"font-size:30px;cursor:pointer;\" @click=\"delHistory(scope.row)\"></i>\n                                </template>\n                            </el-table-column>\n                        </el-table>\n                    </el-collapse-item>\n                </el-collapse>\n            </el-row>\n        </el-form>\n    </section>\n</template>\n<script>\n    import { test } from '@/api/api'\n    import ApiRequest from './apiRequest.vue'\n    import $ from 'jquery'\n    import axios from 'axios'\n    export default {\n        components: {ApiRequest},\n        data() {\n            return {\n                request: [{value: 'GET', label: 'GET'},\n                    {value: 'POST', label: 'POST'},\n                    {value: 'PUT', label: 'PUT'},\n                    {value: 'DELETE', label: 'DELETE'}],\n                Http: [{value: 'http', label: 'HTTP'},\n                    {value: 'https', label: 'HTTPS'}],\n                loadingSend: false,\n                result: true,\n                activeNames: ['2', '3', '4', '5'],\n                id: \"\",\n                Host: [],\n                form: {\n                    url: \"\",\n                    method: 'POST',\n                    http: 'http',\n                    addr: '',\n                    statusCode: \"\",\n                    resultData: \"\",\n                    resultHead: \"\",\n                },\n                formRules: {\n                    env: [\n                        { required: true, message: '请选择测试环境', trigger: 'blur'}\n                    ],\n                    addr: [\n                        { required: true, message: '请输入地址', trigger: 'blur' },\n                    ]\n                },\n                requestHistory: [],\n                listLoading: false,\n                headers: \"\",\n                parameters: \"\",\n                resultShow: true,\n                format: false,\n                type:\"\"\n            }\n        },\n        methods: {\n            isJsonString(str) {\n                try {\n                    if (typeof JSON.parse(str) === \"object\") {\n                        return true;\n                    }\n                } catch(e) {\n                }\n                return false;\n            },\n            getApiInfo() {\n                let self = this;\n                let param = {project_id: self.$route.params.project_id, api_id: self.$route.params.api_id};\n                axios.get(test+\"/api/api/api_info\", {params:param}).then(response => {\n                    let data=response.data;\n                    if (response.data.code === '999999') {\n                        self.form.method = data.data.requestType;\n                        self.form.http = data.data.httpType.toLowerCase();\n                        self.form.addr = data.data.apiAddress;\n                        if (data.data.headers.length) {\n                            data.data.headers.forEach((item) => {\n                                this.$refs.apiRequest.addHead(item);\n                            });\n                        } else {\n                            this.$refs.apiRequest.addEmptyHead();\n                        }\n                        if (data.data.requestParameter.length) {\n                            data.data.requestParameter.forEach((item) => {\n                                this.$refs.apiRequest.addParameter(item);\n                            });\n                        } else {\n                            this.$refs.apiRequest.addEmptyParameter();\n                        }\n                        try {\n                            this.$refs.apiRequest.requestParameter.parameterRaw = data.data.requestParameterRaw[0].data;\n                        } catch (e) {\n\n                        }\n                        this.$refs.apiRequest.requestParameterType = data.data.requestParameterType;\n                        self.type=data.data.type;\n                        self.getHost();\n                    }else {\n                        self.$message.error({\n                            message: data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            getHistory() {\n                let self = this;\n                this.listLoading = true;\n                let params={project_id: this.$route.params.project_id, api_id: self.$route.params.api_id};\n                axios.get(test+\"/api/api/history_list\", { params: params}).then(response => {\n                    self.listLoading = false;\n                    if (response.data.code === '999999') {\n                        self.requestHistory = response.data.data\n                        // data.data.data.forEach((item) => {\n                        //     self.requestHistory.push(item)\n                        // })\n                    }\n                    else {\n                        self.$message.error({\n                            message: response.data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            AddHistroy(code) {\n                let self = this;\n                this.listLoading = true;\n                let params = JSON.stringify({ project_id: Number(this.$route.params.project_id),\n                    api_id: Number(self.$route.params.api_id),\n                    requestType :self.form.method,\n                    requestAddress: self.form.http + \"://\" + self.form.env + self.form.addr,\n                    httpCode: code\n                });\n                let headers={\"Content-Type\": \"application/json\",Authorization: 'Token '+sessionStorage.getItem('token')};\n                axios.post(test+\"/api/api/add_history\", params,{ headers: headers}).then(response => {\n                    self.listLoading = false;\n                    if (response.data.code === '999999') {\n                        self.getHistory()\n                    }\n                    else {\n                        self.$message.error({\n                            message: response.data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            delHistory(row) {\n                let self = this;\n                let params = JSON.stringify({\n                    project_id: Number(self.$route.params.project_id),\n                    api_id: Number(self.$route.params.api_id),\n                    id: Number(row.id)\n                });\n                let headers={\"Content-Type\": \"application/json\",Authorization: 'Token '+sessionStorage.getItem('token')};\n                axios.post(test+\"/api/api/del_history\", params,{ headers: headers}).then(response => {\n                    if (response.data.code === '999999') {\n                        this.getHistory();\n                        self.$message.success({\n                            message: \"删除成功！\",\n                            center: true,\n                        })\n                    }\n                    else {\n                        self.$message.error({\n                            message: response.data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            getHost() {\n                let self = this;\n                let headers = {\n                    Authorization: 'Token '+sessionStorage.getItem('token')\n                };\n                let params={project_id: self.$route.params.project_id,page: self.page, name: \"\", type: \"env\"};\n                axios.get(`${test}/api/project/config_list`, { params: params, headers:headers}).then(res => {\n                    let data=res.data;\n                    if (data.code === '999999') {\n                        data.data.data.forEach((item) => {\n                            if (item.status) {\n                                self.Host.push(item)\n                            }\n                        })\n                    }else {\n                        self.$message.error({\n                            message: data.msg,\n                            center: true,\n                        })\n                    }\n                });\n            },\n            Test: function() {\n                this.$refs.form.validate((valid) => {\n                    if (valid) {\n                        this.loadingSend = true;\n                        let self = this;\n                        let _parameter = new Object();\n                        let headers = new Object();\n                        self.form.statusCode = '';\n                        self.form.resultData = '';\n                        self.form.resultHead = '';\n                        let head=this.$refs.apiRequest.head;\n                        for (let i = 0; i < head.length; i++) {\n                            var a = head[i][\"name\"];\n                            if (a) {\n                                headers[a] = head[i][\"value\"]\n                            }\n                        }\n                        let address = this.form.addr;\n                        let url=\"\";\n                        let env=\"\";\n                        if (address.indexOf(\"http://\") ===0||address.indexOf(\"https://\") ===0){\n                            url=address;\n                            if(self.form.env!=\"\")env=self.form.env;\n                        }else{\n                            url = self.form.http + \"://\" + self.form.env + address;\n                        }\n                        let contentType = this.$refs.apiRequest.requestParameterType;\n                        let parameters=this.$refs.apiRequest.parameters;\n                        if ( contentType === 'application/x-www-form-urlencoded'||contentType === 'application/json'||contentType === 'text/plain') {\n                            for (let i = 0; i < parameters.length; i++) {\n                                var a = parameters[i][\"name\"];\n                                if (a) {\n                                    if(parameters[i][\"_type\"]==\"Object\"||parameters[i][\"_type\"]==\"Array\"){\n                                        _parameter[a] = JSON.parse(parameters[i][\"value\"]);\n                                    }else{\n                                        _parameter[a] = parameters[i][\"value\"];\n                                    }\n                                }\n                            }\n                        } else {\n                            // POST(url, self.form.parameterRaw, headers)\n                            _parameter = this.$refs.apiRequest.parameterRaw;\n                        }\n                        let params = JSON.stringify({project_id:self.$route.params.project_id,api_id: self.$route.params.api_id,url:url,headers:headers,data:_parameter,env:env});\n                        axios.post(test+\"/api/api/run_api\", params,{ headers:{\"Content-Type\": \"application/json\",Authorization: 'Token '+sessionStorage.getItem('token')} }).then(response => {\n                            self.loadingSend = false;\n                            self.form.statusCode = response.data[\"data\"][\"result\"][0];\n                            self.form.resultData = response.data[\"data\"][\"result\"][1];\n                            self.form.resultHead = response.data[\"data\"][\"result\"][2];\n//                                self.AddHistroy(jqXHR.status)\n                        }).catch(error=>{\n                        });\n                    }\n                })\n            },\n            neatenFormat() {\n                this.format = !this.format;\n            },\n            showBody() {\n                this.resultShow = true\n            },\n            showHeader() {\n                this.resultShow = false\n            },\n            handleChange(val) {\n            },\n            onSubmit() {\n                console.log('submit!');\n            },\n        },\n        mounted() {\n            this.getApiInfo();\n            this.getHistory()\n        }\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n    .return-list {\n        margin-top: 0px;\n        margin-bottom: 10px;\n        border-radius: 25px;\n    }\n    .head-class {\n        font-size: 17px\n    }\n    .parameter-a {\n        display: block;\n    }\n    .parameter-b {\n        display: none;\n    }\n    .selectInput {\n        position: absolute;\n        /*margin-left: 7px;*/\n        padding-left: 9px;\n        width: 180px;\n        /*border-radius:0px;*/\n        /*height: 38px;*/\n        left: 1px;\n        border-right: 0px;\n    }\n    .HOST {\n        position: absolute;\n        right: 30px;\n        top: 0px;\n    }\n    .raw {\n        border: 1px solid #e6e6e6;\n        margin-bottom: 10px;\n        padding:15px;\n        text-align: center\n    }\n</style>\n<style lang=\"scss\">\n    .selectInput{\n        input{\n            border-right: 0px;\n            border-radius: 4px 0px 0px 4px;\n        }\n    }\n</style>\n"],"sourceRoot":"src/views/project/api"}]}