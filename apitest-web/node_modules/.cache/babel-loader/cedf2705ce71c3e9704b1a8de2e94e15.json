{"remainingRequest":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/thread-loader/dist/cjs.js!/Users/huangrong/workspace/apitest/apitest-web/node_modules/babel-loader/lib/index.js!/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/huangrong/workspace/apitest/apitest-web/src/views/project/auto/autoReport.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/huangrong/workspace/apitest/apitest-web/src/views/project/auto/autoReport.vue","mtime":1588923684861},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { test } from \"../../../api/api\";\nimport $ from 'jquery';\nimport axios from 'axios';\nexport default {\n  name: \"automation-report\",\n  data: function data() {\n    return {\n      project_id: this.$route.params.project_id,\n      automation_id: this.$route.params.automation_id,\n      type: \"autoChart\",\n      global: false,\n      report: {\n        visible: false,\n        data: {}\n      },\n      filters: {\n        name: \"\",\n        testtime: this.defaultDate(),\n        start_time: \"\",\n        end_time: \"\",\n        project: \"\"\n      },\n      projectlist: [],\n      listType: [{\n        value: 'autoChart',\n        label: '用例执行统计'\n      }, {\n        value: 'apiChart',\n        label: '接口执行统计'\n      }, {\n        value: 'publish',\n        label: '发布项目统计'\n      }, {\n        value: 'case',\n        label: '用例执行情况'\n      }, {\n        value: 'task',\n        label: '任务执行情况'\n      }, {\n        value: 'apiAutomated',\n        label: '接口覆盖统计'\n      }, {\n        value: 'dynamicChart',\n        label: '项目动态统计'\n      }],\n      summaryTable: {\n        loading: false,\n        visible: false,\n        list: [],\n        page: 1,\n        pages: 0,\n        total: 0,\n        pageSize: 20\n      },\n      resultTable: {\n        loading: false,\n        visible: false,\n        list: [],\n        page: 1,\n        pages: 0,\n        total: 0,\n        pageSize: 20\n      },\n      detailTable: {\n        loading: false,\n        visible: false,\n        list: [],\n        parentResult: null\n      },\n      apiAutomatedTable: {\n        loading: false,\n        visible: false,\n        list: [],\n        page: 1,\n        pages: 0,\n        total: 0\n      },\n      stepTable: {\n        visible: false,\n        list: [],\n        name: \"\"\n      },\n      autoChart: {\n        visible: false\n      },\n      publishChart: {\n        visible: false\n      },\n      failChart: {\n        visible: false\n      },\n      failType: {\n        'code': '编码',\n        'env': '环境',\n        'data': '数据',\n        'other': '其他'\n      },\n      severity: [{\n        value: 'fatal',\n        label: '致命的'\n      }, {\n        value: 'critical',\n        label: '严重的'\n      }, {\n        value: 'major',\n        label: '一般的'\n      }, {\n        value: 'minor',\n        label: '微小的'\n      }],\n      failForm: {\n        visible: false,\n        loading: false,\n        data: {\n          id: \"\",\n          type: \"code\",\n          severity: \"major\",\n          cause: \"\",\n          detail: \"\",\n          bug: \"\"\n        },\n        row: null,\n        rules: {\n          type: [{\n            required: true,\n            message: '请选择类型',\n            trigger: 'blur'\n          }],\n          severity: [{\n            required: true,\n            message: '请选择严重等级',\n            trigger: 'blur'\n          }],\n          cause: [{\n            required: true,\n            message: '请输入根源',\n            trigger: 'blur'\n          }, {\n            max: 256,\n            message: '不能超过256个字符',\n            trigger: 'blur'\n          }],\n          detail: [{\n            required: true,\n            message: '请输入详情',\n            trigger: 'blur'\n          }, {\n            max: 1024,\n            message: '不能超过1024个字符',\n            trigger: 'blur'\n          }],\n          bug: [{\n            max: 50,\n            message: '不能超过50个字符',\n            trigger: 'blur'\n          }]\n        }\n      },\n      pickerOptions: {\n        shortcuts: [{\n          text: '今天',\n          onClick: function onClick(picker) {\n            var end = new Date();\n            var start = new Date();\n            picker.$emit('pick', [start, end]);\n          }\n        }, {\n          text: '昨天',\n          onClick: function onClick(picker) {\n            var end = new Date();\n            end.setDate(end.getDate() - 1);\n            var start = new Date();\n            start.setDate(start.getDate() - 1);\n            picker.$emit('pick', [start, end]);\n          }\n        }, {\n          text: '本周',\n          onClick: function onClick(picker) {\n            var end = new Date();\n            var weekday = end.getDay() || 7;\n            var start = new Date();\n            start.setDate(start.getDate() - weekday + 1);\n            picker.$emit('pick', [start, end]);\n          }\n        }, {\n          text: '上周',\n          onClick: function onClick(picker) {\n            var end = new Date();\n            var weekday = end.getDay() || 7;\n            end.setDate(end.getDate() - weekday);\n            var start = new Date();\n            start.setDate(end.getDate() - 6);\n            picker.$emit('pick', [start, end]);\n          }\n        }, {\n          text: '最近一周',\n          onClick: function onClick(picker) {\n            var end = new Date();\n            var start = new Date();\n            start.setDate(start.getDate() - 6);\n            picker.$emit('pick', [start, end]);\n          }\n        }, {\n          text: '本月',\n          onClick: function onClick(picker) {\n            var end = new Date();\n            var start = new Date();\n            start.setDate(1);\n            picker.$emit('pick', [start, end]);\n          }\n        }, {\n          text: '最近一个月',\n          onClick: function onClick(picker) {\n            var end = new Date();\n            var start = new Date();\n            start.setTime(start.getTime() - 3600 * 1000 * 24 * 29);\n            picker.$emit('pick', [start, end]);\n          }\n        }, {\n          text: '最近三个月',\n          onClick: function onClick(picker) {\n            var end = new Date();\n            var start = new Date();\n            start.setTime(start.getTime() - 3600 * 1000 * 24 * 89);\n            picker.$emit('pick', [start, end]);\n          }\n        }, {\n          text: '今年',\n          onClick: function onClick(picker) {\n            var end = new Date();\n            var start = new Date();\n            start.setMonth(0);\n            start.setDate(1);\n            picker.$emit('pick', [start, end]);\n          }\n        }]\n      }\n    };\n  },\n  methods: {\n    tableRowStyle: function tableRowStyle(row) {\n      if (row.result === 'ERROR' || row.result === 'FAIL') {\n        return \"background-color: #DC143C;\";\n      } else if (row.result === 'TimeOut') {\n        return \"background-color: #FFE4C4;\";\n      }\n    },\n    filterHandler: function filterHandler(value, row, column) {\n      return row.result === value;\n    },\n    handleSearch: function handleSearch(type) {\n      this.apiAutomatedTable.visible = false;\n      this.publishChart.visible = false;\n\n      if (type == \"case\") {\n        this.summaryTable.page = 1;\n        this.autoChart.visible = false;\n        this.failChart.visible = false;\n        this.viewAutomationSummary();\n      } else if (type == \"autoChart\") {\n        this.autoChart.visible = true;\n        this.failChart.visible = true;\n        this.viewAutomationChart();\n        this.viewAutomationSummary();\n      } else if (type == \"apiChart\") {\n        this.autoChart.visible = true;\n        this.failChart.visible = false;\n        this.viewApiChart();\n      } else if (type == \"dynamicChart\") {\n        this.autoChart.visible = true;\n        this.failChart.visible = false;\n        this.viewDynamicChart();\n      } else if (type == \"publish\") {\n        this.resultTable.page = 1;\n        this.autoChart.visible = true;\n        this.publishChart.visible = true;\n        this.failChart.visible = false;\n        this.viewPublishChart();\n        this.viewAutomationResult(type, \"\");\n      } else if (type == \"task\") {\n        this.resultTable.page = 1;\n        this.autoChart.visible = false;\n        this.failChart.visible = false;\n        this.viewAutomationResult(type, \"\");\n      } else if (type == \"apiAutomated\") {\n        this.apiAutomatedTable.page = 1;\n        this.autoChart.visible = false;\n        this.failChart.visible = false;\n        this.viewApiAutomated();\n      }\n    },\n    viewAutomationSummary: function viewAutomationSummary() {\n      if (this.filters.testtime != \"\" && this.filters.testtime != null) {\n        this.filters.start_time = this.filters.testtime[0];\n        this.filters.end_time = this.filters.testtime[1];\n      } else {\n        this.filters.start_time = \"\";\n        this.filters.end_time = \"\";\n      }\n\n      this.summaryTable.visible = true;\n      this.resultTable.visible = false;\n      this.detailTable.visible = false;\n      this.summaryTable.loading = true;\n      var self = this;\n      var param = {\n        project_id: this.project_id,\n        name: this.filters.name,\n        start_time: this.filters.start_time,\n        end_time: this.filters.end_time,\n        page: self.summaryTable.page\n      };\n\n      if (this.filters.start_time != \"\" && this.filters.end_time != \"\") {\n        self.summaryTable.pageSize = 500;\n        param[\"page_size\"] = self.summaryTable.pageSize;\n      } else {\n        self.summaryTable.pageSize = 20;\n        param[\"page_size\"] = self.summaryTable.pageSize;\n      }\n\n      axios.get(test + \"/api/report/automation_summary\", {\n        params: param,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: 'Token ' + sessionStorage.getItem('token')\n        }\n      }).then(function (response) {\n        var data = response.data;\n        self.summaryTable.loading = false;\n\n        if (data.code === '999999') {\n          //                            alert(data.data.data);\n          self.summaryTable.total = data.data.total;\n          self.summaryTable.pages = data.data.pages;\n          self.summaryTable.list = []; //                            alert(data.data.data);\n\n          data.data.data.forEach(function (item) {\n            item[\"passRate\"] = parseFloat((item[\"passed\"] * 100 / item[\"total\"]).toFixed(1));\n            self.summaryTable.list.push(item);\n          });\n        } else {\n          self.$message.error({\n            message: data.msg,\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    viewAutomationChart: function viewAutomationChart() {\n      var _this = this;\n\n      if (this.filters.testtime != \"\" && this.filters.testtime != null) {\n        this.filters.start_time = this.filters.testtime[0];\n        this.filters.end_time = this.filters.testtime[1];\n      } else {\n        this.filters.start_time = \"\";\n        this.filters.end_time = \"\";\n      }\n\n      var self = this;\n      var param = {\n        project_id: this.project_id,\n        start_time: this.filters.start_time,\n        end_time: this.filters.end_time\n      };\n      axios.get(test + \"/api/report/automation_chart\", {\n        params: param,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: 'Token ' + sessionStorage.getItem('token')\n        }\n      }).then(function (response) {\n        var data = response.data;\n\n        if (data.code === '999999') {\n          _this.autoChart.visible = true;\n\n          _this.drawbar(data.data.autoChart, \"autoChart\", \"用例执行统计\", \"bar\");\n\n          if (data.data.failTypeChart.line_name.length > 0) {\n            _this.failChart.visible = true;\n\n            _this.drawpie(data.data.failTypeChart, \"failTypeChart\", \"失败类型\");\n\n            _this.drawpie(data.data.failSeverityChart, \"failSeverityChart\", \"失败严重等级\");\n          } else {\n            _this.failChart.visible = false;\n          }\n        } else {\n          self.$message.error({\n            message: data.msg,\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    viewPublishChart: function viewPublishChart() {\n      var _this2 = this;\n\n      if (this.filters.testtime != \"\" && this.filters.testtime != null) {\n        this.filters.start_time = this.filters.testtime[0];\n        this.filters.end_time = this.filters.testtime[1];\n      } else {\n        this.filters.start_time = \"\";\n        this.filters.end_time = \"\";\n      }\n\n      this.summaryTable.visible = false;\n      this.resultTable.visible = false;\n      this.detailTable.visible = false;\n      this.summaryTable.loading = true;\n      var self = this;\n      var param = {\n        project_id: this.project_id,\n        start_time: this.filters.start_time,\n        end_time: this.filters.end_time\n      };\n      axios.get(test + \"/api/report/publish_chart\", {\n        params: param,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: 'Token ' + sessionStorage.getItem('token')\n        }\n      }).then(function (response) {\n        var data = response.data;\n\n        if (data.code === '999999') {\n          _this2.autoChart.visible = true;\n\n          _this2.drawbar(data.data.publish_chart, \"autoChart\", \"发布项目统计-按日期\", \"bar\");\n\n          _this2.publishChart.visible = true;\n\n          _this2.drawpie(data.data.publish_pie, \"publishChart\", \"发布项目\");\n        } else {\n          self.$message.error({\n            message: data.msg,\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    viewApiChart: function viewApiChart() {\n      var _this3 = this;\n\n      if (this.filters.testtime != \"\" && this.filters.testtime != null) {\n        this.filters.start_time = this.filters.testtime[0];\n        this.filters.end_time = this.filters.testtime[1];\n      } else {\n        this.filters.start_time = \"\";\n        this.filters.end_time = \"\";\n      }\n\n      this.summaryTable.visible = false;\n      this.resultTable.visible = false;\n      this.detailTable.visible = false;\n      this.summaryTable.loading = true;\n      var self = this;\n      var param = {\n        project_id: this.project_id,\n        start_time: this.filters.start_time,\n        end_time: this.filters.end_time\n      };\n      axios.get(test + \"/api/report/api_chart\", {\n        params: param,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: 'Token ' + sessionStorage.getItem('token')\n        }\n      }).then(function (response) {\n        var data = response.data;\n\n        if (data.code === '999999') {\n          _this3.autoChart.visible = true;\n\n          _this3.drawbar1(data.data, \"autoChart\", \"接口执行统计\", \"bar\");\n        } else {\n          self.$message.error({\n            message: data.msg,\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    viewDynamicChart: function viewDynamicChart() {\n      var _this4 = this;\n\n      if (this.filters.testtime != \"\" && this.filters.testtime != null) {\n        this.filters.start_time = this.filters.testtime[0];\n        this.filters.end_time = this.filters.testtime[1];\n      } else {\n        this.filters.start_time = \"\";\n        this.filters.end_time = \"\";\n      }\n\n      this.summaryTable.visible = false;\n      this.resultTable.visible = false;\n      this.detailTable.visible = false;\n      this.summaryTable.loading = true;\n      var self = this;\n      var param = {\n        project_id: this.project_id,\n        start_time: this.filters.start_time,\n        end_time: this.filters.end_time\n      };\n      axios.get(test + \"/api/report/dynamic_chart\", {\n        params: param,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: 'Token ' + sessionStorage.getItem('token')\n        }\n      }).then(function (response) {\n        var data = response.data;\n\n        if (data.code === '999999') {\n          _this4.autoChart.visible = true;\n\n          _this4.drawbar1(data.data, \"autoChart\", \"项目动态统计\", \"bar\");\n        } else {\n          self.$message.error({\n            message: data.msg,\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    drawbar: function drawbar(test_bar_data, chartid, title, type) {\n      var echartBar = this.$echarts.init(document.getElementById(chartid));\n      echartBar.clear();\n      var option = {\n        title: {\n          text: title\n        },\n        tooltip: {\n          trigger: 'axis'\n        },\n        toolbox: {\n          show: true,\n          feature: {\n            mark: {\n              show: true\n            },\n            dataView: {\n              show: true,\n              readOnly: false\n            },\n            magicType: {\n              show: true,\n              type: ['line', 'bar']\n            },\n            restore: {\n              show: true\n            },\n            saveAsImage: {\n              show: true\n            }\n          }\n        },\n        calculable: true,\n        legend: {\n          data: ['执行数', '通过率']\n        },\n        xAxis: [{\n          type: 'category',\n          data: test_bar_data.line_name,\n          axisLabel: {\n            interval: 0,\n            rotate: 30\n          },\n          axisPointer: {\n            type: 'shadow'\n          }\n        }],\n        yAxis: [{\n          type: 'value',\n          name: '执行数'\n        }, {\n          type: 'value',\n          name: '通过率',\n          min: 0,\n          max: 100,\n          interval: 20,\n          axisLabel: {\n            formatter: '{value}%'\n          }\n        }],\n        series: [{\n          name: '执行数',\n          type: type,\n          itemStyle: {\n            normal: {\n              //                                    color:'#7cb5ec',\n              label: {\n                show: true,\n                position: 'top'\n              }\n            }\n          },\n          data: test_bar_data.line_x\n        }, {\n          name: '通过率',\n          type: 'line',\n          smooth: true,\n          yAxisIndex: 1,\n          itemStyle: {\n            normal: {\n              color: '#26B99A',\n              label: {\n                show: true,\n                position: 'top'\n              }\n            }\n          },\n          data: test_bar_data.line_x1\n        }]\n      };\n      echartBar.setOption(option);\n    },\n    drawbar1: function drawbar1(test_bar_data, chartid, title, type) {\n      var echartBar = this.$echarts.init(document.getElementById(chartid));\n      echartBar.clear();\n      var option = {\n        title: {\n          text: title\n        },\n        tooltip: {\n          trigger: 'axis'\n        },\n        toolbox: {\n          show: true,\n          feature: {\n            mark: {\n              show: true\n            },\n            dataView: {\n              show: true,\n              readOnly: false\n            },\n            magicType: {\n              show: true,\n              type: ['line', 'bar']\n            },\n            restore: {\n              show: true\n            },\n            saveAsImage: {\n              show: true\n            }\n          }\n        },\n        calculable: true,\n        legend: {\n          data: ['执行数']\n        },\n        xAxis: [{\n          type: 'category',\n          data: test_bar_data.line_name,\n          axisLabel: {\n            interval: 0,\n            rotate: 30\n          },\n          axisPointer: {\n            type: 'shadow'\n          }\n        }],\n        yAxis: [{\n          type: 'value',\n          name: '执行数'\n        }],\n        series: [{\n          name: '执行数',\n          type: type,\n          itemStyle: {\n            normal: {\n              color: '#7cb5ec',\n              label: {\n                show: true,\n                position: 'top'\n              }\n            }\n          },\n          data: test_bar_data.line_x\n        }]\n      };\n      echartBar.setOption(option);\n    },\n    drawpie: function drawpie(data, chartid, title) {\n      var echartBar = this.$echarts.init(document.getElementById(chartid));\n      echartBar.clear();\n      var option = {\n        title: {\n          text: title + \"统计\"\n        },\n        tooltip: {\n          trigger: 'item',\n          formatter: '{a} <br/>{b} : {c} ({d}%)'\n        },\n        legend: {\n          left: 'center',\n          data: data.line_name\n        },\n        series: [{\n          name: title,\n          type: 'pie',\n          radius: '55%',\n          center: ['50%', '60%'],\n          data: data.line_data,\n          label: {\n            formatter: '{b} : {c} ({d}%)'\n          },\n          emphasis: {\n            itemStyle: {\n              shadowBlur: 10,\n              shadowOffsetX: 0,\n              shadowColor: 'rgba(0, 0, 0, 0.5)'\n            }\n          }\n        }]\n      };\n      echartBar.setOption(option);\n    },\n    viewApiAutomated: function viewApiAutomated() {\n      this.summaryTable.visible = false;\n      this.resultTable.visible = false;\n      this.detailTable.visible = false;\n      this.apiAutomatedTable.visible = true;\n      this.apiAutomatedTable.loading = true;\n      var param = {\n        project_id: this.project_id,\n        page: this.apiAutomatedTable.page\n      };\n      var url = test + \"/api/report/apiautomatedcoverage\";\n      var self = this;\n      axios.get(url, {\n        params: param,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: 'Token ' + sessionStorage.getItem('token')\n        }\n      }).then(function (response) {\n        var data = response.data;\n        self.apiAutomatedTable.loading = false;\n\n        if (data.code === '999999') {\n          self.apiAutomatedTable.list = data.data.data;\n          self.apiAutomatedTable.pages = data.data.pages;\n          self.apiAutomatedTable.total = data.data.total;\n        } else {\n          self.$message.error({\n            message: data.msg,\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    viewAutomationResult: function viewAutomationResult(type, automationId) {\n      this.type = type;\n\n      if (this.filters.testtime != \"\" && this.filters.testtime != null) {\n        this.filters.start_time = this.filters.testtime[0];\n        this.filters.end_time = this.filters.testtime[1];\n      } else {\n        this.filters.start_time = \"\";\n        this.filters.end_time = \"\";\n      }\n\n      this.summaryTable.visible = false;\n      this.resultTable.visible = true;\n      this.detailTable.visible = false;\n      this.resultTable.loading = true;\n      var param = {\n        project_id: this.project_id,\n        start_time: this.filters.start_time,\n        end_time: this.filters.end_time,\n        page: this.resultTable.page,\n        type: this.type\n      };\n      var url = test + \"/api/report/automation_result\";\n\n      if (this.type == \"case\") {\n        if (automationId != \"\") {\n          param[\"automation_id\"] = automationId;\n          this.automation_id = automationId;\n        } else if (this.$route.params.trace) {\n          param[\"trace\"] = this.$route.params.trace;\n        } else {\n          param[\"automation_id\"] = automationId;\n          this.automation_id = param[\"automation_id\"];\n        }\n      } else {\n        url = test + \"/api/report/automations_result\";\n      }\n\n      var self = this;\n      axios.get(url, {\n        params: param,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: 'Token ' + sessionStorage.getItem('token')\n        }\n      }).then(function (response) {\n        var data = response.data;\n        self.resultTable.loading = false;\n\n        if (data.code === '999999') {\n          self.resultTable.list = data.data.data;\n          self.resultTable.pages = data.data.pages;\n          self.resultTable.total = data.data.total;\n          self.resultTable.pageSize = data.data.page_size;\n\n          if (data.data.report) {\n            self.report.visible = true;\n            self.report.data = data.data.report;\n          }\n        } else {\n          self.$message.error({\n            message: data.msg,\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    viewAutomationDetail: function viewAutomationDetail(id, trace) {\n      this.summaryTable.visible = false;\n      this.resultTable.visible = false;\n      this.detailTable.visible = true;\n      this.detailTable.loading = true;\n      var self = this;\n      var param = {\n        automation_id: id,\n        trace: trace\n      };\n      axios.get(test + \"/api/report/automation_detail\", {\n        params: param,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: 'Token ' + sessionStorage.getItem('token')\n        }\n      }).then(function (response) {\n        var data = response.data;\n        self.detailTable.loading = false;\n\n        if (data.code === '999999') {\n          self.detailTable.list = data.data.results;\n          self.detailTable.parentResult = data.data.parentResult;\n        } else {\n          self.$message.error({\n            message: data.msg,\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    // 翻页\n    handleSummaryPage: function handleSummaryPage(val) {\n      this.summaryTable.page = val;\n      this.viewAutomationSummary();\n    },\n    // 翻页\n    handleApiAutomatedTablePage: function handleApiAutomatedTablePage(val) {\n      this.apiAutomatedTable.page = val;\n      this.viewApiAutomated();\n    },\n    handleResultPage: function handleResultPage(val) {\n      this.resultTable.page = val;\n\n      if (this.$route.params.automation_id) {\n        this.viewAutomationResult(this.type, this.$route.params.automation_id);\n      } else {\n        this.viewAutomationResult(this.type, \"\");\n      }\n    },\n    defaultDate: function defaultDate() {\n      //获取新的时间(2019.4.12）\n      var date = new Date(); //获取当前时间的年份转为字符串\n\n      var year = date.getFullYear().toString(); //'2019'\n      //获取月份，由于月份从0开始，此处要加1，判断是否小于10，如果是在字符串前面拼接'0'\n\n      var month = date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1).toString() : (date.getMonth() + 1).toString(); //'04'\n      //获取天，判断是否小于10，如果是在字符串前面拼接'0'\n\n      var da = date.getDate() < 10 ? '0' + date.getDate().toString() : date.getDate().toString(); //'12'\n      //字符串拼接，开始时间，结束时间\n\n      var end = year + '-' + month + '-' + da; //当天'2019-04-12'\n\n      var beg = year + '-' + month + '-01'; //当月第一天'2019-04-01'\n\n      return [beg, end]; //将值设置给插件绑定的数据\n    },\n    handleUpdateFail: function handleUpdateFail(row) {\n      this.failForm.visible = true;\n      this.failForm.data = {\n        id: row.id,\n        type: row.failType,\n        severity: row.failSeverity,\n        cause: row.failCause,\n        detail: row.failDetail,\n        bug: row.failBug\n      };\n      this.failForm.row = row;\n    },\n    updateFailSubmit: function updateFailSubmit() {\n      var _this5 = this;\n\n      this.$refs.failForm.validate(function (valid) {\n        if (valid) {\n          _this5.$confirm('确认提交吗？', '提示', {}).then(function () {\n            var self = _this5;\n            var param = JSON.stringify({\n              project_id: _this5.$route.params.project_id,\n              result_id: _this5.failForm.data.id,\n              type: _this5.failForm.data.type,\n              severity: _this5.failForm.data.severity,\n              cause: _this5.failForm.data.cause,\n              detail: _this5.failForm.data.detail,\n              bug: _this5.failForm.data.bug\n            });\n            axios.post(test + \"/api/report/updateresultfaildetail\", param, {\n              headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: 'Token ' + sessionStorage.getItem('token')\n              }\n            }).then(function (response) {\n              var data = response.data;\n\n              if (response.data.code === '999999') {\n                self.failForm.visible = false;\n                self.failForm.row.failType = _this5.failForm.data.type;\n                self.failForm.row.failSeverity = _this5.failForm.data.severity;\n                self.failForm.row.failCause = _this5.failForm.data.cause;\n                self.failForm.row.failDetail = _this5.failForm.data.detail;\n                self.failForm.row.failBug = _this5.failForm.data.bug;\n                self.$message({\n                  message: '更新成功',\n                  center: true,\n                  type: 'success'\n                });\n              } else {\n                self.$message.error({\n                  message: response.data.msg,\n                  center: true\n                });\n              }\n            }).catch(function (error) {});\n          }).catch(function () {});\n        }\n      });\n    },\n    // 获取项目列表\n    getProjectList: function getProjectList() {\n      this.listLoading = true;\n      var self = this;\n      var params = {\n        page: 1,\n        page_size: 100,\n        status: true\n      };\n      var headers = {\n        Authorization: 'Token ' + sessionStorage.getItem('token')\n      };\n      axios.get(\"\".concat(test, \"/api/project/project_list\"), {\n        params: params,\n        headers: headers\n      }).then(function (res) {\n        var _res$data = res.data,\n            msg = _res$data.msg,\n            code = _res$data.code,\n            data = _res$data.data;\n\n        if (code === '999999') {\n          self.projectlist = data.data;\n        } else {\n          self.$message.error({\n            message: msg,\n            center: true\n          });\n        }\n      });\n    },\n    init: function init() {\n      this.autoChart.visible = false;\n      this.failChart.visible = false;\n\n      if (this.$route.params.project_id) {\n        this.project_id = this.$route.params.project_id;\n        this.global = false;\n      } else {\n        this.global = true;\n        this.getProjectList();\n      }\n\n      if (this.$route.params.automation_id) {\n        this.automation_id = this.$route.params.automation_id;\n\n        if (!this.$route.params.trace) {\n          this.viewAutomationResult('case', this.automation_id);\n        } else {\n          this.viewAutomationDetail(this.$route.params.automation_id, this.$route.params.trace);\n        }\n      } else if (this.$route.params.trace) {\n        this.viewAutomationResult('case', \"\");\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.init();\n  },\n  watch: {\n    '$route': function $route(to, from) {\n      //监听路由是否变化\n      if (to.query != from.query) {\n        this.init(); //重新加载数据\n      }\n    }\n  }\n};",null]}