{"remainingRequest":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/babel-loader/lib/index.js!/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/huangrong/workspace/apitest/apitest-web/src/views/project/auto/autoStepList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/huangrong/workspace/apitest/apitest-web/src/views/project/auto/autoStepList.vue","mtime":1590558683770},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/huangrong/workspace/apitest/apitest-web/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.number.constructor\");\n\nrequire(\"core-js/modules/es6.function.name\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nvar _defineProperty2 = _interopRequireDefault(require(\"/Users/huangrong/workspace/apitest/apitest-web/node_modules/@babel/runtime-corejs2/helpers/defineProperty\"));\n\nvar _vueTreeselect = _interopRequireDefault(require(\"@riophae/vue-treeselect\"));\n\nrequire(\"@riophae/vue-treeselect/dist/vue-treeselect.css\");\n\nvar _api = require(\"../../../api/api\");\n\nvar _sortablejs = _interopRequireDefault(require(\"sortablejs\"));\n\nvar _jquery = _interopRequireDefault(require(\"jquery\"));\n\nvar _moment = _interopRequireDefault(require(\"moment\"));\n\nvar _axios = _interopRequireDefault(require(\"axios\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// import the styles\n//    import SelectTree from \"../../../components/treeSelect.vue\";\nvar _default = {\n  components: {\n    Treeselect: _vueTreeselect.default\n  },\n  //        inject: [\"reload\"],\n  data: function data() {\n    var _ref;\n\n    return _ref = {\n      automationType: [{\n        value: 'case',\n        label: '普通用例'\n      }, {\n        value: 'reuse',\n        label: '可复用用例'\n      }, {\n        value: 'list',\n        label: '用例集'\n      }, {\n        value: 'data',\n        label: '数据用例'\n      }, {\n        value: 'monitor',\n        label: '接口监控'\n      }],\n      currentType: \"\",\n      result_color: {\n        \"PASS\": \"color:green\",\n        \"FAIL\": \"color:red\"\n      },\n      stepType: [{\n        value: 'normal',\n        label: '普通'\n      }, {\n        value: 'project',\n        label: '项目'\n      }, {\n        value: 'global',\n        label: '全局'\n      }],\n      project: \"\",\n      automation: \"\",\n      StepList: [],\n      stepIds: [],\n      failIds: [],\n      failRerunShow: false,\n      ids: [],\n      listLoading: false,\n      running: false,\n      updateOrderStatus: false,\n      searchName: \"\",\n      total: 0,\n      page: 1,\n      env: '',\n      data: '',\n      group: [],\n      EnvList: [],\n      DataList: [],\n      commands: {},\n      groupData: [],\n      sels: [],\n      //列表选中列\n      AutomationResult: false,\n      StepResultDetails: [],\n      StepResultName: \"\",\n      result: {},\n      StepListLen: \"\",\n      StepListIndex: 0,\n      activeIndex: \"\",\n      editFormVisible: false,\n      //编辑界面是否显示\n      editFormTitle: \"\",\n      editLoading: false,\n      editFormRules: {\n        name: [{\n          required: true,\n          message: '请输入名称',\n          trigger: 'blur'\n        }, {\n          min: 1,\n          max: 1024,\n          message: '长度在 1 到 1024 个字符',\n          trigger: 'blur'\n        }],\n        type: [{\n          required: true,\n          message: '请选择类型',\n          trigger: 'blur'\n        }],\n        description: [{\n          required: false,\n          message: '请输入描述',\n          trigger: 'blur'\n        }, {\n          max: 1024,\n          message: '不能超过1024个字符',\n          trigger: 'blur'\n        }]\n      },\n      //编辑界面数据\n      editForm: {\n        name: '',\n        params: '{}',\n        steps: [],\n        description: '',\n        type: 'normal',\n        order: ''\n      },\n      //新增界面数据\n      addForm: {\n        name: '',\n        params: '{}',\n        steps: [{\n          \"type\": \"\",\n          \"name\": \"\",\n          \"actionId\": 0,\n          \"params\": \"{}\",\n          \"description\": \"\",\n          \"disable\": \"False\"\n        }],\n        description: '',\n        type: 'normal',\n        order: ''\n      },\n      automationForm: {\n        name: '',\n        type: '',\n        group: null,\n        params: '{}',\n        description: '',\n        id: ''\n      },\n      linkAutomation: {\n        visible: false,\n        loading: false,\n        list: [],\n        page: 1,\n        pages: 0,\n        total: 0,\n        selAutomations: []\n      },\n      linkApi: {\n        visible: false,\n        loading: false,\n        list: [],\n        page: 1,\n        pages: 0,\n        total: 0,\n        selApis: []\n      },\n      reuseSteps: {\n        visible: false,\n        loading: false,\n        list: [],\n        total: 0,\n        page: 1,\n        pages: 0,\n        selSteps: []\n      }\n    }, (0, _defineProperty2.default)(_ref, \"result\", {\n      resulttrace: '',\n      ResultList: []\n    }), (0, _defineProperty2.default)(_ref, \"getResultTimer\", ''), (0, _defineProperty2.default)(_ref, \"getResultTimes\", 0), (0, _defineProperty2.default)(_ref, \"project_id\", this.$route.params.project_id), (0, _defineProperty2.default)(_ref, \"pageType\", ''), _ref;\n  },\n  methods: {\n    selsChange: function selsChange(sels) {\n      if (this.automationForm.type == \"monitor\") {\n        this.ids = sels.map(function (item) {\n          return item.id;\n        });\n      } else {\n        this.ids = sels.map(function (item) {\n          return item.stepId;\n        });\n      }\n    },\n    getStepRowClass: function getStepRowClass(_ref2) {\n      var row = _ref2.row;\n\n      if (!row.status) {\n        return 'disable-step';\n      }\n\n      return '';\n    },\n    handleSelect: function handleSelect(key, keyPath) {\n      this.activeIndex = key;\n      console.log(this.activeIndex);\n    },\n    // 获取用例分组\n    getAutomationGroupAndInfo: function getAutomationGroupAndInfo() {\n      var self = this;\n\n      _axios.default.get(_api.test + \"/api/automation/group\", {\n        params: {\n          project_id: this.$route.params.project_id\n        }\n      }).then(function (response) {\n        if (response.data.code === '999999') {\n          self.group = response.data.data;\n        } else {\n          self.$message.error({\n            message: response.data.msg,\n            center: true\n          });\n        }\n\n        self.getAutomationStepList();\n      }).catch(function (error) {});\n    },\n    getAutomationStepList: function getAutomationStepList() {\n      this.listLoading = true;\n      var self = this;\n      var params = {\n        project_id: this.$route.params.project_id,\n        page: self.page,\n        name: self.searchName,\n        automation_id: this.$route.params.automation_id\n      };\n\n      _axios.default.get(_api.test + \"/api/automation/step_list\", {\n        params: params\n      }).then(function (response) {\n        self.listLoading = false;\n        self.stepIds = [];\n\n        if (response.data.code === '999999') {\n          self.currentType = response.data.data.automation.type;\n          self.StepList = [];\n          self.result.ResultList = [];\n          self.automationForm = response.data.data.automation;\n          self.automationForm.group = response.data.data.automation.group;\n          response.data.data.steps.forEach(function (item) {\n            item.result = false;\n            self.StepList.push(item);\n\n            if (response.data.data.automation.type == 'list') {\n              self.stepIds.push(item.stepId);\n            } else if (response.data.data.automation.type == 'monitor') {\n              self.stepIds.push(item.id);\n            }\n          });\n          response.data.data.results.forEach(function (item) {\n            self.result.ResultList.push(item);\n          }); // self.ApiList = data.data.data\n        } else {\n          self.$message.error({\n            message: response.data.msg,\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    getCommandList: function getCommandList() {\n      this.listLoading = true;\n      var self = this;\n\n      _axios.default.get(_api.test + \"/api/automation/command_list\", {\n        params: {\n          project_id: this.$route.params.project_id,\n          automation_id: this.$route.params.automation_id\n        }\n      }).then(function (response) {\n        self.listLoading = false;\n\n        if (response.data.code === '999999') {\n          self.commands = {};\n          response.data.data.data.forEach(function (item) {\n            self.commands[item.name] = item;\n          }); // self.ApiList = data.data.data\n        } else {\n          self.$message.error({\n            message: response.data.msg,\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    getResult: function getResult(trace) {\n      var self = this;\n      var params = {\n        project_id: this.$route.params.project_id,\n        automation_id: this.$route.params.automation_id,\n        trace: trace\n      };\n\n      if (!self.running) {\n        self.StepList.forEach(function (item, index) {\n          item.testtime = \"\";\n          item.result = null;\n          item.details = [];\n        });\n      }\n\n      ;\n\n      _axios.default.get(_api.test + \"/api/automation/getresult\", {\n        params: params\n      }).then(function (response) {\n        self.getResultTimes++;\n\n        if (response.data.code === '999999') {\n          self.failIds = [];\n          response.data.data.details.forEach(function (item, index) {\n            self.StepList.forEach(function (step, stepIndex) {\n              if ((item.type == \"step\" || item.type == \"automation\") && item[\"id\"] == step[\"stepId\"] || item.type == \"api\" && item[\"id\"] == step[\"id\"]) {\n                step.result = item.status;\n                step.testtime = item.testtime;\n                step.details = item.details;\n                step.trace = item.trace;\n\n                if (item.status == \"FAIL\" && (item[\"type\"] == \"api\" || item[\"type\"] == \"automation\")) {\n                  self.failIds.push(item[\"id\"]);\n                }\n              }\n            });\n          });\n\n          if (response.data.data.status != \"RUNNING\" || self.getResultTimes > 100) {\n            self.getResultTimes = 0;\n            clearInterval(self.getResultTimer);\n            self.running = false;\n\n            if (self.failIds.length > 0) {\n              self.failRerunShow = true;\n            } else {\n              self.failRerunShow = false;\n            }\n          }\n        } else {\n          self.$message.error({\n            message: '获取失败',\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    StepTotal: function StepTotal() {\n      this.StepListLen = this.StepList.length;\n    },\n    handleLinkApi: function handleLinkApi() {\n      this.linkApi.visible = true;\n      this.linkApi.page = 1;\n      this.getApiList();\n    },\n    getApiList: function getApiList() {\n      var self = this;\n      self.linkApi.loading = true;\n      var params = {\n        project_id: this.$route.params.project_id,\n        page: self.linkApi.page,\n        name: self.linkApi.name,\n        exclude: JSON.stringify(self.stepIds)\n      };\n\n      _axios.default.get(_api.test + \"/api/api/api_list\", {\n        params: params\n      }).then(function (response) {\n        self.linkApi.loading = false;\n\n        if (response.data.code === '999999') {\n          self.linkApi.list = response.data.data.data;\n          self.linkApi.total = response.data.data.total;\n          self.linkApi.pages = response.data.data.pages;\n        } else {\n          self.$message.error({\n            message: response.data.msg,\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    //取消关联\n    handleUnlinkApi: function handleUnlinkApi(index, row) {\n      var _this2 = this;\n\n      this.$confirm('确认取消关联接口[' + row.name + ']吗?', '提示', {\n        type: 'warning'\n      }).then(function () {\n        _this2.listLoading = true;\n        var self = _this2;\n        var params = JSON.stringify({\n          project_id: Number(_this2.$route.params.project_id),\n          automation_id: Number(_this2.$route.params.automation_id),\n          ids: [row.id]\n        });\n        var headers = {\n          \"Content-Type\": \"application/json\",\n          Authorization: 'Token ' + sessionStorage.getItem('token')\n        };\n\n        _axios.default.post(_api.test + \"/api/automation/unlink_api\", params, {\n          headers: headers\n        }).then(function (response) {\n          self.listLoading = false;\n\n          if (response.data.code === '999999') {\n            self.$message({\n              message: '取消关联成功',\n              center: true,\n              type: 'success'\n            });\n          } else {\n            self.$message.error({\n              message: response.data.msg,\n              center: true\n            });\n          }\n\n          self.getAutomationStepList();\n        }).catch(function (error) {});\n      }).catch(function () {});\n    },\n    //取消关联\n    handleUnlinkAutomation: function handleUnlinkAutomation(index, row) {\n      var _this3 = this;\n\n      this.$confirm('确认取消关联用例[' + row.name + ']吗?', '提示', {\n        type: 'warning'\n      }).then(function () {\n        _this3.listLoading = true; //NProgress.start();\n\n        var self = _this3;\n        var params = JSON.stringify({\n          project_id: Number(_this3.$route.params.project_id),\n          automation_id: Number(_this3.$route.params.automation_id),\n          ids: [row.stepId]\n        });\n        var headers = {\n          \"Content-Type\": \"application/json\",\n          Authorization: 'Token ' + sessionStorage.getItem('token')\n        };\n\n        _axios.default.post(_api.test + \"/api/automation/unlink_automation\", params, {\n          headers: headers\n        }).then(function (response) {\n          self.listLoading = false;\n\n          if (response.data.code === '999999') {\n            self.$message({\n              message: '取消关联成功',\n              center: true,\n              type: 'success'\n            });\n          } else {\n            self.$message.error({\n              message: response.data.msg,\n              center: true\n            });\n          }\n\n          self.getAutomationStepList();\n        }).catch(function (error) {});\n      }).catch(function () {});\n    },\n    handleChangeStatus: function handleChangeStatus(index, row) {\n      var self = this;\n      this.listLoading = true;\n      var headers = {\n        \"Content-Type\": \"application/json\",\n        Authorization: 'Token ' + sessionStorage.getItem('token')\n      };\n      var params = {\n        project_id: Number(this.$route.params.project_id),\n        id: row.id,\n        status: !row.status,\n        type: row.type\n      };\n      var successMsg = '禁用成功';\n\n      if (!row.status) {\n        successMsg = '启用成功';\n      }\n\n      _axios.default.post(_api.test + \"/api/automation/stepstatus_update\", params, {\n        headers: headers\n      }).then(function (response) {\n        self.listLoading = false;\n\n        if (response.data.code === '999999') {\n          self.$message({\n            message: successMsg,\n            center: true,\n            type: 'success'\n          });\n          row.status = !row.status;\n        } else {\n          self.$message.error({\n            message: response.data.msg,\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    linkApiSubmit: function linkApiSubmit() {\n      var _this4 = this;\n\n      var ids = this.linkApi.selApis.map(function (item) {\n        return item.id;\n      });\n      var self = this;\n      this.$confirm('确认关联选中的接口吗？', '提示', {\n        type: 'warning'\n      }).then(function () {\n        self.listLoading = true; //NProgress.start();\n\n        var params = JSON.stringify({\n          project_id: Number(_this4.$route.params.project_id),\n          automation_id: Number(_this4.$route.params.automation_id),\n          ids: ids\n        });\n        var headers = {\n          \"Content-Type\": \"application/json\",\n          Authorization: 'Token ' + sessionStorage.getItem('token')\n        };\n\n        _axios.default.post(_api.test + \"/api/automation/link_api\", params, {\n          headers: headers\n        }).then(function (response) {\n          self.listLoading = false;\n\n          if (response.data.code === '999999') {\n            self.$message({\n              message: '关联成功',\n              center: true,\n              type: 'success'\n            });\n          } else {\n            self.$message.error({\n              message: response.data.msg,\n              center: true\n            });\n          }\n\n          self.linkApi.visible = false;\n          self.getAutomationStepList();\n        }).catch(function (error) {});\n      }).catch(function () {});\n    },\n    getAutomationList: function getAutomationList() {\n      var self = this;\n      self.linkAutomation.loading = true;\n      var params = {\n        project_id: this.$route.params.project_id,\n        type: \"case\",\n        page: self.linkAutomation.page,\n        exclude: JSON.stringify(self.stepIds)\n      };\n\n      if (this.linkAutomation.name != \"\") {\n        params[\"name\"] = this.linkAutomation.name;\n      }\n\n      var headers = {\n        Authorization: 'Token ' + sessionStorage.getItem('token')\n      };\n\n      _axios.default.get(_api.test + \"/api/automation/automation_list\", {\n        params: params,\n        headers: headers\n      }).then(function (response) {\n        self.linkAutomation.loading = false;\n\n        if (response.data.code === '999999') {\n          self.linkAutomation.list = response.data.data.data;\n          self.linkAutomation.total = response.data.data.total;\n          self.linkAutomation.pages = response.data.data.pages;\n        } else {\n          self.$message.error({\n            message: response.data.msg,\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    //显示新增界面\n    handleLinkAutomation: function handleLinkAutomation() {\n      this.linkAutomation.visible = true;\n      this.linkAutomation.page = 1;\n      this.getAutomationList();\n    },\n    linkAutomationSubmit: function linkAutomationSubmit() {\n      var _this5 = this;\n\n      var ids = this.linkAutomation.selAutomations.map(function (item) {\n        return item.id;\n      });\n      var self = this;\n      this.$confirm('确认关联选中的用例吗？', '提示', {\n        type: 'warning'\n      }).then(function () {\n        self.listLoading = true; //NProgress.start();\n\n        var params = JSON.stringify({\n          project_id: Number(_this5.$route.params.project_id),\n          automation_id: Number(_this5.$route.params.automation_id),\n          ids: ids\n        });\n        var headers = {\n          \"Content-Type\": \"application/json\",\n          Authorization: 'Token ' + sessionStorage.getItem('token')\n        };\n\n        _axios.default.post(_api.test + \"/api/automation/link_automation\", params, {\n          headers: headers\n        }).then(function (response) {\n          self.listLoading = false;\n\n          if (response.data.code === '999999') {\n            self.$message({\n              message: '关联成功',\n              center: true,\n              type: 'success'\n            });\n          } else {\n            self.$message.error({\n              message: response.data.msg,\n              center: true\n            });\n          }\n\n          self.linkAutomation.visible = false;\n          self.getAutomationStepList();\n        }).catch(function (error) {});\n      }).catch(function () {});\n    },\n    RunAutomation: function RunAutomation(ids) {\n      if (this.env) {\n        var self = this;\n        var data = {\n          project_id: Number(this.$route.params.project_id),\n          automation_id: Number(this.$route.params.automation_id),\n          params: this.automationForm.params,\n          env: this.env,\n          data: this.data\n        };\n\n        if (ids && ids.length > 0) {\n          data[\"ids\"] = ids;\n        }\n\n        var header = {\n          \"Content-Type\": \"application/json\",\n          Authorization: 'Token ' + sessionStorage.getItem('token')\n        };\n        (0, _api.runAutomation)(header, data).then(function (data) {\n          if (data.code === '999999') {\n            self.$message({\n              message: '开始执行',\n              center: true,\n              type: \"success\"\n            }), self.StepList.forEach(function (item, index) {\n              item.testtime = \"\";\n              item.result = null;\n              item.details = [];\n            });\n            self.result.ResultList.splice(0, 0, {\n              \"testTime\": data.data.testtime,\n              \"trace\": data.data.trace,\n              \"result\": data.data.status\n            });\n\n            if (data.data.status == \"RUNNING\") {\n              self.running = true;\n              self.getResultTimes = 0;\n              self.getResultTimer = setInterval(function () {\n                //                                        self.getAutomationStepList();\n                self.getResult(data.data.trace);\n              }, 3000);\n            }\n          } else {\n            self.$message.error({\n              message: data.msg,\n              center: true\n            });\n          }\n        });\n      } else {\n        this.$message({\n          message: '请选择测试环境',\n          center: true,\n          type: 'warning'\n        });\n      }\n    },\n    handleDel: function handleDel(index, row) {\n      var _this6 = this;\n\n      this.$confirm('确认删除步骤[' + row.name + ']吗?', '提示', {\n        type: 'warning'\n      }).then(function () {\n        _this6.listLoading = true;\n        var self = _this6;\n        var params = JSON.stringify({\n          project_id: Number(_this6.$route.params.project_id),\n          automation_id: Number(_this6.$route.params.automation_id),\n          ids: [{\n            \"order\": index + 1,\n            \"id\": row.stepId\n          }]\n        });\n        var headers = {\n          \"Content-Type\": \"application/json\",\n          Authorization: 'Token ' + sessionStorage.getItem('token')\n        };\n\n        _axios.default.post(_api.test + \"/api/automation/del_step\", params, {\n          headers: headers\n        }).then(function (response) {\n          self.listLoading = false;\n\n          if (response.data.code === '999999') {\n            self.$message({\n              message: '删除成功',\n              center: true,\n              type: 'success'\n            });\n          } else {\n            self.$message.error({\n              message: response.data.msg,\n              center: true\n            });\n          }\n\n          self.getAutomationStepList();\n        }).catch(function (error) {});\n      }).catch(function () {});\n    },\n    resultShow: function resultShow(row) {\n      this.AutomationResult = true;\n      this.StepResultDetails = row.details;\n      this.StepResultName = row.name;\n    },\n    handleCurrentChangeStep: function handleCurrentChangeStep(val) {\n      this.reuseSteps.page = val;\n      this.getReuseStepList();\n    },\n    handleCurrentChangeAutomation: function handleCurrentChangeAutomation(val) {\n      this.linkAutomation.page = val;\n      this.getAutomationList();\n    },\n    handleCurrentChangeApi: function handleCurrentChangeApi(val) {\n      this.linkApi.page = val;\n      this.getApiList();\n    },\n    selStepsChange: function selStepsChange(sels) {\n      this.reuseSteps.selSteps = sels;\n    },\n    selApisChange: function selApisChange(sels) {\n      this.linkApi.selApis = sels;\n    },\n    selAutomationsChange: function selAutomationsChange(sels) {\n      this.linkAutomation.selAutomations = sels;\n    },\n    addReuseSteps: function addReuseSteps() {\n      var _this7 = this;\n\n      var ids = this.reuseSteps.selSteps.map(function (item) {\n        return item.id;\n      });\n      var self = this;\n      this.$confirm('确认添加选中的步骤吗？', '提示', {\n        type: 'warning'\n      }).then(function () {\n        self.listLoading = true;\n        var params = JSON.stringify({\n          project_id: Number(_this7.$route.params.project_id),\n          automation_id: Number(_this7.$route.params.automation_id),\n          ids: ids\n        });\n        var headers = {\n          \"Content-Type\": \"application/json\",\n          Authorization: 'Token ' + sessionStorage.getItem('token')\n        };\n\n        _axios.default.post(_api.test + \"/api/automation/add_reuse_steps\", params, {\n          headers: headers\n        }).then(function (response) {\n          self.listLoading = false;\n\n          if (response.data.code === '999999') {\n            self.$message({\n              message: '添加成功',\n              center: true,\n              type: 'success'\n            });\n          } else {\n            self.$message.error({\n              message: response.data.msg,\n              center: true\n            });\n          }\n\n          self.reuseSteps.visible = false;\n          self.getAutomationStepList();\n        }).catch(function (error) {});\n      }).catch(function () {});\n    },\n    getEnv: function getEnv() {\n      var self = this;\n      var headers = {\n        Authorization: 'Token ' + sessionStorage.getItem('token')\n      };\n      (0, _api.getProjectConfig)(headers, {\n        project_id: self.$route.params.project_id,\n        page: self.page,\n        name: \"\",\n        type: \"env\"\n      }).then(function (data) {\n        if (data.code === '999999') {\n          self.EnvList = [];\n          data.data.data.forEach(function (item) {\n            if (item.status) {\n              self.EnvList.push(item);\n            }\n          });\n        } else {\n          self.$message.error({\n            message: data.msg,\n            center: true\n          });\n        }\n      });\n    },\n    getData: function getData() {\n      var self = this;\n      var headers = {\n        Authorization: 'Token ' + sessionStorage.getItem('token')\n      };\n      (0, _api.getProjectConfig)(headers, {\n        project_id: this.$route.params.project_id,\n        page: self.page,\n        name: \"\",\n        type: \"data\"\n      }).then(function (data) {\n        if (data.code === '999999') {\n          self.DataList = [];\n          data.data.data.forEach(function (item) {\n            if (item.status) {\n              self.DataList.push(item);\n            }\n          });\n        } else {\n          self.$message.error({\n            message: data.msg,\n            center: true\n          });\n        }\n      });\n    },\n    //显示编辑界面\n    handleEdit: function handleEdit(index, row) {\n      this.editFormVisible = true;\n\n      if (this.pageType == 'update') {\n        this.editFormTitle = \"修改步骤\";\n      } else {\n        this.editFormTitle = \"查看步骤\";\n      }\n\n      this.editForm = {\n        \"id\": row.stepId,\n        \"name\": row.name,\n        \"type\": row.type,\n        \"params\": row.params,\n        \"steps\": JSON.parse(row.steps),\n        \"description\": row.description\n      };\n      this.editForm.order = index + 1;\n    },\n    actiontableshow: function actiontableshow() {\n      var _this = this;\n\n      var tbody = document.querySelector('.actiontable .el-table__body-wrapper tbody');\n\n      if (tbody != null) {\n        _sortablejs.default.create(tbody, {\n          onEnd: function onEnd(_ref3) {\n            var newIndex = _ref3.newIndex,\n                oldIndex = _ref3.oldIndex;\n\n            var currRow = _this.editForm.steps.splice(oldIndex, 1)[0];\n\n            _this.editForm.steps.splice(newIndex, 0, currRow);\n          }\n        });\n      }\n    },\n    handleCopy: function handleCopy(index, row) {\n      this.editFormVisible = true;\n      this.editFormTitle = \"复制步骤\";\n      this.editForm = {\n        \"name\": row.name,\n        \"type\": row.type,\n        \"params\": row.params,\n        \"steps\": JSON.parse(row.steps),\n        \"description\": row.description\n      };\n      this.editForm.order = this.StepList.length + 1;\n    },\n    //显示新增界面\n    handleAdd: function handleAdd() {\n      this.editFormVisible = true;\n      this.editFormTitle = \"添加步骤\";\n      this.editForm = this.addForm;\n      this.editForm.order = this.StepList.length + 1;\n    },\n    //显示新增界面\n    handleAddReuse: function handleAddReuse() {\n      this.reuseSteps.visible = true;\n      this.reuseSteps.page = 1;\n      this.getReuseStepList();\n    },\n    getReuseStepList: function getReuseStepList() {\n      var self = this;\n      var params = {\n        project_id: this.$route.params.project_id,\n        page: self.reuseSteps.page\n      };\n      var headers = {\n        Authorization: 'Token ' + sessionStorage.getItem('token')\n      };\n      self.reuseSteps.loading = true;\n\n      _axios.default.get(_api.test + \"/api/automation/step_list\", {\n        params: params,\n        headers: headers\n      }).then(function (response) {\n        self.reuseSteps.loading = false;\n\n        if (response.data.code === '999999') {\n          self.reuseSteps.list = response.data.data.data;\n          self.reuseSteps.total = response.data.data.total;\n          self.reuseSteps.pages = response.data.data.pages;\n        } else {\n          self.$message.error({\n            message: response.data.msg,\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    // 修改用例\n    editSubmit: function editSubmit() {\n      var _this8 = this;\n\n      if (this.editForm.id == null) {\n        this.addSubmit();\n      } else {\n        var self = this;\n        var steps = this.editForm.steps;\n\n        if (steps.length == 1 && steps[0][\"name\"] == \"\") {\n          steps = [];\n        }\n\n        this.$refs.editForm.validate(function (valid) {\n          if (valid) {\n            _this8.$confirm('确认提交吗？', '提示', {}).then(function () {\n              self.editLoading = true; //NProgress.start();\n\n              var params = JSON.stringify({\n                project_id: Number(_this8.$route.params.project_id),\n                automation_id: Number(_this8.$route.params.automation_id),\n                id: Number(self.editForm.id),\n                type: self.editForm.type,\n                name: self.editForm.name,\n                params: self.editForm.params,\n                steps: JSON.stringify(steps),\n                description: self.editForm.description,\n                order: self.editForm.order\n              });\n              var headers = {\n                \"Content-Type\": \"application/json\",\n                Authorization: 'Token ' + sessionStorage.getItem('token')\n              };\n\n              _axios.default.post(_api.test + \"/api/automation/update_step\", params, {\n                headers: headers\n              }).then(function (response) {\n                self.editLoading = false;\n\n                if (response.data.code === '999999') {\n                  self.$message({\n                    message: '修改成功',\n                    center: true,\n                    type: 'success'\n                  });\n                  self.$refs['editForm'].resetFields();\n                  self.editFormVisible = false;\n                  self.getAutomationStepList();\n                } else if (response.data.code === '999997') {\n                  self.$message.error({\n                    message: response.data.msg,\n                    center: true\n                  });\n                } else {\n                  self.$message.error({\n                    message: response.data.msg,\n                    center: true\n                  });\n                }\n              }).catch(function (error) {});\n            }).catch(function () {});\n          }\n        });\n      }\n    },\n    //新增用例\n    addSubmit: function addSubmit() {\n      var _this9 = this;\n\n      this.$refs.editForm.validate(function (valid) {\n        if (valid) {\n          var self = _this9;\n          var steps = _this9.editForm.steps;\n\n          if (steps.length == 1 && steps[0][\"name\"] == \"\") {\n            steps = [];\n          }\n\n          _this9.$confirm('确认提交吗？', '提示', {}).then(function () {\n            self.editLoading = true; //NProgress.start();\n\n            var params = JSON.stringify({\n              project_id: Number(_this9.$route.params.project_id),\n              type: _this9.editForm.type,\n              automation_id: Number(_this9.$route.params.automation_id),\n              name: self.editForm.name,\n              params: self.editForm.params,\n              steps: JSON.stringify(steps),\n              description: self.editForm.description,\n              order: self.editForm.order\n            });\n            var headers = {\n              \"Content-Type\": \"application/json\",\n              Authorization: 'Token ' + sessionStorage.getItem('token')\n            };\n\n            _axios.default.post(_api.test + \"/api/automation/add_step\", params, {\n              headers: headers\n            }).then(function (response) {\n              self.editLoading = false;\n\n              if (response.data.code === '999999') {\n                self.$message({\n                  message: '添加成功',\n                  center: true,\n                  type: 'success'\n                });\n                self.$refs['editForm'].resetFields();\n                self.editFormVisible = false;\n                self.getAutomationStepList();\n              } else if (response.data.code === '999997') {\n                self.$message.error({\n                  message: response.data.msg,\n                  center: true\n                });\n              } else {\n                self.$message.error({\n                  message: response.data.msg,\n                  center: true\n                });\n                self.$refs['editForm'].resetFields();\n                self.editFormVisible = false;\n                self.getAutomationStepList();\n              }\n            }).catch(function (error) {});\n          }).catch(function () {});\n        }\n      });\n    },\n    // 修改用例\n    updateAutomation: function updateAutomation() {\n      var _this10 = this;\n\n      var self = this;\n      this.$refs.automationForm.validate(function (valid) {\n        if (valid) {\n          //                        this.$confirm('确认保存吗？', '提示', {}).then(() => {\n          var orders = [];\n\n          _this10.StepList.forEach(function (item) {\n            orders.push(item[\"id\"]);\n          });\n\n          var params = JSON.stringify({\n            project_id: Number(_this10.$route.params.project_id),\n            id: Number(self.automationForm.id),\n            type: self.automationForm.type,\n            name: self.automationForm.name,\n            params: self.automationForm.params,\n            group_id: Number(_this10.automationForm.group),\n            description: self.automationForm.description,\n            orders: orders\n          });\n          var headers = {\n            \"Content-Type\": \"application/json\",\n            Authorization: 'Token ' + sessionStorage.getItem('token')\n          };\n\n          _axios.default.post(_api.test + \"/api/automation/update_automation\", params, {\n            headers: headers\n          }).then(function (response) {\n            if (response.data.code === '999999') {\n              self.$message({\n                message: '保存成功',\n                center: true,\n                type: 'success'\n              });\n            } else {\n              self.$message.error({\n                message: response.data.msg,\n                center: true\n              });\n            }\n          }).catch(function (error) {}); //                        }).catch(() => {});\n\n        }\n      });\n    },\n    addCommand: function addCommand(index) {\n      this.editForm.steps.splice(index + 1, 0, {\n        \"type\": \"\",\n        \"name\": \"\",\n        \"actionId\": 0,\n        \"params\": \"{}\",\n        \"description\": \"\",\n        \"disable\": \"False\"\n      });\n    },\n    delCommand: function delCommand(index) {\n      this.editForm.steps.splice(index, 1);\n    },\n    changeCommand: function changeCommand(index) {\n      var command = this.commands[this.editForm.steps[index].name];\n      this.editForm.steps[index].name = command.name;\n      this.editForm.steps[index].type = command.type;\n      this.editForm.steps[index].actionId = command.actionId;\n      this.editForm.steps[index].params = command.value;\n      this.editForm.steps[index].description = command.desc;\n    },\n    rowDrop: function rowDrop() {\n      try {\n        var tbody = document.querySelector('.steptable .el-table__body-wrapper tbody');\n\n        var _this = this;\n\n        _sortablejs.default.create(tbody, {\n          onEnd: function onEnd(_ref4) {\n            var newIndex = _ref4.newIndex,\n                oldIndex = _ref4.oldIndex;\n\n            var currRow = _this.StepList.splice(oldIndex, 1)[0];\n\n            _this.StepList.splice(newIndex, 0, currRow);\n          }\n        });\n      } catch (err) {\n        alert(err);\n      }\n    },\n    updateOrder: function updateOrder() {\n      if (this.pageType == 'update') this.rowDrop();\n      this.updateOrderStatus = true;\n    },\n    init: function init() {\n      this.pageType = this.$route.params.type;\n      this.getAutomationGroupAndInfo();\n\n      if (this.pageType == 'update') {\n        this.getCommandList();\n      } else {\n        this.getEnv();\n        this.getData();\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.init();\n  },\n  watch: {\n    '$route': function $route(to, from) {\n      //监听路由是否变化\n      if (to.query != from.query) {\n        this.reload();\n        if (this.pageType == 'update') this.rowDrop(); //                 this.$router.go(0)\n      }\n    }\n  }\n};\nexports.default = _default;",{"version":3,"sources":["autoStepList.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <section>\n        <!--<router-link :to=\"{ name: '自动化列表', params: {project_id: this.$route.params.project_id}}\" style='text-decoration: none;color: aliceblue;'>-->\n            <!--<el-button class=\"return-list\"><i class=\"el-icon-d-arrow-left\" style=\"margin-right: 5px\"></i>自动化列表</el-button>-->\n        <!--</router-link>-->\n        <el-button v-show=\"(currentType==='case'||currentType==='reuse')&&pageType==='update'\" type=\"primary\" @click.native=\"handleAdd\">添加步骤</el-button>\n        <el-button v-show=\"(currentType==='case'||currentType==='reuse')&&pageType==='update'\" type=\"primary\" @click.native=\"handleAddReuse\">添加可重用步骤</el-button>\n        <el-button v-show=\"currentType==='monitor'&&pageType==='update'\" type=\"primary\" @click=\"handleLinkApi\">关联接口</el-button>\n        <el-button v-show=\"currentType==='list'&&pageType==='update'\" type=\"primary\" @click=\"handleLinkAutomation\">关联自动化</el-button>\n        <!--<router-link :to=\"{ name: '添加新接口'}\" style='text-decoration: none;color: #000000;'>-->\n            <!--<el-button type=\"primary\"><i class=\"el-icon-plus\" style=\"margin-right: 5px\"></i>新建接口</el-button>-->\n        <!--</router-link>-->\n        <el-button type=\"primary\" v-show=\"pageType!=='update'\" :disabled=\"running\" @click=\"RunAutomation(ids)\">\n            <div v-show=\"!running\">执行</div>\n            <div v-show=\"running\">执行中</div>\n        </el-button>\n        <el-button type=\"primary\" v-show=\"pageType!=='update' && (currentType==='list'||currentType==='monitor') && failRerunShow\" :disabled=\"running\" @click=\"RunAutomation(failIds)\">\n          <div v-show=\"!running\">失败重跑</div>\n          <div v-show=\"running\">执行中</div>\n        </el-button>\n        <!--<el-input type=\"textarea\" :rows=\"1\" v-model.trim=\"automation.params\"></el-input>-->\n        <el-select v-model=\"env\"  v-show=\"pageType!=='update'\" placeholder=\"执行环境\">\n            <el-option v-for=\"(item,index) in EnvList\" :key=\"index+''\" :label=\"item.name\" :value=\"item.name\"></el-option>\n        </el-select>\n        <el-select v-model=\"data\"  multiple v-show=\"pageType!=='update'\" placeholder=\"测试数据\">\n            <el-option v-for=\"(item,index) in DataList\" :key=\"index+''\" :label=\"item.name\" :value=\"item.name\"></el-option>\n        </el-select>\n        <el-select v-model=\"result.resulttrace\"  v-show=\"pageType!=='update'\" placeholder=\"执行结果\" @change=\"getResult(result.resulttrace)\">\n            <el-option v-for=\"(item,index) in result.ResultList\" :style=\"result_color[item.result]\" :key=\"index+''\" :label=\"item.testTime\" :value=\"item.trace\"></el-option>\n        </el-select>\n        <router-link :to=\"{ name: '更新自动化步骤', params: {automation_id: this.$route.params.automation_id,type: 'update'}}\" style='text-decoration: none;'><el-button v-show=\"pageType!=='update'\" class=\"return-list\" type=\"primary\" style=\"float: right; margin-right: 15px\">修改</el-button></router-link>\n        <router-link :to=\"{ name: '自动化步骤列表', params: {automation_id: this.$route.params.automation_id}}\" style='text-decoration: none;'><el-button v-show=\"pageType==='update'\" class=\"return-list\" type=\"primary\" style=\"float: right; margin-right: 15px\">执行</el-button></router-link>\n        <el-button v-show=\"pageType==='update'\" class=\"return-list\" type=\"primary\" style=\"float: right; margin-right: 15px\" @click.native=\"updateAutomation\">保存</el-button>\n        <el-dialog title=\"选择可重用步骤\" :visible.sync=\"reuseSteps.visible\" :close-on-click-modal=\"false\" >\n            <el-row :gutter=\"10\">\n                <el-col :span=\"18\">\n                    <el-table :data=\"reuseSteps.list\" highlight-current-row v-loading=\"reuseSteps.loading\"\n                              style=\"width: 100%;\" :show-header=\"true\" max-height=\"400\" @selection-change=\"selStepsChange\">\n                        <el-table-column type=\"selection\" width=\"55\">\n                        </el-table-column>\n                        <el-table-column prop=\"name\" label=\"名称\" min-width=\"20%\" sortable>\n                        </el-table-column>\n                        <el-table-column prop=\"params\" label=\"参数\" min-width=\"50%\" sortable>\n                        </el-table-column>\n                        <el-table-column prop=\"description\" label=\"描述\" min-width=\"30%\" sortable>\n                        </el-table-column>\n                    </el-table>\n                </el-col>\n            </el-row>\n            <el-col :span=\"24\" class=\"toolbar\">\n                <el-pagination layout=\"total, prev, pager, next\" @current-change=\"handleCurrentChangeStep\" :current-page.sync=\"reuseSteps.page\" :total=\"reuseSteps.total\" :page-size=\"20\" :page-count=\"reuseSteps.pages\" style=\"float:right;\">\n                </el-pagination>\n            </el-col>\n            <div slot=\"footer\" class=\"dialog-footer\">\n                <el-button @click.native=\"reuseSteps.visible = false\">取消</el-button>\n                <el-button type=\"primary\" @click.native=\"addReuseSteps\">提交</el-button>\n            </div>\n        </el-dialog>\n        <el-dialog title=\"关联接口\" :visible.sync=\"linkApi.visible\" :close-on-click-modal=\"false\" >\n            <el-row>\n              <el-input v-model.trim=\"linkApi.name\" placeholder=\"名称,分组\" @keyup.enter.native=\"getApiList\"></el-input>\n              <!--<el-button type=\"primary\" @click=\"getAutomationList\">查询</el-button>-->\n            </el-row>\n            <el-row :gutter=\"10\">\n                <el-col :span=\"24\">\n                    <el-table :data=\"linkApi.list\" highlight-current-row v-loading=\"linkApi.loading\"\n                              style=\"width: 100%;\" :show-header=\"true\" max-height=\"400\" @selection-change=\"selApisChange\">\n                        <el-table-column type=\"selection\" width=\"55\">\n                        </el-table-column>\n                        <el-table-column prop=\"name\" label=\"名称\" min-width=\"20%\" sortable>\n                        </el-table-column>\n                        <el-table-column prop=\"params\" label=\"参数\" min-width=\"50%\" sortable>\n                        </el-table-column>\n                        <el-table-column prop=\"description\" label=\"描述\" min-width=\"30%\" sortable>\n                        </el-table-column>\n                    </el-table>\n                </el-col>\n            </el-row>\n            <el-col :span=\"24\" class=\"toolbar\">\n                <el-pagination layout=\"total, prev, pager, next\" @current-change=\"handleCurrentChangeApi\" :current-page.sync=\"linkApi.page\" :total=\"linkApi.total\" :page-size=\"20\" :page-count=\"linkApi.pages\" style=\"float:right;\">\n                </el-pagination>\n            </el-col>\n            <div slot=\"footer\" class=\"dialog-footer\">\n                <el-button @click.native=\"linkApi.visible = false\">取消</el-button>\n                <el-button type=\"primary\" @click.native=\"linkApiSubmit\" :loading=\"linkApi.loading\">提交</el-button>\n            </div>\n        </el-dialog>\n        <el-dialog title=\"关联用例\" :visible.sync=\"linkAutomation.visible\" :close-on-click-modal=\"false\" >\n            <!--<el-col :span=\"24\" style=\"padding-bottom: 0px;\">-->\n            <el-row>\n              <el-input v-model.trim=\"linkAutomation.name\" placeholder=\"名称,分组\" @keyup.enter.native=\"getAutomationList\"></el-input>\n              <!--<el-button type=\"primary\" @click=\"getAutomationList\">查询</el-button>-->\n            </el-row>\n            <el-row :gutter=\"10\">\n                <el-col :span=\"24\">\n                    <el-table :data=\"linkAutomation.list\" highlight-current-row v-loading=\"linkAutomation.loading\"\n                              style=\"width: 100%;\" :show-header=\"true\" max-height=\"400\" @selection-change=\"selAutomationsChange\">\n                        <el-table-column type=\"selection\" width=\"55\">\n                        </el-table-column>\n                        <el-table-column prop=\"name\" label=\"名称\" min-width=\"20%\" sortable>\n                        </el-table-column>\n                        <el-table-column prop=\"description\" label=\"描述\" min-width=\"30%\" sortable>\n                        </el-table-column>\n                    </el-table>\n                </el-col>\n            </el-row>\n            <el-col :span=\"24\" class=\"toolbar\">\n                <el-pagination layout=\"total, prev, pager, next\" @current-change=\"handleCurrentChangeAutomation\" :current-page.sync=\"linkAutomation.page\" :total=\"linkAutomation.total\" :page-size=\"20\" :page-count=\"linkAutomation.pages\" style=\"float:right;\">\n                </el-pagination>\n            </el-col>\n            <div slot=\"footer\" class=\"dialog-footer\">\n                <el-button @click.native=\"linkAutomation.visible = false\">取消</el-button>\n                <el-button type=\"primary\" @click.native=\"linkAutomationSubmit\" :loading=\"linkAutomation.loading\">提交</el-button>\n            </div>\n        </el-dialog>\n        <el-form :model=\"automationForm\"  :rules=\"editFormRules\" ref=\"automationForm\" label-width=\"80px\">\n            <div style=\"border: 1px solid #e6e6e6;margin-bottom: 10px;padding:15px\">\n                <el-row :gutter=\"10\">\n                    <el-col :span='8'>\n                        <el-form-item label=\"名称\" prop=\"name\">\n                            <el-input :disabled=\"pageType!=='update'\" v-model.trim=\"automationForm.name\" auto-complete=\"off\"></el-input>\n                        </el-form-item>\n                    </el-col>\n                    <el-col :span='5'>\n                        <el-form-item label=\"类型\" label-width=\"83px\" prop=\"type\">\n                            <el-select :disabled=\"pageType!=='update'\" v-model=\"automationForm.type\" placeholder=\"类型\">\n                                <el-option v-for=\"(item,index) in automationType\" :key=\"index+''\" :label=\"item.label\" :value=\"item.value\"></el-option>\n                            </el-select>\n                        </el-form-item>\n                    </el-col>\n                    <el-col :span='8'>\n                        <el-form-item label=\"分组\" label-width=\"83px\" prop=\"group\">\n                            <treeselect :disabled=\"pageType!=='update'\" v-model=\"automationForm.group\" :options=\"group\" placeholder=\"请选择\"/>\n                            <!--<SelectTree :options=\"group\" :filter=\"false\" :value=\"automationForm.group\"/>-->\n                            <!--<el-select v-model=\"automationForm.group\" placeholder=\"分组\">-->\n                                <!--<el-option v-for=\"(item,index) in group\" :key=\"index+''\" :label=\"item.name\" :value=\"item.id\"></el-option>-->\n                            <!--</el-select>-->\n                        </el-form-item>\n                    </el-col>\n                </el-row>\n                <el-row :gutter=\"10\">\n                    <el-form-item label=\"参数\" prop='params'>\n                        <el-input type=\"textarea\" :rows=\"2\" v-model.trim=\"automationForm.params\"></el-input>\n                    </el-form-item>\n                </el-row>\n                <el-row :gutter=\"10\">\n                    <el-form-item label=\"描述\" prop='description'>\n                        <el-input :disabled=\"pageType!=='update'\" type=\"textarea\" :rows=\"2\" v-model.trim=\"automationForm.description\"></el-input>\n                    </el-form-item>\n                </el-row>\n            </div>\n        </el-form>\n        <el-table class=\"steptable\" row-key=\"index\" :data=\"StepList\" :row-class-name=\"getStepRowClass\" @selection-change=\"selsChange\" highlight-current-row v-loading=\"listLoading\" style=\"width: 100%;\">\n            <el-table-column type=\"selection\" min-width=\"5%\">\n            </el-table-column>\n            <el-table-column type=\"index\" min-width=\"5%\">\n            </el-table-column>\n            <el-table-column prop=\"name\" label=\"名称\" min-width=\"30%\" show-overflow-tooltip>\n                <template slot-scope=\"scope\">\n                    <span v-show=\"automationForm.type!=='monitor'&&scope.row.type!=='case'&&scope.row.type!=='reuse'\" @click=\"handleEdit(scope.$index, scope.row)\" style=\"font-size: 16px\">{{scope.row.name}}</span>\n                    <router-link v-show=\"scope.row.type==='case'||scope.row.type==='reuse'\" :to=\"{ name: '自动化步骤列表', params: {automation_id: scope.row.stepId}}\" style='text-decoration: none;'>{{ scope.row.name }}</router-link>\n                    <router-link v-show=\"automationForm.type==='monitor'\" :to=\"{ name: '基础信息', params: {api_id: scope.row.id}}\" style='text-decoration: none;'>{{ scope.row.name }}</router-link>\n                </template>\n            </el-table-column>\n            <el-table-column prop=\"description\" label=\"描述\" min-width=\"30%\" show-overflow-tooltip>\n                <template slot-scope=\"scope\">\n                    <span style=\"font-size: 16px\">{{scope.row.description}}</span>\n                </template>\n            </el-table-column>\n            <!--<el-table-column prop=\"testtime\" label=\"执行时间\" min-width=\"15%\" show-overflow-tooltip>-->\n                <!--<template slot-scope=\"scope\">-->\n                    <!--<span style=\"font-size: 16px\">{{scope.row.testtime}}</span>-->\n                <!--</template>-->\n            <!--</el-table-column>-->\n            <el-table-column prop=\"result\" label=\"结果\" min-width=\"10%\">\n                <template slot-scope=\"scope\">\n                    <span v-show=\"!scope.row.result||scope.row.result==='RUNNING'\">未执行</span>\n                    <router-link v-if=\"(scope.row.type==='case'||scope.row.type==='reuse')&&scope.row.result\" :to=\"{ name: '自动化执行详情', params: {project_id: project_id,automation_id: scope.row.stepId,trace:scope.row.trace}}\" style='text-decoration: none;'>\n                      <span v-show=\"scope.row.result==='PASS'\" style=\"color: #11b95c;cursor:pointer;\">通过</span>\n                      <span v-show=\"scope.row.result==='FAIL'\" style=\"color: #cc0000;cursor:pointer;\">失败</span>\n                    </router-link>\n                    <span v-show=\"(scope.row.type!=='case'&&scope.row.type!=='reuse')&&scope.row.result==='PASS'\" style=\"color: #11b95c;cursor:pointer;\" @click=\"resultShow(scope.row)\">通过</span>\n                    <span v-show=\"(scope.row.type!=='case'&&scope.row.type!=='reuse')&&scope.row.result==='FAIL'\" style=\"color: #cc0000;cursor:pointer;\" @click=\"resultShow(scope.row)\">失败</span>\n                </template>\n            </el-table-column>\n            <el-table-column prop=\"status\" label=\"启用\" min-width=\"10%\">\n                <template slot-scope=\"scope\">\n                    <img v-show=\"scope.row.status\" src=\"@/assets/icon-yes.svg\"/>\n                    <img v-show=\"!scope.row.status\" src=\"@/assets/icon-no.svg\"/>\n                </template>\n            </el-table-column>\n            <el-table-column label=\"操作\" min-width=\"30%\">\n                <template slot-scope=\"scope\">\n                  <el-dropdown v-show=\"pageType==='update'&&(automationForm.type==='case'||automationForm.type==='reuse')\">\n                    <el-button type=\"primary\" size=\"small\" @click=\"handleEdit(scope.$index, scope.row)\" plain>修改<i class=\"el-icon-arrow-down el-icon--right\"></i></el-button>\n                    <el-dropdown-menu slot=\"dropdown\">\n                      <el-dropdown-item><el-button type=\"primary\" size=\"small\" @click=\"handleCopy(scope.$index, scope.row)\" plain>复制</el-button></el-dropdown-item>\n                      <el-dropdown-item><el-button type=\"info\" size=\"small\" @click=\"handleChangeStatus(scope.$index, scope.row)\" plain>{{scope.row.status===false?'启用':'禁用'}}</el-button></el-dropdown-item>\n                      <el-dropdown-item><el-button type=\"danger\" size=\"small\" @click=\"handleDel(scope.$index, scope.row)\" plain>删除</el-button></el-dropdown-item>\n                    </el-dropdown-menu>\n                  </el-dropdown>\n                  <el-button-group v-show=\"pageType==='update'\">\n                    <el-button v-show=\"automationForm.type==='list'\" type=\"info\" size=\"mini\" @click=\"handleChangeStatus(scope.$index, scope.row)\">{{scope.row.status===false?'启用':'禁用'}}</el-button>\n                    <el-button v-show=\"automationForm.type==='monitor'\" type=\"primary\" size=\"mini\" @click=\"handleUnlinkApi(scope.$index, scope.row)\">取消关联</el-button>\n                    <el-button v-show=\"automationForm.type==='list'\" type=\"primary\" size=\"mini\" @click=\"handleUnlinkAutomation(scope.$index, scope.row)\">取消关联</el-button>\n                  </el-button-group>\n                </template>\n            </el-table-column>\n        </el-table>\n        <el-button v-show=\"pageType==='update'\" class=\"return-list\" type=\"primary\" style=\"float: right; margin-right: 15px\" :disabled=\"updateOrderStatus\" @click=\"updateOrder()\">\n            编辑步骤顺序\n        </el-button>\n        <el-dialog width=\"80%\" :title=\"editFormTitle\" :visible.sync=\"editFormVisible\" :close-on-click-modal=\"false\" @open=\"actiontableshow\" style=\"width: 100%;\">\n            <el-form :model=\"editForm\"  :rules=\"editFormRules\" ref=\"editForm\" label-width=\"80px\">\n                <el-form-item label=\"名称\" prop=\"name\">\n                    <el-input v-model.trim=\"editForm.name\" auto-complete=\"off\"></el-input>\n                </el-form-item>\n                <el-form-item label=\"类型:\" label-width=\"83px\" prop=\"type\">\n                    <el-select v-model=\"editForm.type\" placeholder=\"类型\">\n                        <el-option v-for=\"(item,index) in stepType\" :key=\"index+''\" :label=\"item.label\" :value=\"item.value\"></el-option>\n                    </el-select>\n                </el-form-item>\n                <el-form-item label=\"参数\" prop='params'>\n                    <el-input type=\"textarea\" :rows=\"3\" v-model.trim=\"editForm.params\"></el-input>\n                </el-form-item>\n                <el-form-item label=\"描述\" prop='description'>\n                    <el-input type=\"textarea\" :rows=\"4\" v-model.trim=\"editForm.description\"></el-input>\n                </el-form-item>\n                <el-form-item label=\"操作\" prop='steps'><el-button size=\"mini\" title=\"添加\" class=\"el-icon-plus\" @click=\"addCommand(0)\"></el-button>\n                    <!--<el-input type=\"textarea\" :rows=\"4\" v-model.trim=\"editForm.steps\"></el-input>-->\n                    <el-table id=\"actiontable\" class=\"actiontable\" row-key=\"name\" :data=\"editForm.steps\" highlight-current-row>\n                            <el-table-column type=\"index\" min-width=\"5%\">\n                            </el-table-column>\n                            <el-table-column prop=\"name\" label=\"名称\" min-width=\"30%\">\n                                <template slot-scope=\"scope\">\n                                    <el-select style=\"width:100%\" placeholder=\"步骤名称\" filterable v-model=\"scope.row.name\" @change=\"changeCommand(scope.$index)\">\n                                        <el-option v-for=\"(item,key) in commands\" :key=\"key+''\" :label=\"item.alias\" :value=\"item.name\"></el-option>\n                                    </el-select>\n                                    <!--<el-input class=\"selectInput\" v-model.trim=\"scope.row.name\" :value=\"scope.row.name\" placeholder=\"请输入内容\"></el-input>-->\n                                </template>\n                            </el-table-column>\n                            <el-table-column prop=\"params\" label=\"参数\" min-width=\"35%\">\n                                <template slot-scope=\"scope\">\n                                    <el-input type=\"textarea\" :rows=\"2\" v-model.trim=\"scope.row.params\" :value=\"scope.row.params\" placeholder=\"请输入内容\"></el-input>\n                                </template>\n                            </el-table-column>\n                            <el-table-column label=\"描述\" min-width=\"20%\">\n                                <template slot-scope=\"scope\">\n                                    <el-input type=\"textarea\" :rows=\"2\" v-model.trim=\"scope.row.description\" :value=\"scope.row.description\" placeholder=\"请输入内容\"></el-input>\n                                </template>\n                            </el-table-column>\n                            <el-table-column label=\"操作\" min-width=\"20%\">\n                                <template slot-scope=\"scope\">\n                                      <el-button-group>\n                                        <el-button size=\"mini\" title=\"删除\" class=\"el-icon-minus\" @click=\"delCommand(scope.$index)\"></el-button>\n                                        <el-button size=\"mini\" title=\"添加\" class=\"el-icon-plus\" @click=\"addCommand(scope.$index)\"></el-button>\n                                        <router-link v-show=\"scope.row.type==='api'\" :to=\"{ name: '基础信息', params: {api_id: scope.row.actionId}}\" style='text-decoration: none;'><el-button title=\"查看接口\" size=\"mini\" class=\"el-icon-view\"></el-button></router-link>\n                                        <router-link v-show=\"scope.row.type==='automation'\" :to=\"{ name: '自动化步骤列表', params: {automation_id: scope.row.actionId}}\" style='text-decoration: none;'><el-button title=\"查看用例\" size=\"mini\" class=\"el-icon-view\"></el-button></router-link>\n                                      </el-button-group>\n                                    <!--<el-button size=\"mini\" class=\"el-icon-plus\" @click=\"addCommand(scope.$index)\"></el-button>-->\n                                </template>\n                            </el-table-column>\n                        </el-table>\n                </el-form-item>\n            </el-form>\n            <div slot=\"footer\" class=\"dialog-footer\">\n                <el-button @click.native=\"editFormVisible = false\">取消</el-button>\n                <el-button v-show=\"pageType==='update'\" type=\"primary\" @click.native=\"editSubmit\" :loading=\"editLoading\">提交</el-button>\n            </div>\n        </el-dialog>\n\n        <el-dialog width=\"60%\" :title=\"StepResultName\" :visible.sync=\"AutomationResult\" :close-on-click-modal=\"false\">\n            <el-table :data=\"StepResultDetails\" max-height=\"400\" highlight-current-row v-loading=\"listLoading\" style=\"width: 100%;\">\n                <el-table-column type=\"expand\">\n                    <template slot-scope=\"props\">\n                        <el-form label-position=\"left\" inline class=\"demo-table-expand\">\n\n                            <el-table v-show=\"props.row.type==='automation'\" :data=\"props.row.details\" highlight-current-row v-loading=\"listLoading\" style=\"width: 100%;\">\n                                <!--<el-table-column type=\"expand\">-->\n                                    <!--<template slot-scope=\"props\">-->\n                                        <!--<el-form label-position=\"left\" inline class=\"demo-table-expand\">-->\n                                            <!--<el-row v-show=\"props.row.type==='api'\" :gutter=\"10\">-->\n                                                <!--<el-form-item label=\"接口地址： \">-->\n                                                    <!--<span>{{ props.row.url }}</span>-->\n                                                <!--</el-form-item>-->\n                                            <!--</el-row>-->\n                                            <!--<el-row v-show=\"props.row.type==='api'\" :gutter=\"10\">-->\n                                                <!--<el-form-item label=\"请求方式： \">-->\n                                                    <!--<span>{{ props.row.method }}</span>-->\n                                                <!--</el-form-item>-->\n                                            <!--</el-row>-->\n                                            <!--<el-row v-show=\"props.row.type==='api'\" :gutter=\"10\">-->\n                                                <!--<el-form-item label=\"请求参数： \">-->\n                                                    <!--<span style=\"word-break: break-all;overflow:auto;overflow-x:hidden\">{{ props.row.data }}</span>-->\n                                                <!--</el-form-item>-->\n                                            <!--</el-row>-->\n                                            <!--<el-row :gutter=\"10\">-->\n                                                <!--<el-form-item label=\"返回结果： \">-->\n                                                    <!--<span>-->\n                                                        <!--&lt;!&ndash;<pre style=\"word-break: break-all;overflow:auto;overflow-x:hidden\">&ndash;&gt;-->\n                                                          <!--<code v-show=\"props.row.type!=='api'\" >{{ props.row.result }}</code>-->\n                                                        <!--&lt;!&ndash;</pre>&ndash;&gt;-->\n                                                        <!--<json-viewer v-show=\"props.row.type==='api'\" :value=\"props.row.result\" :expand-depth=5 boxed copyable></json-viewer>-->\n                                                    <!--</span>-->\n                                                <!--</el-form-item>-->\n                                            <!--</el-row>-->\n                                        <!--</el-form>-->\n                                    <!--</template>-->\n                                <!--</el-table-column>-->\n                                <el-table-column type=\"index\" width=\"55\">\n                                </el-table-column>\n                                <el-table-column prop=\"name\" label=\"名称\" min-width=\"20%\" show-overflow-tooltip>\n                                    <template slot-scope=\"scope\">\n                                        <span style=\"font-size: 16px\">{{scope.row.name}}</span>\n                                    </template>\n                                </el-table-column>\n                                <el-table-column prop=\"result\" label=\"结果\" min-width=\"40%\" show-overflow-tooltip>\n                                    <template slot-scope=\"scope\">\n                                        <span style=\"font-size: 16px\">{{scope.row.result}}</span>\n                                    </template>\n                                </el-table-column>\n                                <el-table-column prop=\"status\" label=\"状态\" min-width=\"10%\" show-overflow-tooltip>\n                                    <template slot-scope=\"scope\">\n                                        <span v-show=\"scope.row.status==='PASS'\" style=\"color: #11b95c;cursor:pointer;\">成功</span>\n                                        <span v-show=\"scope.row.status==='FAIL'\" style=\"color: #cc0000;cursor:pointer;\">失败</span>\n                                    </template>\n                                </el-table-column>\n                                <el-table-column prop=\"description\" label=\"描述\" min-width=\"30%\" show-overflow-tooltip>\n                                    <template slot-scope=\"scope\">\n                                        <span style=\"font-size: 16px\">{{scope.row.description}}</span>\n                                    </template>\n                                </el-table-column>\n                            </el-table>\n\n                            <el-row v-show=\"props.row.type==='api'\" :gutter=\"10\">\n                                <el-form-item label=\"接口地址： \">\n                                    <span>{{ props.row.url }}</span>\n                                </el-form-item>\n                            </el-row>\n                            <el-row v-show=\"props.row.type==='api'\" :gutter=\"10\">\n                                <el-form-item label=\"请求方式： \">\n                                    <span>{{ props.row.method }}</span>\n                                </el-form-item>\n                            </el-row>\n                            <el-row v-show=\"props.row.type==='api'\" :gutter=\"10\">\n                                <el-form-item label=\"请求参数： \">\n                                    <span style=\"word-break: break-all;overflow:auto;overflow-x:hidden\">{{ props.row.data }}</span>\n                                </el-form-item>\n                            </el-row>\n                            <el-row v-show=\"props.row.type!=='automation'\" :gutter=\"10\">\n                                <el-form-item label=\"返回结果： \">\n                                    <span>\n                                        <!--<pre style=\"word-break: break-all;overflow:auto;overflow-x:hidden\">-->\n                                          <code v-show=\"props.row.type!=='api'\" >{{ props.row.result }}</code>\n                                        <!--</pre>-->\n                                        <json-viewer v-show=\"props.row.type==='api'\" :value=\"props.row.result\" :expand-depth=5 boxed copyable></json-viewer>\n                                    </span>\n                                </el-form-item>\n                            </el-row>\n                        </el-form>\n                    </template>\n                </el-table-column>\n                <el-table-column type=\"index\" width=\"55\">\n                </el-table-column>\n                <el-table-column prop=\"name\" label=\"名称\" min-width=\"20%\" show-overflow-tooltip>\n                    <template slot-scope=\"scope\">\n                        <span style=\"font-size: 16px\">{{scope.row.name}}</span>\n                    </template>\n                </el-table-column>\n                <el-table-column prop=\"result\" label=\"结果\" min-width=\"40%\" show-overflow-tooltip>\n                    <template slot-scope=\"scope\">\n                        <span style=\"font-size: 16px\">{{scope.row.result}}</span>\n                    </template>\n                </el-table-column>\n                <el-table-column prop=\"status\" label=\"状态\" min-width=\"10%\" show-overflow-tooltip>\n                    <template slot-scope=\"scope\">\n                        <span v-show=\"scope.row.status==='PASS'\" style=\"color: #11b95c;cursor:pointer;\">成功</span>\n                        <span v-show=\"scope.row.status==='FAIL'\" style=\"color: #cc0000;cursor:pointer;\">失败</span>\n                    </template>\n                </el-table-column>\n                <el-table-column prop=\"description\" label=\"描述\" min-width=\"30%\" show-overflow-tooltip>\n                    <template slot-scope=\"scope\">\n                        <span style=\"font-size: 16px\">{{scope.row.description}}</span>\n                    </template>\n                </el-table-column>\n            </el-table>\n        </el-dialog>\n    </section>\n</template>\n\n<script>\n    import Treeselect from '@riophae/vue-treeselect'\n    // import the styles\n    import '@riophae/vue-treeselect/dist/vue-treeselect.css'\n    import { test,getProjectConfig,runAutomation } from '../../../api/api'\n//    import SelectTree from \"../../../components/treeSelect.vue\";\n    import Sortable from 'sortablejs'\n    import $ from 'jquery'\n    import moment from \"moment\"\n    import axios from \"axios\"\n    export default {\n        components: {\n          Treeselect\n        },\n//        inject: [\"reload\"],\n        data() {\n            return{\n                automationType: [{value: 'case', label: '普通用例'},\n                     {value: 'reuse', label: '可复用用例'},\n                    {value: 'list', label: '用例集'},\n                    {value: 'data', label: '数据用例'},\n                    {value: 'monitor', label: '接口监控'},\n                ],\n                currentType: \"\",\n                result_color: {\"PASS\":\"color:green\",\"FAIL\":\"color:red\"},\n                stepType: [{value: 'normal', label: '普通'},\n                    {value: 'project', label: '项目'},\n                    {value: 'global', label: '全局'}],\n                project: \"\",\n                automation: \"\",\n                StepList: [],\n                stepIds: [],\n                failIds: [],\n                failRerunShow: false,\n                ids: [],\n                listLoading: false,\n                running: false,\n                updateOrderStatus: false,\n                searchName: \"\",\n                total: 0,\n                page: 1,\n                env: '',\n                data: '',\n                group: [],\n                EnvList: [],\n                DataList: [],\n                commands: {},\n                groupData: [],\n                sels: [],//列表选中列\n                AutomationResult: false,\n                StepResultDetails: [],\n                StepResultName: \"\",\n                result: {},\n                StepListLen: \"\",\n                StepListIndex: 0,\n                activeIndex: \"\",\n\n                editFormVisible: false,//编辑界面是否显示\n                editFormTitle: \"\",\n                editLoading: false,\n                editFormRules: {\n                    name: [\n                        { required: true, message: '请输入名称', trigger: 'blur' },\n                        { min: 1, max: 1024, message: '长度在 1 到 1024 个字符', trigger: 'blur' }\n                    ],\n                    type: [\n                        { required: true, message: '请选择类型', trigger: 'blur'}\n                    ],\n                    description: [\n                        { required: false, message: '请输入描述', trigger: 'blur' },\n                        { max: 1024, message: '不能超过1024个字符', trigger: 'blur' }\n                    ]\n                },\n                //编辑界面数据\n                editForm: {\n                    name: '',\n                    params: '{}',\n                    steps: [],\n                    description: '',\n                    type: 'normal',\n                    order: ''\n                },\n                //新增界面数据\n                addForm: {\n                    name: '',\n                    params: '{}',\n                    steps: [{\"type\":\"\",\"name\":\"\",\"actionId\":0,\"params\":\"{}\",\"description\":\"\",\"disable\":\"False\"}],\n                    description: '',\n                    type: 'normal',\n                    order: ''\n                },\n                automationForm: {\n                    name: '',\n                    type: '',\n                    group: null,\n                    params: '{}',\n                    description: '',\n                    id: ''\n                },\n                linkAutomation: {\n                    visible: false,\n                    loading: false,\n                    list: [],\n                    page: 1,\n                    pages: 0,\n                    total: 0,\n                    selAutomations: []\n                },\n                linkApi: {\n                    visible: false,\n                    loading: false,\n                    list: [],\n                    page: 1,\n                    pages: 0,\n                    total: 0,\n                    selApis: []\n                },\n                reuseSteps: {\n                    visible: false,\n                    loading: false,\n                    list: [],\n                    total: 0,\n                    page: 1,\n                    pages: 0,\n                    selSteps: []\n                },\n                result: {\n                    resulttrace: '',\n                    ResultList: []\n                },\n                getResultTimer: '',\n                getResultTimes: 0,\n                project_id: this.$route.params.project_id,\n                pageType: '',\n            }\n        },\n        methods: {\n            selsChange: function (sels) {\n                if(this.automationForm.type==\"monitor\"){\n                    this.ids = sels.map(item => item.id);\n                }else{\n                    this.ids = sels.map(item => item.stepId);\n                }\n            },\n            getStepRowClass({ row }) {\n              if (!row.status) {\n                return 'disable-step';\n              }\n              return '';\n            },\n            handleSelect(key, keyPath) {\n                this.activeIndex = key;\n                console.log(this.activeIndex)\n            },\n            // 获取用例分组\n            getAutomationGroupAndInfo() {\n                let self = this;\n                axios.get(test+\"/api/automation/group\", {params:{project_id:this.$route.params.project_id}}).then(response => {\n                    if (response.data.code === '999999') {\n                        self.group = response.data.data;\n                    }else{\n                        self.$message.error({\n                            message: response.data.msg,\n                            center: true,\n                        })\n                    }\n                    self.getAutomationStepList();\n                }).catch(error=>{\n\n                });\n            },\n            getAutomationStepList() {\n                this.listLoading = true;\n                let self = this;\n                let params={ project_id: this.$route.params.project_id,\n                    page: self.page,\n                    name: self.searchName,\n                    automation_id: this.$route.params.automation_id\n                };\n                axios.get(test+\"/api/automation/step_list\", {params:params}).then(response => {\n                    self.listLoading = false;\n                    self.stepIds=[];\n                    if (response.data.code === '999999') {\n                        self.currentType=response.data.data.automation.type;\n                        self.StepList = [];\n                        self.result.ResultList = [];\n                        self.automationForm=response.data.data.automation;\n                        self.automationForm.group=response.data.data.automation.group;\n                        response.data.data.steps.forEach((item) =>{\n                            item.result = false;\n                            self.StepList.push(item);\n                            if(response.data.data.automation.type=='list'){\n                                self.stepIds.push(item.stepId);\n                            }else if(response.data.data.automation.type=='monitor'){\n                                self.stepIds.push(item.id);\n                            }\n                        });\n                        response.data.data.results.forEach((item) =>{\n                            self.result.ResultList.push(item);\n                        });\n                        // self.ApiList = data.data.data\n                    }else {\n                        self.$message.error({\n                            message: response.data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n                });\n            },\n            getCommandList() {\n                this.listLoading = true;\n                let self = this;\n                axios.get(test+\"/api/automation/command_list\", {params:{project_id:this.$route.params.project_id,automation_id: this.$route.params.automation_id}}).then(response => {\n                    self.listLoading = false;\n                    if (response.data.code === '999999') {\n                        self.commands = {};\n                        response.data.data.data.forEach((item) =>{\n                            self.commands[item.name]=item;\n                        });\n                        // self.ApiList = data.data.data\n                    }\n                    else {\n                        self.$message.error({\n                            message: response.data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            getResult(trace) {\n                let self = this;\n                let params={ project_id: this.$route.params.project_id,\n                    automation_id: this.$route.params.automation_id,\n                    trace: trace\n                };\n                if(!self.running) {\n                  self.StepList.forEach((item, index) => {\n                    item.testtime = \"\";\n                    item.result = null;\n                    item.details = [];\n                  });\n                };\n                axios.get(test+\"/api/automation/getresult\", {params:params}).then(response => {\n                    self.getResultTimes++;\n                    if (response.data.code === '999999') {\n                        self.failIds=[]\n                        response.data.data.details.forEach((item,index) =>{\n                            self.StepList.forEach((step,stepIndex)=>{\n                                if(((item.type==\"step\"||item.type==\"automation\")&&item[\"id\"]==step[\"stepId\"])||((item.type==\"api\")&&item[\"id\"]==step[\"id\"])){\n                                  step.result=item.status;\n                                  step.testtime=item.testtime;\n                                  step.details=item.details;\n                                  step.trace=item.trace;\n                                  if(item.status==\"FAIL\"&&(item[\"type\"]==\"api\"||item[\"type\"]==\"automation\")){\n                                      self.failIds.push(item[\"id\"]);\n                                  }\n                                }\n                            })\n                        });\n                        if(response.data.data.status!=\"RUNNING\"||self.getResultTimes>100){\n                            self.getResultTimes=0;\n                            clearInterval(self.getResultTimer);\n                            self.running=false;\n                            if(self.failIds.length>0){\n                                self.failRerunShow=true;\n                            }else{\n                                self.failRerunShow=false;\n                            }\n                        }\n                    }else{\n                        self.$message.error({\n                            message: '获取失败',\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            StepTotal() {\n                this.StepListLen = this.StepList.length;\n            },\n            handleLinkApi: function () {\n                this.linkApi.visible = true;\n                this.linkApi.page=1;\n                this.getApiList();\n            },\n            getApiList(){\n                let self=this;\n                self.linkApi.loading = true;\n                let params={\n                    project_id: this.$route.params.project_id,\n                    page: self.linkApi.page,\n                    name: self.linkApi.name,\n                    exclude: JSON.stringify(self.stepIds),\n                };\n                axios.get(test+\"/api/api/api_list\", {params:params}).then(response => {\n                    self.linkApi.loading = false;\n                    if (response.data.code === '999999') {\n                        self.linkApi.list = response.data.data.data;\n                        self.linkApi.total = response.data.data.total;\n                        self.linkApi.pages = response.data.data.pages;\n                    }\n                    else {\n                        self.$message.error({\n                            message: response.data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            //取消关联\n            handleUnlinkApi: function (index, row) {\n                this.$confirm('确认取消关联接口[' + row.name + ']吗?', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    this.listLoading = true;\n                    let self = this;\n                    let params=JSON.stringify({ project_id: Number(this.$route.params.project_id), automation_id: Number(this.$route.params.automation_id),ids: [row.id] });\n                    let headers={\n                        \"Content-Type\": \"application/json\",\n                        Authorization: 'Token '+sessionStorage.getItem('token')\n                    };\n                    axios.post(test+\"/api/automation/unlink_api\", params,{headers:headers}).then(response => {\n                        self.listLoading = false;\n                        if (response.data.code === '999999') {\n                            self.$message({\n                                message: '取消关联成功',\n                                center: true,\n                                type: 'success'\n                            })\n                        } else {\n                            self.$message.error({\n                                message: response.data.msg,\n                                center: true,\n                            })\n                        }\n                        self.getAutomationStepList();\n                    }).catch(error=>{\n\n                    });\n                }).catch(() => {\n                });\n            },\n            //取消关联\n            handleUnlinkAutomation: function (index, row) {\n                this.$confirm('确认取消关联用例[' + row.name + ']吗?', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    this.listLoading = true;\n                    //NProgress.start();\n                    let self = this;\n                    let params=JSON.stringify({ project_id: Number(this.$route.params.project_id), automation_id: Number(this.$route.params.automation_id),ids: [row.stepId] });\n                    let headers={\n                        \"Content-Type\": \"application/json\",\n                        Authorization: 'Token '+sessionStorage.getItem('token')\n                    };\n                    axios.post(test+\"/api/automation/unlink_automation\", params,{headers:headers}).then(response => {\n                        self.listLoading = false;\n                        if (response.data.code === '999999') {\n                            self.$message({\n                                message: '取消关联成功',\n                                center: true,\n                                type: 'success'\n                            })\n                        } else {\n                            self.$message.error({\n                                message: response.data.msg,\n                                center: true,\n                            })\n                        }\n                        self.getAutomationStepList();\n                    }).catch(error=>{\n\n                    });\n                }).catch(() => {\n                });\n            },\n            handleChangeStatus: function(index, row) {\n                let self = this;\n                this.listLoading = true;\n                let headers = {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: 'Token '+sessionStorage.getItem('token')\n                };\n                let params = {project_id: Number(this.$route.params.project_id),id: row.id,status:!row.status,type:row.type};\n                let successMsg='禁用成功';\n                if(!row.status){\n                    successMsg='启用成功';\n                }\n                axios.post(test+\"/api/automation/stepstatus_update\", params,{headers:headers}).then(response => {\n                    self.listLoading = false;\n                    if (response.data.code === '999999') {\n                        self.$message({\n                            message: successMsg,\n                            center: true,\n                            type: 'success'\n                        })\n                        row.status = !row.status;\n                    }else {\n                        self.$message.error({\n                            message: response.data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n                });\n            },\n            linkApiSubmit: function () {\n                let ids = this.linkApi.selApis.map(item => item.id);\n                let self = this;\n                this.$confirm('确认关联选中的接口吗？', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    self.listLoading = true;\n                    //NProgress.start();\n                    let params=JSON.stringify({\n                        project_id: Number(this.$route.params.project_id),\n                        automation_id: Number(this.$route.params.automation_id),\n                        ids: ids\n                    });\n                    let headers={\n                        \"Content-Type\": \"application/json\",\n                        Authorization: 'Token '+sessionStorage.getItem('token')\n                    };\n                    axios.post(test+\"/api/automation/link_api\", params,{headers:headers}).then(response => {\n                        self.listLoading = false;\n                        if (response.data.code === '999999') {\n                            self.$message({\n                                message: '关联成功',\n                                center: true,\n                                type: 'success'\n                            })\n                        }else {\n                            self.$message.error({\n                                message: response.data.msg,\n                                center: true,\n                            })\n                        }\n                        self.linkApi.visible = false;\n                        self.getAutomationStepList()\n                    }).catch(error=>{\n                    });\n                }).catch(() => {\n\n                });\n            },\n            getAutomationList(){\n                let self=this;\n                self.linkAutomation.loading = true;\n                let params={\n                    project_id: this.$route.params.project_id,\n                    type: \"case\",\n                    page: self.linkAutomation.page,\n                    exclude: JSON.stringify(self.stepIds),\n                };\n                if(this.linkAutomation.name!=\"\"){\n                    params[\"name\"]=this.linkAutomation.name;\n                }\n                let headers={Authorization: 'Token '+sessionStorage.getItem('token')};\n                axios.get(test+\"/api/automation/automation_list\", {params:params,headers:headers}).then(response => {\n                    self.linkAutomation.loading = false;\n                    if (response.data.code === '999999') {\n                        self.linkAutomation.list = response.data.data.data;\n                        self.linkAutomation.total = response.data.data.total;\n                        self.linkAutomation.pages = response.data.data.pages;\n                    }else{\n                        self.$message.error({\n                            message: response.data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n                });\n            },\n            //显示新增界面\n            handleLinkAutomation: function () {\n                this.linkAutomation.visible = true;\n                this.linkAutomation.page = 1;\n                this.getAutomationList();\n            },\n            linkAutomationSubmit: function () {\n                let ids = this.linkAutomation.selAutomations.map(item => item.id);\n                let self = this;\n                this.$confirm('确认关联选中的用例吗？', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    self.listLoading = true;\n                    //NProgress.start();\n                    let params=JSON.stringify({\n                        project_id: Number(this.$route.params.project_id),\n                        automation_id: Number(this.$route.params.automation_id),\n                        ids: ids\n                    });\n                    let headers={\"Content-Type\": \"application/json\",Authorization: 'Token '+sessionStorage.getItem('token')};\n                    axios.post(test+\"/api/automation/link_automation\", params,{headers:headers}).then(response => {\n                        self.listLoading = false;\n                        if (response.data.code === '999999') {\n                            self.$message({\n                                message: '关联成功',\n                                center: true,\n                                type: 'success'\n                            })\n                        }\n                        else {\n                            self.$message.error({\n                                message: response.data.msg,\n                                center: true,\n                            })\n                        }\n                        self.linkAutomation.visible = false;\n                        self.getAutomationStepList()\n                    }).catch(error=>{\n                    });\n                }).catch(() => {\n\n                });\n            },\n            RunAutomation(ids) {\n                if (this.env) {\n                    let self = this;\n                    let data={\n                            project_id: Number(this.$route.params.project_id),\n                            automation_id: Number(this.$route.params.automation_id),\n                            params: this.automationForm.params,\n                            env: this.env,\n                            data: this.data,\n                    };\n                    if(ids&&ids.length>0){\n                        data[\"ids\"]=ids;\n                    }\n                    let header = {\n                                \"Content-Type\": \"application/json\",\n                                Authorization: 'Token '+sessionStorage.getItem('token')\n                            };\n                    runAutomation(header,data).then(data => {\n                        if (data.code === '999999') {\n                            self.$message({\n                                message: '开始执行',\n                                center: true,\n                                type: \"success\",\n                            }),\n                            self.StepList.forEach((item,index) =>{\n                                item.testtime=\"\";\n                                item.result=null;\n                                item.details=[];\n                            });\n                            self.result.ResultList.splice(0,0,{\"testTime\":data.data.testtime,\"trace\":data.data.trace,\"result\":data.data.status});\n                            if(data.data.status==\"RUNNING\"){\n                                self.running=true;\n                                self.getResultTimes=0;\n                                self.getResultTimer = setInterval(() =>{\n//                                        self.getAutomationStepList();\n                                    self.getResult(data.data.trace);\n                                }, 3000);\n                            }\n                        }else {\n                            self.$message.error({\n                                message: data.msg,\n                                center: true,\n                            })\n                        }\n                    });\n                } else {\n                    this.$message({\n                        message: '请选择测试环境',\n                        center: true,\n                        type: 'warning'\n                    })\n                }\n            },\n            handleDel(index, row){\n                this.$confirm('确认删除步骤[' + row.name + ']吗?', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    this.listLoading = true;\n                    let self = this;\n                    let params=JSON.stringify({\n                            project_id: Number(this.$route.params.project_id),\n                            automation_id: Number(this.$route.params.automation_id),\n                            ids: [{\"order\":index+1,\"id\":row.stepId}] });\n                    let headers={\"Content-Type\": \"application/json\",Authorization: 'Token '+sessionStorage.getItem('token')};\n                    axios.post(test+\"/api/automation/del_step\", params,{headers:headers}).then(response => {\n                        self.listLoading = false;\n                        if (response.data.code === '999999') {\n                            self.$message({\n                                message: '删除成功',\n                                center: true,\n                                type: 'success'\n                            })\n                        } else {\n                            self.$message.error({\n                                message: response.data.msg,\n                                center: true,\n                            })\n                        }\n                        self.getAutomationStepList();\n                    }).catch(error=>{\n                    });\n                }).catch(() => {\n                });\n            },\n            resultShow(row) {\n                this.AutomationResult=true;\n                this.StepResultDetails=row.details;\n                this.StepResultName=row.name;\n            },\n            handleCurrentChangeStep(val) {\n                this.reuseSteps.page = val;\n                this.getReuseStepList();\n            },\n            handleCurrentChangeAutomation(val) {\n                this.linkAutomation.page = val;\n                this.getAutomationList();\n            },\n            handleCurrentChangeApi(val) {\n                this.linkApi.page = val;\n                this.getApiList();\n            },\n            selStepsChange(sels){\n                this.reuseSteps.selSteps = sels;\n            },\n            selApisChange(sels){\n                this.linkApi.selApis = sels;\n            },\n            selAutomationsChange(sels){\n                this.linkAutomation.selAutomations = sels;\n            },\n            addReuseSteps: function () {\n                let ids = this.reuseSteps.selSteps.map(item => item.id);\n                let self = this;\n                this.$confirm('确认添加选中的步骤吗？', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    self.listLoading = true;\n                    let params=JSON.stringify({\n                        project_id: Number(this.$route.params.project_id),\n                        automation_id: Number(this.$route.params.automation_id),\n                        ids: ids\n                    });\n                    let headers={\"Content-Type\": \"application/json\",Authorization: 'Token '+sessionStorage.getItem('token')};\n                    axios.post(test+\"/api/automation/add_reuse_steps\", params,{headers:headers}).then(response => {\n                        self.listLoading = false;\n                        if (response.data.code === '999999') {\n                            self.$message({\n                                message: '添加成功',\n                                center: true,\n                                type: 'success'\n                            })\n                        }\n                        else {\n                            self.$message.error({\n                                message: response.data.msg,\n                                center: true,\n                            })\n                        }\n                        self.reuseSteps.visible = false;\n                        self.getAutomationStepList();\n                    }).catch(error=>{\n                    });\n                }).catch(() => {\n\n                });\n            },\n            getEnv() {\n                let self = this;\n                let headers = {\n                    Authorization: 'Token '+sessionStorage.getItem('token')\n                };\n                getProjectConfig(headers, {project_id: self.$route.params.project_id,page: self.page, name: \"\", type: \"env\"}).then(data => {\n                    if (data.code === '999999') {\n                        self.EnvList=[];\n                        data.data.data.forEach((item) => {\n                            if (item.status) {\n                                self.EnvList.push(item);\n                            }\n                        })\n                    }else {\n                        self.$message.error({\n                            message: data.msg,\n                            center: true,\n                        })\n                    }\n                });\n            },\n            getData() {\n                let self = this;\n                let headers = {\n                    Authorization: 'Token '+sessionStorage.getItem('token')\n                };\n                getProjectConfig(headers, {project_id: this.$route.params.project_id,page: self.page, name: \"\", type: \"data\"}).then(data => {\n                    if (data.code === '999999') {\n                        self.DataList=[];\n                        data.data.data.forEach((item) => {\n                            if (item.status) {\n                                self.DataList.push(item);\n                            }\n                        })\n                    }else {\n                        self.$message.error({\n                            message: data.msg,\n                            center: true,\n                        })\n                    }\n                });\n            },\n            //显示编辑界面\n            handleEdit: function (index, row) {\n                this.editFormVisible = true;\n                if(this.pageType=='update'){\n                    this.editFormTitle = \"修改步骤\";\n                }else{\n                    this.editFormTitle = \"查看步骤\";\n                }\n                this.editForm = {\"id\":row.stepId,\"name\":row.name,\"type\":row.type,\"params\":row.params,\"steps\":JSON.parse(row.steps),\"description\":row.description};\n                this.editForm.order = index+1;\n            },\n            actiontableshow: function(){\n                const _this = this;\n                let tbody = document.querySelector('.actiontable .el-table__body-wrapper tbody');\n                if(tbody!=null){\n                    Sortable.create(tbody, {\n                      onEnd({ newIndex, oldIndex }) {\n                        const currRow = _this.editForm.steps.splice(oldIndex, 1)[0];\n                        _this.editForm.steps.splice(newIndex, 0, currRow);\n                      }\n                    });\n                }\n            },\n            handleCopy: function (index, row) {\n                this.editFormVisible = true;\n                this.editFormTitle = \"复制步骤\";\n                this.editForm = {\"name\":row.name,\"type\":row.type,\"params\":row.params,\"steps\":JSON.parse(row.steps),\"description\":row.description};\n                this.editForm.order = this.StepList.length+1;\n            },\n            //显示新增界面\n            handleAdd: function () {\n                this.editFormVisible = true;\n                this.editFormTitle = \"添加步骤\";\n                this.editForm=this.addForm;\n                this.editForm.order=this.StepList.length+1;\n            },\n            //显示新增界面\n            handleAddReuse: function () {\n                this.reuseSteps.visible = true;\n                this.reuseSteps.page=1;\n                this.getReuseStepList();\n            },\n            getReuseStepList() {\n                let self=this;\n                let params={project_id: this.$route.params.project_id,page: self.reuseSteps.page};\n                let headers={Authorization:'Token '+sessionStorage.getItem('token')};\n                self.reuseSteps.loading = true;\n                axios.get(test+\"/api/automation/step_list\", {params:params,headers:headers}).then(response => {\n                    self.reuseSteps.loading = false;\n                    if (response.data.code === '999999') {\n                        self.reuseSteps.list = response.data.data.data;\n                        self.reuseSteps.total = response.data.data.total;\n                        self.reuseSteps.pages = response.data.data.pages;\n                    }\n                    else {\n                        self.$message.error({\n                            message: response.data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n                });\n            },\n            // 修改用例\n            editSubmit: function () {\n                if(this.editForm.id==null){\n                    this.addSubmit();\n                }else{\n                    let self = this;\n                    let steps=this.editForm.steps;\n                    if(steps.length==1&&steps[0][\"name\"]==\"\"){\n                        steps=[];\n                    }\n                    this.$refs.editForm.validate((valid) => {\n                        if (valid) {\n                            this.$confirm('确认提交吗？', '提示', {}).then(() => {\n                                self.editLoading = true;\n                                //NProgress.start();\n                                let params = JSON.stringify({\n                                    project_id: Number(this.$route.params.project_id),\n                                    automation_id: Number(this.$route.params.automation_id),\n                                    id: Number(self.editForm.id),\n                                    type: self.editForm.type,\n                                    name: self.editForm.name,\n                                    params: self.editForm.params,\n                                    steps: JSON.stringify(steps),\n                                    description: self.editForm.description,\n                                    order: self.editForm.order\n                                });\n                                let headers={\"Content-Type\": \"application/json\",Authorization: 'Token '+sessionStorage.getItem('token')};\n                                axios.post(test+\"/api/automation/update_step\", params,{headers:headers}).then(response => {\n                                    self.editLoading = false;\n                                    if (response.data.code === '999999') {\n                                        self.$message({\n                                            message: '修改成功',\n                                            center: true,\n                                            type: 'success'\n                                        });\n                                        self.$refs['editForm'].resetFields();\n                                        self.editFormVisible = false;\n                                        self.getAutomationStepList()\n                                    } else if (response.data.code === '999997'){\n                                        self.$message.error({\n                                            message: response.data.msg,\n                                            center: true,\n                                        })\n                                    } else {\n                                        self.$message.error({\n                                            message: response.data.msg,\n                                            center: true,\n                                        })\n                                    }\n                                }).catch(error=>{\n                                });\n                            }).catch(() => {});\n                        }\n                  });\n                }\n            },\n            //新增用例\n            addSubmit: function () {\n                this.$refs.editForm.validate((valid) => {\n                    if (valid) {\n                        let self = this;\n                        let steps=this.editForm.steps;\n                        if(steps.length==1&&steps[0][\"name\"]==\"\"){\n                            steps=[];\n                        }\n                        this.$confirm('确认提交吗？', '提示', {}).then(() => {\n                            self.editLoading = true;\n                            //NProgress.start();\n                            let params = JSON.stringify({\n                                project_id: Number(this.$route.params.project_id),\n                                type: this.editForm.type,\n                                automation_id: Number(this.$route.params.automation_id),\n                                name: self.editForm.name,\n                                params: self.editForm.params,\n                                steps: JSON.stringify(steps),\n                                description: self.editForm.description,\n                                order: self.editForm.order\n                            });\n                            let headers={\"Content-Type\": \"application/json\",Authorization: 'Token '+sessionStorage.getItem('token')};\n                            axios.post(test+\"/api/automation/add_step\", params,{headers:headers}).then(response => {\n                                self.editLoading = false;\n                                if (response.data.code === '999999') {\n                                    self.$message({\n                                        message: '添加成功',\n                                        center: true,\n                                        type: 'success'\n                                    });\n                                    self.$refs['editForm'].resetFields();\n                                    self.editFormVisible = false;\n                                    self.getAutomationStepList()\n                                } else if (response.data.code === '999997'){\n                                    self.$message.error({\n                                        message: response.data.msg,\n                                        center: true,\n                                    })\n                                } else {\n                                    self.$message.error({\n                                        message: response.data.msg,\n                                        center: true,\n                                    });\n                                    self.$refs['editForm'].resetFields();\n                                    self.editFormVisible = false;\n                                    self.getAutomationStepList()\n                                }\n                            }).catch(error=>{\n                            });\n                        }).catch(() => {});\n                    }\n                });\n            },\n            // 修改用例\n            updateAutomation: function () {\n                let self = this;\n                this.$refs.automationForm.validate((valid) => {\n                    if (valid) {\n//                        this.$confirm('确认保存吗？', '提示', {}).then(() => {\n                            let orders=[];\n                            this.StepList.forEach((item) => {\n                                orders.push(item[\"id\"]);\n                            })\n                            let params = JSON.stringify({\n                                project_id: Number(this.$route.params.project_id),\n                                id: Number(self.automationForm.id),\n                                type: self.automationForm.type,\n                                name: self.automationForm.name,\n                                params: self.automationForm.params,\n                                group_id: Number(this.automationForm.group),\n                                description: self.automationForm.description,\n                                orders:orders\n                            });\n                            let headers={\"Content-Type\": \"application/json\",Authorization: 'Token '+sessionStorage.getItem('token')};\n                            axios.post(test+\"/api/automation/update_automation\", params,{headers:headers}).then(response => {\n                                if (response.data.code === '999999') {\n                                    self.$message({\n                                        message: '保存成功',\n                                        center: true,\n                                        type: 'success'\n                                    });\n                                } else {\n                                    self.$message.error({\n                                        message: response.data.msg,\n                                        center: true,\n                                    })\n                                }\n                            }).catch(error=>{\n                            });\n//                        }).catch(() => {});\n                    }\n                });\n            },\n            addCommand(index) {\n                this.editForm.steps.splice(index+1,0,{\"type\":\"\",\"name\":\"\",\"actionId\":0,\"params\":\"{}\",\"description\":\"\",\"disable\":\"False\"})\n            },\n            delCommand(index) {\n                this.editForm.steps.splice(index, 1);\n            },\n            changeCommand(index) {\n                let command=this.commands[this.editForm.steps[index].name];\n                this.editForm.steps[index].name=command.name;\n                this.editForm.steps[index].type=command.type;\n                this.editForm.steps[index].actionId=command.actionId;\n                this.editForm.steps[index].params=command.value;\n                this.editForm.steps[index].description=command.desc;\n            },\n            rowDrop() {\n                try{\n                    const tbody = document.querySelector('.steptable .el-table__body-wrapper tbody');\n                    const _this = this;\n                    Sortable.create(tbody, {\n                      onEnd({ newIndex, oldIndex }) {\n                        const currRow = _this.StepList.splice(oldIndex, 1)[0];\n                        _this.StepList.splice(newIndex, 0, currRow);\n                      }\n                    });\n                }catch(err){\n                    alert(err);\n                }\n            },\n            updateOrder(){\n                if(this.pageType=='update')this.rowDrop();\n                this.updateOrderStatus=true;\n            },\n            init(){\n                this.pageType=this.$route.params.type;\n                this.getAutomationGroupAndInfo();\n                if(this.pageType=='update'){\n                    this.getCommandList();\n                }else{\n                    this.getEnv();\n                    this.getData();\n                }\n            },\n        },\n        mounted() {\n            this.init();\n        },\n        watch: {\n            '$route' (to, from) { //监听路由是否变化\n              if(to.query!= from.query){\n                  this.reload();\n                  if(this.pageType=='update')this.rowDrop();\n//                 this.$router.go(0)\n              }\n            }\n        },\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n    .return-list {\n        margin-top: 0px;\n        margin-bottom: 10px;\n        border-radius: 25px;\n    }\n    .HttpStatus {\n        border-radius: 25px;\n        padding: 10px;\n        box-sizing: border-box;\n        color: #fff;\n        font-size: 15px;\n        background-color: #409eff;\n        text-align: center;\n        margin-right: 10px;\n    }\n    .resultStyle{\n        margin-left: 2%;\n        margin-top: 10px;\n    }\n    .lin{\n        left: 2%;\n        border: 1px solid #e6e6e6;\n        width: 90%;\n        position: relative\n    }\n    .disable-step{\n        opacity:0.5;\n    }\n</style>\n"],"sourceRoot":"src/views/project/auto"}]}