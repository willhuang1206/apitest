{"remainingRequest":"/Users/huangrong/workspace/apitest/apitest-vue/node_modules/babel-loader/lib/index.js!/Users/huangrong/workspace/apitest/apitest-vue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/huangrong/workspace/apitest/apitest-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/huangrong/workspace/apitest/apitest-vue/src/views/project/api/updateApi/updateApi.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/huangrong/workspace/apitest/apitest-vue/src/views/project/api/updateApi/updateApi.vue","mtime":1588749633789},{"path":"/Users/huangrong/workspace/apitest/apitest-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-vue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/huangrong/workspace/apitest/apitest-vue/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.regexp.match\");\n\nrequire(\"core-js/modules/es6.regexp.constructor\");\n\nrequire(\"core-js/modules/es6.number.constructor\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nrequire(\"core-js/modules/es6.function.name\");\n\nvar _typeof2 = _interopRequireDefault(require(\"/Users/huangrong/workspace/apitest/apitest-vue/node_modules/@babel/runtime-corejs2/helpers/typeof\"));\n\nvar _vueTreeselect = _interopRequireDefault(require(\"@riophae/vue-treeselect\"));\n\nrequire(\"@riophae/vue-treeselect/dist/vue-treeselect.css\");\n\nvar _api = require(\"../../../../api/api\");\n\nvar _jquery = _interopRequireDefault(require(\"jquery\"));\n\nvar _axios = _interopRequireDefault(require(\"axios\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// import the styles\n//    import SelectTree from \"../../../../components/treeSelect.vue\";\nvar _default = {\n  components: {\n    //          SelectTree,\n    Treeselect: _vueTreeselect.default\n  },\n  data: function data() {\n    return {\n      type: [{\n        value: 'http',\n        label: '普通http'\n      }, {\n        value: 'jyb',\n        label: '加油宝app'\n      }, {\n        value: 'service',\n        label: '微服务'\n      }],\n      request: [{\n        value: 'GET',\n        label: 'GET'\n      }, {\n        value: 'POST',\n        label: 'POST'\n      }, {\n        value: 'PUT',\n        label: 'PUT'\n      }, {\n        value: 'DELETE',\n        label: 'DELETE'\n      }],\n      Http: [{\n        value: 'HTTP',\n        label: 'HTTP'\n      }, {\n        value: 'HTTPS',\n        label: 'HTTPS'\n      }],\n      paramType: [{\n        value: 'Int',\n        label: 'Int'\n      }, {\n        value: 'String',\n        label: 'String'\n      }, {\n        value: 'Object',\n        label: 'Object'\n      }, {\n        value: 'Array',\n        label: 'Array'\n      }],\n      checkHeadList: [],\n      checkParameterList: [],\n      ParameterType: true,\n      group: [],\n      requestParameterType: \"application/x-www-form-urlencoded\",\n      status: [{\n        value: true,\n        label: '启用'\n      }, {\n        value: false,\n        label: '禁用'\n      }],\n      header: [{\n        value: 'Accept',\n        label: 'Accept'\n      }, {\n        value: 'Accept-Charset',\n        label: 'Accept-Charset'\n      }, {\n        value: 'Accept-Encoding',\n        label: 'Accept-Encoding'\n      }, {\n        value: 'Accept-Language',\n        label: 'Accept-Language'\n      }, {\n        value: 'Accept-Ranges',\n        label: 'Accept-Ranges'\n      }, {\n        value: 'Authorization',\n        label: 'Authorization'\n      }, {\n        value: 'Cache-Control',\n        label: 'Cache-Control'\n      }, {\n        value: 'Connection',\n        label: 'Connection'\n      }, {\n        value: 'Cookie',\n        label: 'Cookie'\n      }, {\n        value: 'Content-Length',\n        label: 'Content-Length'\n      }, {\n        value: 'Content-Type',\n        label: 'Content-Type'\n      }, {\n        value: 'Content-MD5',\n        label: 'Content-MD5'\n      }, {\n        value: 'Date',\n        label: 'Date'\n      }, {\n        value: 'Expect',\n        label: 'Expect'\n      }, {\n        value: 'From',\n        label: 'From'\n      }, {\n        value: 'Host',\n        label: 'Host'\n      }, {\n        value: 'If-Match',\n        label: 'If-Match'\n      }, {\n        value: 'If-Modified-Since',\n        label: 'If-Modified-Since'\n      }, {\n        value: 'If-None-Match',\n        label: 'If-None-Match'\n      }, {\n        value: 'If-Range',\n        label: 'If-Range'\n      }, {\n        value: 'If-Unmodified-Since',\n        label: 'If-Unmodified-Since'\n      }, {\n        value: 'Max-Forwards',\n        label: 'Max-Forwards'\n      }, {\n        value: 'Origin',\n        label: 'Origin'\n      }, {\n        value: 'Pragma',\n        label: 'Pragma'\n      }, {\n        value: 'Proxy-Authorization',\n        label: 'Proxy-Authorization'\n      }, {\n        value: 'Range',\n        label: 'Range'\n      }, {\n        value: 'Referer',\n        label: 'Referer'\n      }, {\n        value: 'TE',\n        label: 'TE'\n      }, {\n        value: 'Upgrade',\n        label: 'Upgrade'\n      }, {\n        value: 'User-Agent',\n        label: 'User-Agent'\n      }, {\n        value: 'Via',\n        label: 'Via'\n      }, {\n        value: 'Warning',\n        label: 'Warning'\n      }],\n      header4: \"\",\n      addParameterFormVisible: false,\n      addResponseFormVisible: false,\n      required4: [{\n        value: true,\n        label: '是'\n      }, {\n        value: false,\n        label: '否'\n      }],\n      httpCode: [{\n        value: '',\n        label: ''\n      }, {\n        value: '200',\n        label: '200'\n      }, {\n        value: '404',\n        label: '404'\n      }, {\n        value: '400',\n        label: '400'\n      }, {\n        value: '500',\n        label: '500'\n      }, {\n        value: '502',\n        label: '502'\n      }, {\n        value: '302',\n        label: '302'\n      }],\n      radioType: \"\",\n      result: true,\n      activeNames: ['2', '3', '4'],\n      id: \"\",\n      parameterRaw: \"\",\n      form: {\n        firstGroup: null,\n        name: '',\n        type: 'http',\n        status: 'True',\n        method: 'GET',\n        http: 'HTTP',\n        addr: '',\n        head: [{\n          name: \"\",\n          value: \"\"\n        }],\n        parameter: [{\n          name: \"\",\n          value: \"\",\n          _type: \"String\",\n          required: true,\n          restrict: \"\",\n          description: \"\"\n        }],\n        parameterType: \"\",\n        response: [{\n          name: \"\",\n          value: \"\",\n          _type: \"String\",\n          required: true,\n          description: \"\"\n        }],\n        mockCode: '',\n        mockData: '',\n        description: ''\n      },\n      FormRules: {\n        name: [{\n          required: true,\n          message: '请输入名称',\n          trigger: 'blur'\n        }, {\n          max: 50,\n          message: '不能超过50个字',\n          trigger: 'blur'\n        }],\n        type: [{\n          required: true,\n          message: '请选择类型',\n          trigger: 'blur'\n        }],\n        addr: [{\n          required: true,\n          message: '请输入地址',\n          trigger: 'blur'\n        }],\n        required: [{\n          required: true,\n          message: '是否必须',\n          trigger: 'blur'\n        }],\n        firstGroup: [{\n          type: 'number',\n          required: true,\n          message: '请选择分组',\n          trigger: 'blur'\n        }]\n      },\n      editForm: {\n        name: \"\",\n        value: \"\",\n        required: \"\",\n        restrict: \"\",\n        description: \"\"\n      },\n      format: false // editLoading: false\n\n    };\n  },\n  methods: {\n    isJsonString: function isJsonString(str) {\n      try {\n        if ((0, _typeof2.default)(JSON.parse(str)) === \"object\") {\n          return true;\n        }\n      } catch (e) {}\n\n      return false;\n    },\n    getApiInfo: function getApiInfo() {\n      var self = this;\n\n      _axios.default.get(_api.test + \"/api/api/api_info\", {\n        params: {\n          project_id: self.$route.params.project_id,\n          api_id: self.$route.params.api_id\n        }\n      }).then(function (response) {\n        var data = response.data;\n\n        if (data.code === '999999') {\n          data = data.data;\n          self.id = data.id;\n          self.form.name = data.name;\n          self.form.type = data.type;\n\n          if (data.status) {\n            self.form.status = true;\n          } else {\n            self.form.status = false;\n          }\n\n          self.form.method = data.requestType;\n          self.form.http = data.httpType;\n          self.form.addr = data.apiAddress;\n\n          if (data.headers.length) {\n            self.form.head = data.headers;\n          }\n\n          try {\n            self.parameterRaw = data.requestParameterRaw.data.replace(/'/g, \"\\\"\").replace(/None/g, \"null\").replace(/True/g, \"true\").replace(/False/g, \"false\");\n          } catch (e) {}\n\n          if (data.requestParameter.length) {\n            self.form.parameter = data.requestParameter;\n          }\n\n          self.form.parameterType = data.requestParameterType;\n          self.requestParameterType = self.form.parameterType;\n\n          if (data.response.length) {\n            self.form.response = data.response;\n          }\n\n          self.form.mockCode = data.mockCode;\n          self.form.mockData = data.data;\n\n          if (data.data) {\n            self.form.mockJsonData = JSON.parse(data.data);\n          }\n\n          self.form.description = data.description;\n          self.form.firstGroup = data.apiGroupLevelFirst;\n        } else {\n          self.$message.error({\n            message: data.msg,\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    updateApiInfo: function updateApiInfo() {\n      if (this.form.mockData && this.form.mockCode) {\n        if (!this.isJsonString(this.form.mockData)) {\n          this.$message({\n            message: 'mock格式错误',\n            center: true,\n            type: 'error'\n          });\n        } else {\n          this.updateApi();\n        }\n      } else {\n        this.updateApi();\n      }\n    },\n    updateApi: function updateApi() {\n      var _this = this;\n\n      this.$refs.form.validate(function (valid) {\n        if (valid) {\n          var self = _this;\n\n          _this.$confirm('确认提交吗？', '提示', {}).then(function () {\n            self.form.parameterType = self.requestParameterType;\n            var _type = self.form.parameterType;\n            var _parameter = {};\n            var params = {};\n\n            if (_type === 'application/x-www-form-urlencoded' || _type === 'application/json' || _type === 'text/plain') {\n              if (self.radioType === true) {\n                _type = 'raw';\n                self.form.parameter.forEach(function (item) {\n                  if (item.name) {\n                    _parameter[item.name] = item.value;\n                  }\n\n                  if (item.required) {\n                    if (item._type == \"Object\" || item._type == \"Array\") {\n                      params[item.name] = JSON.parse(item.value);\n                    } else {\n                      params[item.name] = item.value;\n                    }\n                  }\n                });\n                _parameter = JSON.stringify(_parameter);\n              } else {\n                _parameter = self.form.parameter;\n                self.form.parameter.forEach(function (item) {\n                  if (item.required) {\n                    if (item._type == \"Object\" || item._type == \"Array\") {\n                      params[item.name] = JSON.parse(item.value);\n                    } else {\n                      params[item.name] = item.value;\n                    }\n                  }\n                });\n              }\n            } else {\n              _parameter = self.parameterRaw;\n            }\n\n            var param = JSON.stringify({\n              project_id: Number(self.$route.params.project_id),\n              id: Number(self.$route.params.api_id),\n              apiGroupLevelFirst_id: Number(self.form.firstGroup),\n              name: self.form.name,\n              type: self.form.type,\n              httpType: self.form.http,\n              requestType: self.form.method,\n              apiAddress: self.form.addr,\n              status: self.form.status,\n              headDict: self.form.head,\n              requestParameterType: _type,\n              requestList: _parameter,\n              responseList: self.form.response,\n              mockCode: self.form.mockCode,\n              data: self.form.mockData,\n              description: self.form.description,\n              params: JSON.stringify(params)\n            });\n\n            if (self.parameterRaw && _type === \"raw\") {\n              if (!self.isJsonString(self.parameterRaw)) {\n                self.$message({\n                  message: '源数据格式错误',\n                  center: true,\n                  type: 'error'\n                });\n              } else {\n                // console.log(_parameter)\n                // console.log(typeof _parameter)\n                _axios.default.post(_api.test + \"/api/api/update_api\", param, {\n                  headers: {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: 'Token ' + sessionStorage.getItem('token')\n                  }\n                }).then(function (response) {\n                  var data = response.data;\n\n                  if (data.code === '999999') {\n                    self.$router.push({\n                      name: '基础信息',\n                      params: {\n                        project_id: self.$route.params.project_id,\n                        api_id: self.$route.params.api_id\n                      }\n                    });\n                    self.$message({\n                      message: '修改成功',\n                      center: true,\n                      type: 'success'\n                    });\n                  } else {\n                    self.$message.error({\n                      message: data.msg,\n                      center: true\n                    });\n                  }\n                }).catch(function (error) {});\n              }\n            } else {\n              _axios.default.post(_api.test + \"/api/api/update_api\", param, {\n                headers: {\n                  \"Content-Type\": \"application/json\",\n                  Authorization: 'Token ' + sessionStorage.getItem('token')\n                }\n              }).then(function (response) {\n                var data = response.data;\n\n                if (data.code === '999999') {\n                  self.$router.push({\n                    name: '基础信息',\n                    params: {\n                      project_id: self.$route.params.project_id,\n                      api_id: self.$route.params.api_id\n                    }\n                  });\n                  self.$message({\n                    message: '修改成功',\n                    center: true,\n                    type: 'success'\n                  });\n                } else {\n                  self.$message.error({\n                    message: data.msg,\n                    center: true\n                  });\n                }\n              }).catch(function (error) {});\n            }\n          }).catch(function () {});\n        }\n      });\n    },\n    editParameterSubmit: function editParameterSubmit() {\n      var _this2 = this;\n\n      this.$refs.editForm.validate(function (valid) {\n        if (valid) {\n          _this2.form.parameter[_this2.id] = _this2.editForm;\n          _this2.addParameterFormVisible = false;\n        }\n      });\n    },\n    handleParameterEdit: function handleParameterEdit(index, row) {\n      this.addParameterFormVisible = true;\n      this.id = index;\n      this.editForm = Object.assign({}, row);\n    },\n    editResponseSubmit: function editResponseSubmit() {\n      var _this3 = this;\n\n      this.$refs.editForm.validate(function (valid) {\n        if (valid) {\n          _this3.form.response[_this3.id] = _this3.editForm;\n          _this3.addResponseFormVisible = false;\n        }\n      });\n    },\n    handleResponseEdit: function handleResponseEdit(index, row) {\n      this.addResponseFormVisible = true;\n      this.id = index;\n      this.editForm = Object.assign({}, row);\n    },\n    back: function back() {\n      this.$router.go(-1); // 返回上一层\n    },\n    // 获取api分组\n    getApiGroupAndInfo: function getApiGroupAndInfo() {\n      var _this4 = this;\n\n      var self = this;\n\n      _axios.default.get(_api.test + \"/api/api/group\", {\n        params: {\n          project_id: this.$route.params.project_id\n        },\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: 'Token ' + sessionStorage.getItem('token')\n        }\n      }).then(function (response) {\n        var data = response.data;\n\n        if (data.code === '999999') {\n          self.group = data.data;\n        } else {\n          self.$message.error({\n            message: data.msg,\n            center: true\n          });\n        }\n\n        _this4.getApiInfo();\n      }).catch(function (error) {});\n    },\n    addHead: function addHead() {\n      var headers = {\n        name: \"\",\n        value: \"\"\n      };\n      this.form.head.push(headers);\n    },\n    delHead: function delHead(index) {\n      this.form.head.splice(index, 1);\n\n      if (this.form.head.length === 0) {\n        this.form.head.push({\n          name: \"\",\n          value: \"\"\n        });\n      }\n    },\n    addParameter: function addParameter() {\n      var headers = {\n        name: \"\",\n        value: \"\",\n        _type: \"String\",\n        required: true,\n        restrict: \"\",\n        description: \"\"\n      };\n      this.form.parameter.push(headers);\n    },\n    delParameter: function delParameter(index) {\n      this.form.parameter.splice(index, 1);\n\n      if (this.form.parameter.length === 0) {\n        this.form.parameter.push({\n          name: \"\",\n          value: \"\",\n          _type: \"String\",\n          required: true,\n          restrict: \"\",\n          description: \"\"\n        });\n      }\n    },\n    addResponse: function addResponse() {\n      var headers = {\n        name: \"\",\n        value: \"\",\n        _type: \"String\",\n        required: true,\n        description: \"\"\n      };\n      this.form.response.push(headers);\n    },\n    delResponse: function delResponse(index) {\n      this.form.response.splice(index, 1);\n\n      if (this.form.response.length === 0) {\n        this.form.response.push({\n          name: \"\",\n          value: \"\",\n          _type: \"String\",\n          required: true,\n          description: \"\"\n        });\n      }\n    },\n    changeParameterType: function changeParameterType() {\n      if (this.requestParameterType === 'application/json') {\n        this.ParameterType = true;\n\n        if (this.parameterRaw != \"\" && (this.form.parameter.length == 0 || this.form.parameter[0][\"name\"] == \"\")) {\n          try {\n            var self = this;\n            this.form.parameter = [];\n            var json = JSON.parse(this.parameterRaw);\n\n            _jquery.default.each(json, function (name, value) {\n              var type = \"String\";\n\n              if ((0, _typeof2.default)(value) == 'object') {\n                if (value instanceof Array) {\n                  type = 'Array';\n                } else if (value instanceof Object) {\n                  type = 'Object';\n                }\n\n                value = JSON.stringify(value);\n              } else if (typeof value == 'number') {\n                type = 'Int';\n              }\n\n              var parameter = {\n                name: name,\n                value: value,\n                _type: type,\n                required: \"True\",\n                restrict: \"\",\n                description: \"\"\n              };\n              self.form.parameter.push(parameter);\n            });\n          } catch (e) {\n            alert(e);\n          }\n        }\n      } else if (this.requestParameterType === 'application/x-www-form-urlencoded' || this.requestParameterType === 'text/plain') {\n        this.ParameterType = true;\n      } else {\n        this.ParameterType = false;\n      }\n    },\n    showData: function showData() {\n      this.result = true;\n    },\n    showHead: function showHead() {\n      this.result = false;\n    },\n    handleChange: function handleChange(val) {},\n    onSubmit: function onSubmit() {\n      console.log('submit!');\n    },\n    formatResponse: function formatResponse() {\n      if (!this.format && this.form.mockData != \"\") {\n        try {\n          this.form.mockJsonData = JSON.parse(this.form.mockData);\n        } catch (e) {}\n      }\n\n      this.format = !this.format;\n    },\n    getDataType: function getDataType(value) {\n      var type = \"String\";\n\n      try {\n        if (value instanceof Array) {\n          type = 'Array';\n        } else if (value instanceof Object) {\n          type = 'Object';\n        } else if (typeof value == 'number') {\n          type = 'Int';\n        }\n      } catch (Exception) {}\n\n      return type;\n    },\n    updateResponse: function updateResponse() {\n      var _this5 = this;\n\n      this.$confirm('确认根据返回样例生成返回参数吗？', '提示', {}).then(function () {\n        _this5.form.response = [];\n\n        try {\n          var data = JSON.parse(_this5.form.mockData);\n\n          if (typeof data != 'number') {\n            _this5.convertResponse('', data, 2);\n          }\n        } catch (err) {\n          alert(err);\n        }\n      }).catch(function () {});\n    },\n    convertResponse: function convertResponse(parent, data, depth) {\n      var self = this;\n\n      _jquery.default.each(data, function (name, value) {\n        var item = {\n          required: true,\n          description: \"\"\n        };\n\n        try {\n          if (parent != '') {\n            item['name'] = parent + '.' + name;\n          } else {\n            item['name'] = name;\n          }\n\n          var type = self.getDataType(value);\n\n          if (type == 'String' || type == 'Int') {\n            item['_type'] = type;\n            item['value'] = value;\n            self.form.response.push(item);\n          } else if (type == 'Array') {\n            item['_type'] = type;\n            var childType = self.getDataType(value[0]);\n\n            if (childType == 'String' || childType == 'Int') {\n              item['value'] = JSON.stringify(value);\n              self.form.response.push(item);\n            } else if (childType == 'Object') {\n              item['value'] = '[]';\n              self.form.response.push(item);\n\n              if (depth > 0) {\n                self.convertResponse(item['name'] + \"[*]\", value[0], depth - 1);\n              }\n            }\n          } else if (type == 'Object') {\n            item['_type'] = type;\n            item['value'] = '{}';\n            self.form.response.push(item);\n\n            if (depth > 0) {\n              self.convertResponse(item['name'], value, depth - 1);\n            }\n          }\n        } catch (err) {\n          alert(err.message);\n        }\n      });\n    },\n    getValue: function getValue(value) {\n      this.form.firstGroup = value;\n    },\n    jybDecodePost: function jybDecodePost() {\n      var encodePost = this.parameterRaw.trim();\n      if (encodePost == \"\") return;\n      var apiUrl = this.form.addr.trim();\n      var pos = 0;\n      var reg = new RegExp(\"(^|&)_pos=([^&]*)(&|$)\", \"i\");\n      var r = apiUrl.match(reg);\n\n      if (r != null) {\n        pos = unescape(r[2]);\n      }\n\n      var version = \"\";\n      reg = new RegExp(\"(^|&)ver=([^&]*)(&|$)\", \"i\");\n      r = apiUrl.match(reg);\n\n      if (r != null) {\n        version = unescape(r[2]);\n      }\n\n      var params = {\n        pos: pos,\n        post: encodePost,\n        version: version\n      };\n      var headers = {\n        \"Content-Type\": \"application/json\",\n        Authorization: 'Token ' + sessionStorage.getItem('token')\n      };\n      var self = this;\n\n      _axios.default.post(_api.test + '/api/api/jybdecode', params, {\n        headers: headers\n      }).then(function (res) {\n        var _res$data = res.data,\n            msg = _res$data.msg,\n            code = _res$data.code,\n            data = _res$data.data;\n\n        if (code === '999999') {\n          self.parameterRaw = JSON.stringify(data);\n        } else {\n          self.$message.error({\n            message: msg,\n            center: true\n          });\n        }\n      });\n    }\n  },\n  watch: {\n    requestParameterType: function requestParameterType() {\n      this.changeParameterType();\n    }\n  },\n  mounted: function mounted() {\n    this.getApiGroupAndInfo();\n  }\n};\nexports.default = _default;",{"version":3,"sources":["updateApi.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <section>\n        <router-link :to=\"{ name: '基础信息', params: {project_id: this.$route.params.project_id,api_id:this.$route.params.api_id}}\" style='text-decoration: none;color: aliceblue;'>\n            <el-button class=\"return-list\"><i class=\"el-icon-d-arrow-left\" style=\"margin-right: 5px\"></i>接口详情</el-button>\n        </router-link>\n        <router-link :to=\"{ name: '基础信息', params: {project_id: this.$route.params.project_id,api_id:this.$route.params.api_id}}\" style='text-decoration: none;color: aliceblue;'>\n            <el-button class=\"return-list\" style=\"float: right\">取消</el-button>\n        </router-link>\n        <el-button class=\"return-list\" type=\"primary\" style=\"float: right; margin-right: 15px\" @click.native=\"updateApiInfo\">保存</el-button>\n        <el-form :model=\"form\" ref=\"form\" :rules=\"FormRules\">\n            <div style=\"border: 1px solid #e6e6e6;margin-bottom: 10px;padding:15px\">\n                <el-row :gutter=\"10\">\n                    <el-col :span='8'>\n                        <el-form-item label=\"接口分组:\" label-width=\"83px\" prop=\"firstGroup\">\n                            <treeselect v-model=\"form.firstGroup\" :options=\"group\" placeholder=\"请选择\"/>\n                            <!--<SelectTree :options=\"group\" :filter=\"false\" :value=\"form.firstGroup\"/>-->\n                            <!--<el-select v-model=\"form.firstGroup\" placeholder=\"请选择分组\">-->\n                                <!--<el-option v-for=\"(item,index) in group\" :key=\"index+''\" :label=\"item.name\" :value=\"item.id\"></el-option>-->\n                            <!--</el-select>-->\n                        </el-form-item>\n                    </el-col>\n                    <el-col :span='10'>\n                        <el-form-item label=\"接口类型:\" label-width=\"83px\" prop=\"type\">\n                            <el-select v-model=\"form.type\" placeholder=\"请选择类型\">\n                                <el-option v-for=\"(item,index) in type\" :key=\"index+''\" :label=\"item.label\" :value=\"item.value\"></el-option>\n                            </el-select>\n                        </el-form-item>\n                    </el-col>\n                </el-row>\n                <el-row :gutter=\"10\">\n                    <el-col :span='8'>\n                        <el-form-item label=\"接口名称:\" label-width=\"83px\" prop=\"name\">\n                            <el-input v-model.trim=\"form.name\" placeholder=\"名称\" auto-complete></el-input>\n                        </el-form-item>\n                    </el-col>\n                    <el-col :span=\"10\">\n                        <el-form-item label=\"状态:\" label-width=\"72px\">\n                            <el-select v-model=\"form.status\" placeholder=\"接口状态\">\n                                <el-option v-for=\"(item,index) in status\" :key=\"index+''\" :label=\"item.label\" :value=\"item.value\"></el-option>\n                            </el-select>\n                        </el-form-item>\n                    </el-col>\n                </el-row>\n                <el-row :gutter=\"10\">\n                    <el-col :span=\"6\">\n                        <el-form-item label=\"URL:\" label-width=\"83px\">\n                            <el-select v-model=\"form.method\"  placeholder=\"请求方式\">\n                                <el-option v-for=\"(item,index) in request\" :key=\"index+''\" :label=\"item.label\" :value=\"item.value\"></el-option>\n                            </el-select>\n                        </el-form-item>\n                    </el-col>\n                    <!--<el-col :span=\"2\">-->\n                        <!--<el-form-item>-->\n                            <!--<el-select v-model=\"form.http\" placeholder=\"HTTP协议\">-->\n                                <!--<el-option v-for=\"(item,index) in Http\" :key=\"index+''\" :label=\"item.label\" :value=\"item.value\"></el-option>-->\n                            <!--</el-select>-->\n                        <!--</el-form-item>-->\n                    <!--</el-col>-->\n                    <el-col :span='18'>\n                        <el-form-item prop=\"addr\">\n                            <el-input v-model.trim=\"form.addr\" placeholder=\"地址\" auto-complete></el-input>\n                        </el-form-item>\n                    </el-col>\n                </el-row>\n                <el-row :gutter=\"10\">\n                    <el-col :span=\"18\">\n                        <el-form-item label=\"接口描述:\" label-width=\"83px\">\n                            <el-input v-model.trim=\"form.description\" type=\"textarea\" :rows=\"3\" placeholder=\"接口描述\"></el-input>\n                        </el-form-item>\n                    </el-col>\n                </el-row>\n            </div>\n            <el-row :span=\"24\">\n                <el-collapse v-model=\"activeNames\" @change=\"handleChange\">\n                    <el-collapse-item title=\"请求头部\" name=\"1\">\n                        <el-table :data=\"form.head\" highlight-current-row>\n                            <el-table-column prop=\"name\" label=\"参数名\" min-width=\"20%\">\n                                <template slot-scope=\"scope\">\n                                    <el-select placeholder=\"head标签\" filterable v-model=\"scope.row.name\">\n                                        <el-option v-for=\"(item,index) in header\" :key=\"index+''\" :label=\"item.label\" :value=\"item.value\"></el-option>\n                                    </el-select>\n                                    <el-input class=\"selectInput\" v-model.trim=\"scope.row.name\" :value=\"scope.row.name\" placeholder=\"请输入内容\"></el-input>\n                                </template>\n                            </el-table-column>\n                            <el-table-column prop=\"value\" label=\"参数值\" min-width=\"30%\">\n                                <template slot-scope=\"scope\">\n                                    <el-input v-model.trim=\"scope.row.value\" :value=\"scope.row.value\" placeholder=\"请输入内容\"></el-input>\n                                </template>\n                            </el-table-column>\n                            <el-table-column label=\"操作\" min-width=\"20%\">\n                                <template slot-scope=\"scope\">\n                                    <el-button class=\"el-icon-delete\" size=\"mini\" @click=\"delHead(scope.$index)\"></el-button>\n                                    <el-button v-if=\"scope.$index===(form.head.length-1)\" size=\"mini\" class=\"el-icon-plus\" @click=\"addHead\"></el-button>\n                                </template>\n                            </el-table-column>\n                        </el-table>\n                    </el-collapse-item>\n                    <el-collapse-item title=\"请求参数\" name=\"2\">\n                        <div style=\"margin: 5px\">\n                            <el-row :span=\"24\">\n                                <el-col :span=\"4\"><el-radio v-model=\"requestParameterType\" label=\"application/x-www-form-urlencoded\">表单</el-radio></el-col>\n                                <el-col :span=\"4\"><el-radio v-model=\"requestParameterType\" label=\"application/json\">JSON</el-radio></el-col>\n                                <el-col :span=\"4\"><el-radio v-model=\"requestParameterType\" label=\"raw\">JSON源数据</el-radio><el-button v-show=\"form.type==='jyb'\" type=\"primary\" size=\"mini\" @click=\"jybDecodePost\">解密</el-button></el-col>\n                            </el-row>\n                        </div>\n                        <el-table :data=\"form.parameter\" highlight-current-row :class=\"ParameterType? 'parameter-a': 'parameter-b'\">\n                            <el-table-column prop=\"name\" label=\"参数名\" min-width=\"20%\">\n                                <template slot-scope=\"scope\">\n                                    <el-input v-model.trim=\"scope.row.name\" :value=\"scope.row.name\" placeholder=\"请输入参数值\"></el-input>\n                                </template>\n                            </el-table-column>\n                            <el-table-column prop=\"value\" label=\"参数值\" min-width=\"25%\">\n                                <template slot-scope=\"scope\">\n                                    <el-input type=\"textarea\" :rows=\"1\" v-model.trim=\"scope.row.value\" :value=\"scope.row.value\" placeholder=\"请输入参数值\"></el-input>\n                                </template>\n                            </el-table-column>\n                            <el-table-column prop=\"_type\" label=\"参数类型\" min-width=\"15%\">\n                                <template slot-scope=\"scope\">\n                                    <el-select v-model=\"scope.row._type\"  placeholder=\"请求方式\">\n                                        <el-option v-for=\"(item,index) in paramType\" :key=\"index+''\" :label=\"item.label\" :value=\"item.value\"></el-option>\n                                    </el-select>\n                                </template>\n                            </el-table-column>\n                            <el-table-column label=\"必填?\" min-width=\"10%\" prop=\"required\">\n                                <template slot-scope=\"scope\">\n                                    <el-select v-model.trim=\"scope.row.required\" placeholder=\"必填？\">\n                                        <el-option v-for=\"(item,index) in required4\" :key=\"index+''\" :label=\"item.label\" :value=\"item.value\"></el-option>\n                                    </el-select>\n                                </template>\n                            </el-table-column>\n                            <el-table-column prop=\"description\" label=\"参数说明\" min-width=\"20%\">\n                                <template slot-scope=\"scope\">\n                                    <el-input v-model.trim=\"scope.row.description\" :value=\"scope.row.desc\" placeholder=\"请输入参数说明\"></el-input>\n                                </template>\n                            </el-table-column>\n                            <el-table-column label=\"操作\" min-width=\"15%\">\n                                <template slot-scope=\"scope\">\n                                    <el-button class=\"el-icon-delete\" size=\"mini\" @click=\"delParameter(scope.$index)\"></el-button>\n                                    <el-button v-if=\"scope.$index===(form.parameter.length-1)\" size=\"mini\" class=\"el-icon-plus\" @click=\"addParameter\"></el-button>\n                                    <!--<el-button type=\"primary\" size=\"mini\" style=\"margin-bottom: 5px\" @click=\"handleParameterEdit(scope.$index, scope.row)\">更多设置</el-button>-->\n                                </template>\n                            </el-table-column>\n                        </el-table>\n                        <template>\n                            <el-input :class=\"ParameterType? 'parameter-b': 'parameter-a'\" type=\"textarea\" :rows=\"5\" placeholder=\"请输入内容\" v-model.trim=\"parameterRaw\"></el-input>\n                        </template>\n                    </el-collapse-item>\n                    <el-collapse-item title=\"返回参数\" name=\"3\">\n                        <el-table :data=\"form.response\" highlight-current-row>\n                            <el-table-column prop=\"name\" label=\"参数名\" min-width=\"20%\">\n                                <template slot-scope=\"scope\">\n                                    <el-input v-model.trim=\"scope.row.name\" :value=\"scope.row.name\" placeholder=\"请输入参数值\"></el-input>\n                                </template>\n                            </el-table-column>\n                            <el-table-column prop=\"value\" label=\"预期值\" min-width=\"25%\">\n                                <template slot-scope=\"scope\">\n                                    <el-input v-model.trim=\"scope.row.value\" :value=\"scope.row.value\" placeholder=\"请输入参数值\"></el-input>\n                                </template>\n                            </el-table-column>\n                            <el-table-column prop=\"_type\" label=\"参数类型\" min-width=\"15%\">\n                                <template slot-scope=\"scope\">\n                                    <el-select v-model.trim=\"scope.row._type\"  placeholder=\"请求方式\">\n                                        <el-option v-for=\"(item,index) in paramType\" :key=\"index+''\" :label=\"item.label\" :value=\"item.value\"></el-option>\n                                    </el-select>\n                                </template>\n                            </el-table-column>\n                            <el-table-column label=\"必含?\" min-width=\"10%\" prop=\"required\">\n                                <template slot-scope=\"scope\">\n                                    <el-select v-model.trim=\"scope.row.required\" placeholder=\"必填？\">\n                                        <el-option v-for=\"(item,index) in required4\" :key=\"index+''\" :label=\"item.label\" :value=\"item.value\"></el-option>\n                                    </el-select>\n                                </template>\n                            </el-table-column>\n                            <el-table-column prop=\"description\" label=\"参数说明\" min-width=\"20%\">\n                                <template slot-scope=\"scope\">\n                                    <el-input v-model.trim=\"scope.row.description\" :value=\"scope.row.desc\" placeholder=\"请输入参数说明\"></el-input>\n                                </template>\n                            </el-table-column>\n                            <el-table-column label=\"操作\" min-width=\"15%\">\n                                <template slot-scope=\"scope\">\n                                    <el-button class=\"el-icon-delete\" size=\"mini\" @click=\"delResponse(scope.$index)\"></el-button>\n                                    <el-button v-if=\"scope.$index===(form.response.length-1)\" size=\"mini\" class=\"el-icon-plus\" @click=\"addResponse\"></el-button>\n                                    <!--<el-button type=\"primary\" size=\"mini\" style=\"margin-bottom: 5px\" @click=\"handleResponseEdit(scope.$index, scope.row)\">更多设置</el-button>-->\n                                </template>\n                            </el-table-column>\n                        </el-table>\n                    </el-collapse-item>\n                    <el-collapse-item title=\"返回样例\" name=\"4\">\n                        <div style=\"margin-bottom: 10px\">\n                            <el-button type=\"primary\" size=\"mini\" @click=\"formatResponse\">格式转换</el-button>\n                            <el-button type=\"primary\" size=\"mini\" @click=\"updateResponse\">生成返回参数</el-button>\n                        </div>\n                        <el-card class=\"box-card\">\n                            <!--<div slot=\"header\" class=\"clearfix\">-->\n                                <!--<span v-model=\"form.statusCode\" style=\"font-size: 25px\">{{form.statusCode}}</span>-->\n                            <!--</div>-->\n                            <div v-model=\"form.mockData\" v-show=\"!format\">\n                                <el-input v-model=\"form.mockData\" :value=\"form.mockData\" type=\"textarea\" :rows=\"5\" placeholder=\"返回样例\"></el-input>\n                                <!--<div style=\"word-break: break-all;overflow:auto;overflow-x:hidden\">{{form.mockData}}</div>-->\n                            </div>\n                            <div v-show=\"format\">\n                                <!--<pre id=\"formResult\" style=\"border: 1px solid #e6e6e6;word-break: break-all;overflow:auto;overflow-x:hidden\">{{form.resultData}}</pre>-->\n                                <json-viewer :value=\"form.mockJsonData\" :expand-depth=5 copyable></json-viewer>\n                            </div>\n                            <div v-show=\"!form.mockData\" class=\"raw\">暂无数据</div>\n                        </el-card>\n                    </el-collapse-item>\n                    <!--<el-collapse-item title=\"普通mock\" name=\"4\">-->\n                        <!--<el-card class=\"box-card\">-->\n                            <!--<div slot=\"header\" class=\"clearfix\">-->\n                                <!--<el-select v-model=\"form.mockCode\" placeholder=\"HTTP状态\">-->\n                                    <!--<el-option v-for=\"(item,index) in httpCode\" :key=\"index+''\" :label=\"item.label\" :value=\"item.value\"></el-option>-->\n                                <!--</el-select>-->\n                            <!--</div >-->\n                            <!--<el-input v-model.trim=\"form.mockData\" type=\"textarea\" :rows=\"8\" placeholder=\"请输入mock内容\"></el-input>-->\n                        <!--</el-card>-->\n                    <!--</el-collapse-item>-->\n                </el-collapse>\n            </el-row>\n        </el-form>\n    </section>\n</template>\n<script>\n    import Treeselect from '@riophae/vue-treeselect'\n    // import the styles\n    import '@riophae/vue-treeselect/dist/vue-treeselect.css'\n    import { test } from '../../../../api/api'\n//    import SelectTree from \"../../../../components/treeSelect.vue\";\n    import $ from 'jquery'\n    import axios from 'axios'\n    export default {\n        components: {\n//          SelectTree,\n          Treeselect,\n        },\n        data() {\n            return {\n                type: [{value: 'http', label: '普通http'},\n                    {value: 'jyb', label: '加油宝app'},\n                    {value: 'service', label: '微服务'}],\n                request: [{value: 'GET', label: 'GET'},\n                    {value: 'POST', label: 'POST'},\n                    {value: 'PUT', label: 'PUT'},\n                    {value: 'DELETE', label: 'DELETE'}],\n                Http: [{value: 'HTTP', label: 'HTTP'},\n                    {value: 'HTTPS', label: 'HTTPS'}],\n                paramType: [{value: 'Int', label: 'Int'},\n                    {value: 'String', label: 'String'},\n                    {value: 'Object', label: 'Object'},\n                    {value: 'Array', label: 'Array'}],\n                checkHeadList: [],\n                checkParameterList: [],\n                ParameterType: true,\n                group: [],\n                requestParameterType: \"application/x-www-form-urlencoded\",\n                status: [{value: true, label: '启用'},\n                    {value: false, label: '禁用'}],\n                header: [{value: 'Accept', label: 'Accept'},\n                    {value: 'Accept-Charset', label: 'Accept-Charset'},\n                    {value: 'Accept-Encoding', label: 'Accept-Encoding'},\n                    {value: 'Accept-Language', label: 'Accept-Language'},\n                    {value: 'Accept-Ranges', label: 'Accept-Ranges'},\n                    {value: 'Authorization', label: 'Authorization'},\n                    {value: 'Cache-Control', label: 'Cache-Control'},\n                    {value: 'Connection', label: 'Connection'},\n                    {value: 'Cookie', label: 'Cookie'},\n                    {value: 'Content-Length', label: 'Content-Length'},\n                    {value: 'Content-Type', label: 'Content-Type'},\n                    {value: 'Content-MD5', label: 'Content-MD5'},\n                    {value: 'Date', label: 'Date'},\n                    {value: 'Expect', label: 'Expect'},\n                    {value: 'From', label: 'From'},\n                    {value: 'Host', label: 'Host'},\n                    {value: 'If-Match', label: 'If-Match'},\n                    {value: 'If-Modified-Since', label: 'If-Modified-Since'},\n                    {value: 'If-None-Match', label: 'If-None-Match'},\n                    {value: 'If-Range', label: 'If-Range'},\n                    {value: 'If-Unmodified-Since', label: 'If-Unmodified-Since'},\n                    {value: 'Max-Forwards', label: 'Max-Forwards'},\n                    {value: 'Origin', label: 'Origin'},\n                    {value: 'Pragma', label: 'Pragma'},\n                    {value: 'Proxy-Authorization', label: 'Proxy-Authorization'},\n                    {value: 'Range', label: 'Range'},\n                    {value: 'Referer', label: 'Referer'},\n                    {value: 'TE', label: 'TE'},\n                    {value: 'Upgrade', label: 'Upgrade'},\n                    {value: 'User-Agent', label: 'User-Agent'},\n                    {value: 'Via', label: 'Via'},\n                    {value: 'Warning', label: 'Warning'}],\n                header4: \"\",\n                addParameterFormVisible: false,\n                addResponseFormVisible: false,\n                required4:[{value: true, label: '是'},\n                    {value: false, label: '否'}],\n                httpCode:[{value: '', label: ''},\n                    {value: '200', label: '200'},\n                    {value: '404', label: '404'},\n                    {value: '400', label: '400'},\n                    {value: '500', label: '500'},\n                    {value: '502', label: '502'},\n                    {value: '302', label: '302'}],\n                radioType: \"\",\n                result: true,\n                activeNames: ['2', '3', '4'],\n                id: \"\",\n                parameterRaw: \"\",\n                form: {\n                    firstGroup: null,\n                    name: '',\n                    type: 'http',\n                    status: 'True',\n                    method: 'GET',\n                    http: 'HTTP',\n                    addr: '',\n                    head: [{name: \"\", value: \"\"}],\n                    parameter: [{name: \"\", value: \"\", _type:\"String\", required:true, restrict: \"\", description: \"\"}],\n                    parameterType: \"\",\n                    response: [{name: \"\", value: \"\", _type:\"String\",required:true, description: \"\"}],\n                    mockCode: '',\n                    mockData: '',\n                    description: '',\n                },\n                FormRules: {\n                    name : [{ required: true, message: '请输入名称', trigger: 'blur' },\n                        { max: 50, message: '不能超过50个字', trigger: 'blur' }],\n                    type : [{ required: true, message: '请选择类型', trigger: 'blur'}],\n                    addr : [{ required: true, message: '请输入地址', trigger: 'blur' }],\n                    required : [{ required: true, message: '是否必须', trigger: 'blur' }],\n                    firstGroup : [{ type: 'number', required: true, message: '请选择分组', trigger: 'blur'},],\n                },\n                editForm: {\n                    name: \"\",\n                    value: \"\",\n                    required: \"\",\n                    restrict: \"\",\n                    description: \"\",\n                },\n                format: false,\n                // editLoading: false\n            }\n        },\n        methods: {\n            isJsonString(str) {\n                try {\n                    if (typeof JSON.parse(str) === \"object\") {\n                        return true;\n                    }\n                } catch(e) {\n                }\n                return false;\n            },\n            getApiInfo() {\n                let self = this;\n                axios.get(test+\"/api/api/api_info\", { params: {project_id: self.$route.params.project_id, api_id: self.$route.params.api_id}}).then(response => {\n                    let data=response.data;\n                    if (data.code === '999999') {\n                        data = data.data;\n                        self.id = data.id;\n                        self.form.name = data.name;\n                        self.form.type = data.type;\n                        if (data.status) {\n                            self.form.status = true;\n                        } else {\n                            self.form.status = false\n                        }\n                        self.form.method = data.requestType;\n                        self.form.http = data.httpType;\n                        self.form.addr = data.apiAddress;\n                        if (data.headers.length) {\n                            self.form.head = data.headers;\n                        }\n                        try {\n                            self.parameterRaw = data.requestParameterRaw.data.replace(/'/g, \"\\\"\").replace(/None/g, \"null\").replace(/True/g, \"true\").replace(/False/g, \"false\");\n                        } catch (e){\n\n                        }\n                        if (data.requestParameter.length) {\n                            self.form.parameter = data.requestParameter;\n                        }\n                        self.form.parameterType = data.requestParameterType;\n                        self.requestParameterType = self.form.parameterType;\n                        if (data.response.length) {\n                            self.form.response = data.response;\n                        }\n                        self.form.mockCode = data.mockCode;\n                        self.form.mockData = data.data;\n                        if (data.data) {\n                            self.form.mockJsonData = JSON.parse(data.data)\n                        }\n                        self.form.description=data.description;\n                        self.form.firstGroup = data.apiGroupLevelFirst;\n                    }\n                    else {\n                        self.$message.error({\n                            message: data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            updateApiInfo(){\n                if (this.form.mockData&&this.form.mockCode) {\n                    if (!this.isJsonString(this.form.mockData)) {\n                        this.$message({\n                            message: 'mock格式错误',\n                            center: true,\n                            type: 'error'\n                        })\n                    } else {\n                        this.updateApi()\n                    }\n                } else {\n                    this.updateApi()\n                }\n            },\n            updateApi: function () {\n                this.$refs.form.validate((valid) => {\n                    if (valid) {\n                        let self = this;\n                        this.$confirm('确认提交吗？', '提示', {}).then(() => {\n                            self.form.parameterType = self.requestParameterType;\n                            let _type = self.form.parameterType;\n                            let _parameter = {};\n                            let params={};\n\n                            if ( _type === 'application/x-www-form-urlencoded'||_type === 'application/json'||_type === 'text/plain') {\n                                if ( self.radioType === true) {\n                                    _type = 'raw';\n                                    self.form.parameter.forEach((item) => {\n                                        if (item.name) {\n                                            _parameter[item.name] = item.value\n                                        }\n                                        if (item.required) {\n                                            if(item._type==\"Object\"||item._type==\"Array\"){\n                                                params[item.name] = JSON.parse(item.value);\n                                            }else{\n                                                params[item.name] = item.value;\n                                            }\n                                        }\n                                    });\n                                    _parameter = JSON.stringify(_parameter)\n                                } else {\n                                    _parameter = self.form.parameter;\n                                    self.form.parameter.forEach((item) => {\n                                        if (item.required) {\n                                            if(item._type==\"Object\"||item._type==\"Array\"){\n                                                params[item.name] = JSON.parse(item.value);\n                                            }else{\n                                                params[item.name] = item.value;\n                                            }\n                                        }\n                                    });\n                                }\n                            } else {\n                                _parameter = self.parameterRaw\n                            }\n                            let param = JSON.stringify({\n                                project_id: Number(self.$route.params.project_id),\n                                id: Number(self.$route.params.api_id),\n                                apiGroupLevelFirst_id: Number(self.form.firstGroup),\n                                name: self.form.name,\n                                type: self.form.type,\n                                httpType: self.form.http,\n                                requestType: self.form.method,\n                                apiAddress: self.form.addr,\n                                status: self.form.status,\n                                headDict: self.form.head,\n                                requestParameterType: _type,\n                                requestList: _parameter,\n                                responseList: self.form.response,\n                                mockCode: self.form.mockCode,\n                                data: self.form.mockData,\n                                description: self.form.description,\n                                params: JSON.stringify(params)\n                            });\n                            if (self.parameterRaw&&_type===\"raw\") {\n                                if (!self.isJsonString(self.parameterRaw)) {\n                                    self.$message({\n                                        message: '源数据格式错误',\n                                        center: true,\n                                        type: 'error'\n                                    })\n                                } else {\n                                    // console.log(_parameter)\n                                    // console.log(typeof _parameter)\n                                    axios.post(test + \"/api/api/update_api\", param, {headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                                        let data=response.data;\n                                        if (data.code === '999999') {\n                                            self.$router.push({\n                                                name: '基础信息', params: {\n                                                    project_id: self.$route.params.project_id,\n                                                    api_id: self.$route.params.api_id\n                                                }\n                                            });\n                                            self.$message({\n                                                message: '修改成功',\n                                                center: true,\n                                                type: 'success'\n                                            })\n                                        }\n                                        else {\n                                            self.$message.error({\n                                                message: data.msg,\n                                                center: true,\n                                            })\n                                        }\n                                    }).catch(error=>{\n\n                                    });\n                                }\n                            } else {\n                                axios.post(test + \"/api/api/update_api\", param, {headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                                    let data=response.data;\n                                    if (data.code === '999999') {\n                                        self.$router.push({\n                                            name: '基础信息', params: {\n                                                project_id: self.$route.params.project_id,\n                                                api_id: self.$route.params.api_id\n                                            }\n                                        });\n                                        self.$message({\n                                            message: '修改成功',\n                                            center: true,\n                                            type: 'success'\n                                        })\n                                    }\n                                    else {\n                                        self.$message.error({\n                                            message: data.msg,\n                                            center: true,\n                                        })\n                                    }\n                                }).catch(error=>{\n\n                                });\n                            }\n                        }).catch(() => {});\n                    }\n                })\n            },\n            editParameterSubmit: function () {\n                this.$refs.editForm.validate((valid) => {\n                    if (valid) {\n                        this.form.parameter[this.id] = this.editForm;\n                        this.addParameterFormVisible = false\n                    }\n                })\n            },\n            handleParameterEdit: function (index, row) {\n                this.addParameterFormVisible = true;\n                this.id = index;\n                this.editForm = Object.assign({}, row);\n            },\n            editResponseSubmit: function () {\n                this.$refs.editForm.validate((valid) => {\n                    if (valid) {\n                        this.form.response[this.id] = this.editForm;\n                        this.addResponseFormVisible = false\n                    }\n                })\n            },\n            handleResponseEdit: function (index, row) {\n                this.addResponseFormVisible = true;\n                this.id = index;\n                this.editForm = Object.assign({}, row);\n            },\n            back(){\n                this.$router.go(-1); // 返回上一层\n\n            },\n            // 获取api分组\n            getApiGroupAndInfo() {\n                let self = this;\n                axios.get(test+\"/api/api/group\", {params:{project_id: this.$route.params.project_id},headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                    let data=response.data;\n                    if (data.code === '999999') {\n                        self.group = data.data;\n                    }else {\n                        self.$message.error({\n                            message: data.msg,\n                            center: true,\n                        })\n                    }\n                    this.getApiInfo();\n                }).catch(error=>{\n\n                });\n            },\n            addHead() {\n                let headers = {name: \"\", value: \"\"};\n                this.form.head.push(headers)\n            },\n            delHead(index) {\n                this.form.head.splice(index, 1);\n                if (this.form.head.length === 0) {\n                    this.form.head.push({name: \"\", value: \"\"})\n                }\n            },\n            addParameter() {\n                let headers = {name: \"\", value: \"\", _type:\"String\", required:true, restrict: \"\", description: \"\"};\n                this.form.parameter.push(headers)\n            },\n            delParameter(index) {\n                this.form.parameter.splice(index, 1);\n                if (this.form.parameter.length === 0) {\n                    this.form.parameter.push({name: \"\", value: \"\", _type:\"String\", required:true, restrict: \"\", description: \"\"})\n                }\n            },\n            addResponse() {\n                let headers = {name: \"\", value: \"\", _type:\"String\", required:true, description: \"\"};\n                this.form.response.push(headers)\n            },\n            delResponse(index) {\n                this.form.response.splice(index, 1);\n                if (this.form.response.length === 0) {\n                    this.form.response.push({name: \"\", value: \"\", _type:\"String\", required:true, description: \"\"})\n                }\n            },\n            changeParameterType() {\n                if (this.requestParameterType === 'application/json') {\n                    this.ParameterType = true;\n                    if(this.parameterRaw!=\"\"&&(this.form.parameter.length==0||this.form.parameter[0][\"name\"]==\"\")){\n                        try{\n                            let self=this;\n                            this.form.parameter=[];\n                            let json=JSON.parse(this.parameterRaw);\n                            $.each(json, function (name, value) {\n                                let type=\"String\";\n                                if(typeof(value)=='object'){\n                                    if(value instanceof Array){\n                                        type= 'Array'\n                                    }else if( value instanceof Object ){\n                                        type= 'Object';\n                                    }\n                                    value=JSON.stringify(value);\n                                }else if(typeof(value)=='number'){\n                                    type= 'Int';\n                                }\n                                let parameter = {name: name, value: value, _type:type,required:\"True\", restrict: \"\", description: \"\"};\n                                self.form.parameter.push(parameter);\n                            });\n                        }catch(e){\n                          alert(e);\n                        }\n                    }\n                } else if (this.requestParameterType === 'application/x-www-form-urlencoded'||this.requestParameterType === 'text/plain') {\n                    this.ParameterType = true;\n                } else {\n                    this.ParameterType = false;\n                }\n            },\n            showData() {\n                this.result = true\n            },\n            showHead(){\n                this.result = false\n            },\n            handleChange(val) {\n            },\n            onSubmit() {\n                console.log('submit!');\n            },\n            formatResponse(){\n                if(!this.format&&this.form.mockData!=\"\"){\n                    try{\n                        this.form.mockJsonData=JSON.parse(this.form.mockData);\n                    }catch(e){}\n                }\n                this.format = !this.format;\n            },\n            getDataType(value){\n                let type=\"String\";\n                try{\n                    if(value instanceof Array){\n                        type = 'Array';\n                    }else if(value instanceof Object){\n                        type = 'Object';\n                    }else if(typeof(value)=='number'){\n                        type = 'Int';\n                    }\n                }catch(Exception){}\n                return type;\n            },\n            updateResponse(){\n                this.$confirm('确认根据返回样例生成返回参数吗？', '提示', {}).then(() => {\n                    this.form.response=[];\n                    try{\n                        let data=JSON.parse(this.form.mockData);\n                        if(typeof(data)!='number'){\n                            this.convertResponse('',data,2);\n                        }\n                    }catch(err){\n                        alert(err);\n                    }\n                }).catch(() => {});\n            },\n            convertResponse(parent,data,depth){\n                let self=this;\n                $.each(data,function(name,value){\n                    let item={required:true, description: \"\"};\n                    try{\n                        if(parent!=''){\n                            item['name']=parent + '.' + name;\n                        }else{\n                            item['name']=name;\n                        }\n                        let type=self.getDataType(value);\n                        if(type=='String'||type=='Int'){\n                            item['_type']=type;\n                            item['value']=value;\n                            self.form.response.push(item);\n                        }else if(type=='Array'){\n                            item['_type']=type;\n                            let childType=self.getDataType(value[0]);\n                            if(childType=='String'||childType=='Int'){\n                                item['value']=JSON.stringify(value);\n                                self.form.response.push(item);\n                            }else if(childType=='Object'){\n                                item['value']='[]';\n                                self.form.response.push(item);\n                                if(depth>0){\n                                    self.convertResponse(item['name']+\"[*]\",value[0],depth-1);\n                                }\n                            }\n                        }else if(type=='Object'){\n                            item['_type']=type;\n                            item['value']='{}';\n                            self.form.response.push(item);\n                            if(depth>0){\n                                self.convertResponse(item['name'],value,depth-1);\n                            }\n                        }\n                    }catch(err){\n                        alert(err.message);\n                    }\n                })\n            },\n            getValue(value) {\n                this.form.firstGroup = value;\n            },\n            jybDecodePost() {\n                var encodePost=this.parameterRaw.trim();\n                if(encodePost==\"\")return;\n                var apiUrl=this.form.addr.trim();\n                var pos=0;\n                var reg = new RegExp(\"(^|&)_pos=([^&]*)(&|$)\", \"i\");\n                var r = apiUrl.match(reg);\n                if (r != null) {\n                    pos=unescape(r[2]);\n                }\n                var version=\"\";\n                reg = new RegExp(\"(^|&)ver=([^&]*)(&|$)\", \"i\");\n                r = apiUrl.match(reg);\n                if (r != null) {\n                    version=unescape(r[2]);\n                }\n                let params = {\n                    pos: pos,\n                    post:encodePost,\n                    version:version\n                };\n                let headers = {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: 'Token '+sessionStorage.getItem('token')\n                };\n                let self=this;\n                axios.post(test + '/api/api/jybdecode', params,{headers:headers}).then(res => {\n                    let {msg, code, data} = res.data;\n                    if (code === '999999') {\n                        self.parameterRaw=JSON.stringify(data);\n                    }else {\n                        self.$message.error({\n                            message: msg,\n                            center: true,\n                        })\n                    }\n                })\n            },\n        },\n        watch: {\n            requestParameterType() {\n                this.changeParameterType()\n            }\n        },\n        mounted() {\n            this.getApiGroupAndInfo();\n        }\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n    .return-list {\n        margin-top: 0px;\n        margin-bottom: 10px;\n        border-radius: 25px;\n    }\n    .head-class {\n        font-size: 17px\n    }\n    .parameter-a {\n        display: block;\n    }\n    .parameter-b {\n        display: none;\n    }\n    .selectInput {\n        position: absolute;\n        /*margin-left: 7px;*/\n        padding-left: 9px;\n        width: 180px;\n        /*border-radius:0px;*/\n        /*height: 38px;*/\n        left: 1px;\n        border-right: 0px;\n    }\n</style>\n<style lang=\"scss\">\n    .selectInput{\n        input{\n            border-right: 0px;\n            border-radius: 4px 0px 0px 4px;\n        }\n    }\n</style>\n"],"sourceRoot":"src/views/project/api/updateApi"}]}