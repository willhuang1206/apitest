{"remainingRequest":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/babel-loader/lib/index.js!/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/huangrong/workspace/apitest/apitest-web/src/views/project/auto/autoList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/huangrong/workspace/apitest/apitest-web/src/views/project/auto/autoList.vue","mtime":1590650907313},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Treeselect from '@riophae/vue-treeselect';\nimport Cookies from 'js-cookie';\nimport '@riophae/vue-treeselect/dist/vue-treeselect.css'; //    import SelectTree from \"../../../components/treeSelect.vue\";\n\nimport { test, getProjectConfig, runAutomation } from \"../../../api/api\";\nimport $ from 'jquery';\nimport moment from \"moment\";\nimport axios from 'axios';\nexport default {\n  components: {\n    //          SelectTree,\n    Treeselect: Treeselect\n  },\n  data: function data() {\n    return {\n      automationType: [{\n        value: '',\n        label: ''\n      }, {\n        value: 'case',\n        label: '普通用例'\n      }, {\n        value: 'reuse',\n        label: '可复用用例'\n      }, {\n        value: 'list',\n        label: '用例集'\n      }, {\n        value: 'data',\n        label: '数据用例'\n      }, {\n        value: 'monitor',\n        label: '接口监控'\n      }],\n      listType: \"\",\n      filters: {\n        name: '',\n        type: ''\n      },\n      env: '',\n      automationlist: [],\n      total: 0,\n      pages: 0,\n      page: 1,\n      page_size: 20,\n      listLoading: false,\n      sels: [],\n      //列表选中列\n      delLoading: false,\n      disDel: true,\n      TestStatus: false,\n      updateGroupFormVisible: false,\n      updateGroupForm: {\n        firstGroup: null\n      },\n      updateGroupFormRules: {\n        firstGroup: [{\n          type: 'number',\n          required: true,\n          message: '请选择父分组',\n          trigger: 'blur'\n        }]\n      },\n      group: [],\n      updateGroupLoading: false,\n      update: true,\n      editFormVisible: false,\n      //编辑界面是否显示\n      editFormTitle: \"\",\n      editLoading: false,\n      editFormRules: {\n        name: [{\n          required: true,\n          message: '请输入名称',\n          trigger: 'blur'\n        }, {\n          min: 1,\n          max: 1024,\n          message: '长度在 1 到 1024 个字符',\n          trigger: 'blur'\n        }],\n        group: [{\n          required: true,\n          message: '请选择分组',\n          trigger: 'blur'\n        }],\n        description: [{\n          required: false,\n          message: '请输入描述',\n          trigger: 'blur'\n        }, {\n          max: 1024,\n          message: '不能超过1024个字符',\n          trigger: 'blur'\n        }]\n      },\n      //编辑界面数据\n      editForm: {\n        name: '',\n        group: null,\n        description: '',\n        params: '{}',\n        type: 'case'\n      },\n      getResultTimer: '',\n      importAutomation: {\n        visible: false,\n        loading: false,\n        rules: {\n          fromGroup: [{\n            type: 'string',\n            required: true,\n            message: '请选择源分组',\n            trigger: 'blur'\n          }],\n          toGroup: [{\n            type: 'string',\n            required: true,\n            message: '请选择导入分组',\n            trigger: 'blur'\n          }]\n        },\n        value: null,\n        fromGroup: null,\n        toGroup: null,\n        fromDate: \"\",\n        toDate: \"\",\n        groups: [],\n        fileName: \"\"\n      },\n      fileList: [],\n      formData: [],\n      role: Cookies.get('role'),\n      uploadFileUrl: test + \"/api/imports/uploadfile\",\n      downloadTemplateUrl: test + \"/api/imports/downloadtemplate\"\n    };\n  },\n  methods: {\n    handleUploadSuccess: function handleUploadSuccess(res, file) {\n      this.importAutomation.fileName = file.name;\n    },\n    handleSearch: function handleSearch() {\n      this.page = 1;\n      this.getAutomationList();\n    },\n    // 获取用例列表\n    getAutomationList: function getAutomationList() {\n      this.listLoading = true;\n      var self = this;\n      sessionStorage.setItem(\"auto_name\", self.filters.name);\n      sessionStorage.setItem(\"auto_type\", self.filters.type);\n      var param = {\n        project_id: this.$route.params.project_id,\n        page: self.page,\n        name: self.filters.name,\n        type: self.filters.type\n      };\n\n      if (this.$route.params.firstGroup) {\n        param['first_group_id'] = this.$route.params.firstGroup;\n      }\n\n      axios.get(test + \"/api/automation/automation_list\", {\n        params: param\n      }).then(function (response) {\n        self.listLoading = false;\n\n        if (response.data.code === '999999') {\n          self.total = response.data.data.total;\n          self.pages = response.data.data.pages;\n          self.page_size = response.data.data.page_size;\n          self.automationlist = [];\n          response.data.data.data.forEach(function (item) {\n            item.result = false;\n            self.automationlist.push(item);\n          });\n        } else {\n          self.$message.error({\n            message: response.data.msg,\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    // 获取接口列表\n    getAutomationDomainList: function getAutomationDomainList() {\n      this.importAutomation.loading = true;\n      var self = this;\n      var param = {};\n      axios.get(test + \"/api/imports/autodomainlist\", {\n        params: param,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: 'Token ' + sessionStorage.getItem('token')\n        }\n      }).then(function (response) {\n        var data = response.data;\n        self.importAutomation.loading = false;\n\n        if (data.code === '999999') {\n          //                        alert(JSON.stringify(data.data));\n          self.importAutomation.groups = data.data;\n        } else {\n          self.$message.error({\n            message: data.msg,\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    // 修改用例所属分组\n    updateGroupSubmit: function updateGroupSubmit() {\n      var _this = this;\n\n      var ids = this.sels.map(function (item) {\n        return item.id;\n      });\n      var self = this;\n      this.$confirm('确认修改所属分组吗？', '提示', {\n        type: 'warning'\n      }).then(function () {\n        self.updateGroupLoading = true; //NProgress.start();\n\n        var params = JSON.stringify({\n          project_id: Number(_this.$route.params.project_id),\n          group_id: self.updateGroupForm.firstGroup,\n          ids: ids\n        });\n        var header = {\n          \"Content-Type\": \"application/json\",\n          Authorization: 'Token ' + sessionStorage.getItem('token')\n        };\n        axios.post(test + \"/api/automation/update_automation_group\", params, {\n          headers: header\n        }).then(function (response) {\n          self.updateGroupLoading = false;\n\n          if (response.data.code === '999999') {\n            self.$message({\n              message: '修改成功',\n              center: true,\n              type: 'success'\n            });\n            self.$router.push({\n              name: '分组自动化列表',\n              params: {\n                project_id: self.$route.params.project_id,\n                firstGroup: self.updateGroupForm.firstGroup\n              }\n            });\n          } else {\n            self.$message.error({\n              message: response.data.msg,\n              center: true\n            });\n          }\n\n          self.updateGroupFormVisible = false;\n          self.getAutomationList();\n        }).catch(function (error) {});\n      }).catch(function () {});\n    },\n    importAutomationSubmit: function importAutomationSubmit() {\n      var _this2 = this;\n\n      var self = this;\n      this.$confirm('确认导入用例吗？', '提示', {\n        type: 'warning'\n      }).then(function () {\n        _this2.importAutomation.loading = true; //NProgress.start();\n\n        var params = JSON.stringify({\n          project_id: Number(_this2.$route.params.project_id),\n          group_id: _this2.importAutomation.toGroup,\n          fileName: _this2.importAutomation.fileName\n        });\n        axios.post(test + \"/api/imports/automation_importfromexcel\", params, {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: 'Token ' + sessionStorage.getItem('token')\n          }\n        }).then(function (response) {\n          var data = response.data;\n          self.importAutomation.loading = false;\n\n          if (data.code === '999999') {\n            self.$message({\n              message: data.msg,\n              center: true,\n              type: 'success'\n            });\n          } else {\n            self.$message.error({\n              message: data.msg,\n              center: true\n            });\n          }\n\n          self.importAutomation.visible = false;\n          self.getAutomationList();\n        }).catch(function (error) {});\n      }).catch(function () {});\n    },\n    // 获取用例分组\n    getAutomationGroup: function getAutomationGroup() {\n      var self = this;\n      axios.get(test + \"/api/automation/group\", {\n        params: {\n          project_id: this.$route.params.project_id\n        }\n      }).then(function (response) {\n        if (response.data.code === '999999') {\n          self.group = response.data.data;\n        } else {\n          self.$message.error({\n            message: response.data.msg,\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    changeGroup: function changeGroup() {\n      this.getAutomationGroup();\n      this.updateGroupFormVisible = true;\n    },\n    handleImportAutomation: function handleImportAutomation() {\n      this.getAutomationGroup(); //                this.getAutomationDomainList();\n\n      this.importAutomation.visible = true;\n    },\n    //删除\n    handleDel: function handleDel(index, row) {\n      var _this3 = this;\n\n      this.$confirm('确认删除用例[' + row.name + ']吗?', '提示', {\n        type: 'warning'\n      }).then(function () {\n        _this3.listLoading = true; //NProgress.start();\n\n        var self = _this3;\n        var param = JSON.stringify({\n          project_id: Number(_this3.$route.params.project_id),\n          ids: [row.id]\n        });\n        var header = {\n          \"Content-Type\": \"application/json\",\n          Authorization: 'Token ' + sessionStorage.getItem('token')\n        };\n        axios.post(test + \"/api/automation/del_automation\", param, {\n          headers: header\n        }).then(function (response) {\n          if (response.data.code === '999999') {\n            self.$message({\n              message: '删除成功',\n              center: true,\n              type: 'success'\n            });\n          } else {\n            self.$message.error({\n              message: response.data.msg,\n              center: true\n            });\n          }\n\n          _this3.listLoading = true;\n          self.getAutomationList();\n        }).catch(function (error) {\n          _this3.listLoading = true;\n        });\n      }).catch(function () {});\n    },\n    handleCurrentChange: function handleCurrentChange(val) {\n      this.page = val;\n      this.getAutomationList();\n    },\n    selsChange: function selsChange(sels) {\n      if (sels.length > 0) {\n        this.sels = sels;\n        this.update = false;\n      } else {\n        this.update = true;\n      }\n    },\n    //批量删除\n    batchRemove: function batchRemove() {\n      var _this4 = this;\n\n      var ids = this.sels.map(function (item) {\n        return item.id;\n      });\n      var self = this;\n      this.$confirm('确认删除选中记录吗？', '提示', {\n        type: 'warning'\n      }).then(function () {\n        self.listLoading = true; //NProgress.start();\n\n        var param = JSON.stringify({\n          project_id: Number(_this4.$route.params.project_id),\n          ids: ids\n        });\n        var header = {\n          \"Content-Type\": \"application/json\",\n          Authorization: 'Token ' + sessionStorage.getItem('token')\n        };\n        axios.post(test + \"/api/automation/del_automation\", param, {\n          headers: header\n        }).then(function (response) {\n          self.listLoading = false;\n\n          if (response.data.code === '999999') {\n            self.$message({\n              message: '删除成功',\n              center: true,\n              type: 'success'\n            });\n          } else {\n            self.$message.error({\n              message: response.data.msg,\n              center: true\n            });\n          }\n\n          self.getAutomationList();\n        }).catch(function (error) {});\n      }).catch(function () {});\n    },\n    //显示编辑界面\n    handleEdit: function handleEdit(index, row) {\n      this.getAutomationGroup();\n      this.editFormTitle = \"编辑\";\n      this.editFormVisible = true;\n      this.editForm = {\n        \"id\": row.id,\n        \"name\": row.name,\n        \"type\": row.type,\n        \"params\": row.params,\n        \"group\": row.group,\n        \"description\": row.description\n      };\n    },\n    //显示新增页面,复制用例\n    handleCopy: function handleCopy(index, row) {\n      this.getAutomationGroup();\n      this.editFormTitle = \"复制\";\n      this.editForm = {\n        \"copyId\": row.id,\n        \"name\": row.name,\n        \"type\": row.type,\n        \"params\": row.params,\n        \"group\": row.group,\n        \"description\": row.description\n      };\n      this.editFormVisible = true;\n    },\n    //显示新增界面\n    handleAdd: function handleAdd() {\n      this.getAutomationGroup();\n      this.editFormTitle = \"新增\";\n      this.editFormVisible = true;\n    },\n    // 修改用例\n    editSubmit: function editSubmit() {\n      var _this5 = this;\n\n      if (this.editForm.id == null) {\n        this.addSubmit();\n      } else {\n        var self = this;\n        this.$refs.editForm.validate(function (valid) {\n          if (valid) {\n            _this5.$confirm('确认提交吗？', '提示', {}).then(function () {\n              self.editLoading = true; //NProgress.start();\n\n              var params = JSON.stringify({\n                project_id: Number(_this5.$route.params.project_id),\n                id: Number(self.editForm.id),\n                type: self.editForm.type,\n                name: self.editForm.name,\n                params: self.editForm.params,\n                group_id: Number(_this5.editForm.group),\n                description: self.editForm.description\n              });\n              var headers = {\n                \"Content-Type\": \"application/json\",\n                Authorization: 'Token ' + sessionStorage.getItem('token')\n              };\n              axios.post(test + \"/api/automation/update_automation\", params, {\n                headers: headers\n              }).then(function (response) {\n                self.editLoading = false;\n\n                if (response.data.code === '999999') {\n                  self.$message({\n                    message: '修改成功',\n                    center: true,\n                    type: 'success'\n                  });\n                  self.$refs['editForm'].resetFields();\n                  self.editFormVisible = false;\n                  self.getAutomationList();\n                } else if (response.data.code === '999997') {\n                  self.$message.error({\n                    message: response.data.msg,\n                    center: true\n                  });\n                } else {\n                  self.$message.error({\n                    message: response.data.msg,\n                    center: true\n                  });\n                }\n              }).catch(function (error) {});\n            }).catch(function () {});\n          }\n        });\n      }\n    },\n    //新增用例\n    addSubmit: function addSubmit() {\n      var _this6 = this;\n\n      this.$refs.editForm.validate(function (valid) {\n        if (valid) {\n          var self = _this6;\n\n          _this6.$confirm('确认提交吗？', '提示', {}).then(function () {\n            self.editLoading = true; //NProgress.start();\n\n            var param = {\n              project_id: Number(_this6.$route.params.project_id),\n              type: _this6.editForm.type,\n              group_id: Number(_this6.editForm.group),\n              name: self.editForm.name,\n              params: self.editForm.params,\n              description: self.editForm.description\n            };\n\n            if (_this6.editFormTitle == \"复制\") {\n              param[\"copyId\"] = self.editForm.copyId;\n            }\n\n            param = JSON.stringify(param);\n            var headers = {\n              \"Content-Type\": \"application/json\",\n              Authorization: 'Token ' + sessionStorage.getItem('token')\n            };\n            axios.post(test + \"/api/automation/add_automation\", param, {\n              headers: headers\n            }).then(function (response) {\n              self.editLoading = false;\n\n              if (response.data.code === '999999') {\n                self.$message({\n                  message: '添加成功',\n                  center: true,\n                  type: 'success'\n                });\n                self.$refs['editForm'].resetFields();\n                self.editFormVisible = false;\n                self.getAutomationList();\n              } else if (response.data.code === '999997') {\n                self.$message.error({\n                  message: response.data.msg,\n                  center: true\n                });\n              } else {\n                self.$message.error({\n                  message: response.data.msg,\n                  center: true\n                });\n                self.$refs['editForm'].resetFields();\n                self.editFormVisible = false;\n                self.getAutomationList();\n              }\n            }).catch(function (error) {});\n          }).catch(function () {});\n        }\n      });\n    },\n    init: function init() {\n      if (sessionStorage.getItem(\"auto_name\") != null) {\n        this.filters.name = sessionStorage.getItem(\"auto_name\");\n      }\n\n      if (sessionStorage.getItem(\"auto_type\") != null) {\n        this.filters.type = sessionStorage.getItem(\"auto_type\");\n      } //                this.getAutomationGroup();\n\n\n      this.getAutomationList();\n\n      if (this.$route.params.firstGroup) {\n        this.updateGroupForm.firstGroup = Number(this.$route.params.firstGroup);\n        this.editForm.group = Number(this.$route.params.firstGroup);\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.init();\n  },\n  watch: {\n    '$route': function $route(to, from) {\n      //监听路由是否变化\n      if (to.query != from.query) {\n        this.init(); //重新加载数据\n      }\n    }\n  }\n};",{"version":3,"sources":["autoList.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <section>\n        <!--工具条-->\n        <el-col :span=\"24\" class=\"toolbar\" style=\"padding-bottom: 0px;\">\n            <el-form :inline=\"true\" :model=\"filters\" @submit.native.prevent>\n                <el-form-item>\n                    <el-input v-model.trim=\"filters.name\" placeholder=\"名称\" @keyup.enter.native=\"handleSearch\"></el-input>\n                </el-form-item>\n                <el-form-item>\n                    <el-select v-model=\"filters.type\"  placeholder=\"类型\">\n                        <el-option v-for=\"(item,index) in automationType\" :label=\"item.label\" :value=\"item.value\"></el-option>\n                    </el-select>\n                </el-form-item>\n                <el-form-item>\n                    <el-button size=\"medium\" type=\"primary\" @click=\"handleSearch\">查询</el-button>\n                </el-form-item>\n                <el-form-item>\n                    <el-button size=\"medium\" type=\"primary\" @click=\"handleAdd\">新增</el-button>\n                </el-form-item>\n                <el-form-item>\n                  <el-button size=\"medium\" type=\"primary\" @click=\"handleImportAutomation\">导入</el-button>\n                </el-form-item>\n                <el-form-item>\n                    <el-button size=\"medium\" type=\"primary\" :disabled=\"update\" @click=\"changeGroup\">修改分组</el-button>\n                </el-form-item>\n            </el-form>\n        </el-col>\n        <el-dialog width=\"40%\" :title=\"editFormTitle\" :visible.sync=\"editFormVisible\" :close-on-click-modal=\"false\">\n            <el-form :model=\"editForm\"  :rules=\"editFormRules\" ref=\"editForm\" label-width=\"80px\">\n                <el-form-item label=\"名称\" prop=\"name\">\n                    <el-input v-model.trim=\"editForm.name\" auto-complete=\"off\"></el-input>\n                </el-form-item>\n                <el-form-item label=\"类型\" label-width=\"83px\" prop=\"type\">\n                    <el-select v-model=\"editForm.type\" placeholder=\"类型\">\n                        <el-option v-for=\"(item,index) in automationType\" :key=\"index+''\" :label=\"item.label\" :value=\"item.value\"></el-option>\n                    </el-select>\n                </el-form-item>\n                <el-form-item label=\"分组\" label-width=\"83px\" prop=\"group\">\n                    <treeselect v-model=\"editForm.group\" :options=\"group\" placeholder=\"请选择\"/>\n                    <!--<SelectTree :options=\"group\" :filter=\"false\" :value=\"editForm.group\"/>-->\n                    <!--<el-select v-model=\"editForm.group\" placeholder=\"分组\">-->\n                        <!--<el-option v-for=\"(item,index) in group\" :key=\"index+''\" :label=\"item.name\" :value=\"item.id\"></el-option>-->\n                    <!--</el-select>-->\n                </el-form-item>\n                <el-form-item label=\"参数\" prop='params'>\n                    <el-input type=\"textarea\" :rows=\"4\" v-model=\"editForm.params\"></el-input>\n                </el-form-item>\n                <el-form-item label=\"描述\" prop='description'>\n                    <el-input type=\"textarea\" :rows=\"4\" v-model=\"editForm.description\"></el-input>\n                </el-form-item>\n            </el-form>\n            <div slot=\"footer\" class=\"dialog-footer\">\n                <el-button @click.native=\"editFormVisible = false\">取消</el-button>\n                <el-button type=\"primary\" @click.native=\"editSubmit\" :loading=\"editLoading\">提交</el-button>\n            </div>\n        </el-dialog>\n\n        <el-dialog width=\"40%\" title=\"修改所属分组\" :visible.sync=\"updateGroupFormVisible\" :close-on-click-modal=\"false\">\n            <el-form :model=\"updateGroupForm\" label-width=\"80px\"  :rules=\"updateGroupFormRules\" ref=\"updateGroupForm\">\n                <el-form-item label=\"分组\" prop=\"firstGroup\">\n                    <treeselect v-model=\"updateGroupForm.firstGroup\" :options=\"group\" placeholder=\"请选择\"/>\n                    <!--<SelectTree :options=\"group\" :filter=\"false\" :value=\"updateGroupForm.firstGroup\"/>-->\n                    <!--<el-select v-model=\"updateGroupForm.firstGroup\" placeholder=\"请选择分组\">-->\n                        <!--<el-option v-for=\"(item,index) in group\" :key=\"index+''\" :label=\"item.name\" :value=\"item.id\">-->\n                        <!--</el-option>-->\n                    <!--</el-select>-->\n                </el-form-item>\n            </el-form>\n            <div slot=\"footer\" class=\"dialog-footer\">\n                <el-button @click.native=\"updateGroupFormVisible = false\">取消</el-button>\n                <el-button type=\"primary\" @click.native=\"updateGroupSubmit\" :loading=\"updateGroupLoading\">提交</el-button>\n            </div>\n        </el-dialog>\n\n        <el-dialog width=\"40%\" title=\"导入用例\" :visible.sync=\"importAutomation.visible\" :close-on-click-modal=\"false\">\n          <el-form label-width=\"80px\" :rules=\"importAutomation.rules\">\n            <!--<el-form-item label=\"导入分组\" prop=\"importApi.importGroup\">-->\n              <!--<el-select v-model=\"updatePublishForm.publish\" placeholder=\"请选择\">-->\n                <!--<el-option v-for=\"(item,index) in updatePublishForm.publishlist\" :key=\"index+''\" :label=\"item\" :value=\"item\">-->\n                <!--</el-option>-->\n              <!--</el-select>-->\n              <!--<el-tree :data=\"importApi.data\" show-checkbox></el-tree>-->\n            <!--</el-form-item>-->\n            <el-form-item label=\"文件名:\" prop='importAutomation.fileName'>\n              <el-input v-model.trim=\"importAutomation.fileName\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"导入分组:\" prop=\"importAutomation.toGroup\">\n              <treeselect v-model=\"importAutomation.toGroup\" :options=\"group\" placeholder=\"请选择\"/>\n              <!--<SelectTree :options=\"group\" :filter=\"false\" :value=\"importAutomation.toGroup\"/>-->\n              <!--<el-select v-model=\"importAutomation.toGroup\" placeholder=\"请选择\">-->\n                <!--<el-option v-for=\"(item,index) in group\" :key=\"index+''\" :label=\"item.name\" :value=\"item.id\">-->\n                <!--</el-option>-->\n              <!--</el-select>-->\n            </el-form-item>\n            <el-row>\n              <a :href=\"downloadTemplateUrl\">下载模板</a>\n              <el-upload\n                class=\"upload-demo\"\n                :action=\"uploadFileUrl\"\n                :on-success=\"handleUploadSuccess\"\n                :limit=\"1\"\n                accept=\".xls,.xlsx\"\n                :file-list=\"fileList\">\n                <el-button size=\"small\" type=\"primary\">点击上传</el-button>\n                <div slot=\"tip\" class=\"el-upload__tip\">只能上传并导入excel文件</div>\n              </el-upload>\n            </el-row>\n            </el-form>\n          <div slot=\"footer\" class=\"dialog-footer\">\n            <el-button @click.native=\"importAutomation.visible = false\">取消</el-button>\n            <el-button type=\"primary\" @click.native=\"importAutomationSubmit\" :loading=\"importAutomation.loading\">提交</el-button>\n          </div>\n        </el-dialog>\n\n        <!--列表-->\n        <el-table :data=\"automationlist\" stripe border element-loading-text=\"拼命加载中\" element-loading-spinner=\"el-icon-loading\" highlight-current-row v-loading=\"listLoading\" @selection-change=\"selsChange\" style=\"width: 100%;\">\n            <el-table-column type=\"selection\" min-width=\"4%\">\n            </el-table-column>\n            <el-table-column prop=\"id\" label=\"ID\" sortable min-width=\"8%\">\n            </el-table-column>\n            <el-table-column prop=\"name\" label=\"名称\" sortable min-width=\"14%\" show-overflow-tooltip>\n                <template slot-scope=\"scope\">\n                    <el-icon name=\"name\"></el-icon>\n                    <router-link :to=\"{ name: '自动化步骤列表', params: {automation_id: scope.row.id}}\" style='text-decoration: none;'>{{ scope.row.name }}</router-link>\n                </template>\n            </el-table-column>\n            <el-table-column prop=\"type\" label=\"类型\" min-width=\"6%\" show-overflow-tooltip>\n            </el-table-column>\n            <el-table-column prop=\"description\" label=\"描述\" min-width=\"20%\" show-overflow-tooltip>\n            </el-table-column>\n            <el-table-column prop=\"userUpdate\" label=\"更新人\" min-width=\"8%\" show-overflow-tooltip>\n            </el-table-column>\n            <el-table-column prop=\"updateTime\" label=\"更新日期\" min-width=\"15%\" show-overflow-tooltip>\n            </el-table-column>\n            <!--<el-table-column v-show=\"listType==='list'\" prop=\"result\" label=\"执行结果\" min-width=\"10%\" sortable show-overflow-tooltip>-->\n                <!--<template slot-scope=\"scope\">-->\n                    <!--<span v-show=\"!scope.row.result\">尚无执行结果</span>-->\n                    <!--<span v-show=\"scope.row.result==='PASS'\" style=\"color: #11b95c;\">成功</span>-->\n                    <!--<span v-show=\"scope.row.result==='FAIL'\" style=\"color: #cc0000;\">失败</span>-->\n                <!--</template>-->\n            <!--</el-table-column>-->\n            <el-table-column label=\"操作\" min-width=\"15%\">\n                <template slot-scope=\"scope\">\n                  <!--<el-button-group>-->\n                    <!--<router-link :to=\"{ name: '更新自动化步骤', params: {automation_id: scope.row.id,type: 'update'}}\" style='text-decoration: none;'><el-button size=\"mini\"\">修改</el-button></router-link>-->\n                    <!--<el-button type=\"primary\" size=\"mini\" @click=\"handleCopy(scope.$index, scope.row)\">复制</el-button>-->\n                    <!--<el-button type=\"danger\" size=\"mini\" @click=\"handleDel(scope.$index, scope.row)\">删除</el-button>-->\n                  <!--</el-button-group>-->\n                  <el-dropdown>\n                    <router-link :to=\"{ name: '更新自动化步骤', params: {automation_id: scope.row.id,type: 'update'}}\" style='text-decoration: none;'>\n                      <el-button type=\"primary\" size=\"small\" plain>修改<i class=\"el-icon-arrow-down el-icon--right\"></i></el-button>\n                    </router-link>\n                    <el-dropdown-menu slot=\"dropdown\">\n                      <el-dropdown-item><el-button type=\"primary\" size=\"small\" @click=\"handleCopy(scope.$index, scope.row)\" plain>复制</el-button></el-dropdown-item>\n                      <el-dropdown-item><el-button type=\"danger\" size=\"small\" @click=\"handleDel(scope.$index, scope.row)\" plain>删除</el-button></el-dropdown-item>\n                    </el-dropdown-menu>\n                  </el-dropdown>\n                </template>\n            </el-table-column>\n        </el-table>\n\n        <!--工具条-->\n        <el-col :span=\"24\" class=\"toolbar\">\n            <el-button type=\"danger\" @click=\"batchRemove\" :disabled=\"this.sels.length===0\">批量删除</el-button>\n            <el-pagination layout=\"total, prev, pager, next\" @current-change=\"handleCurrentChange\" :current-page.sync=\"page\" :total=\"total\" :page-size=\"page_size\" :page-count=\"pages\" style=\"float:right;\">\n            </el-pagination>\n        </el-col>\n    </section>\n</template>\n\n<script>\n    import Treeselect from '@riophae/vue-treeselect'\n    import Cookies from 'js-cookie'\n    import '@riophae/vue-treeselect/dist/vue-treeselect.css'\n//    import SelectTree from \"../../../components/treeSelect.vue\";\n    import { test,getProjectConfig,runAutomation } from '../../../api/api'\n    import $ from 'jquery'\n    import moment from \"moment\"\n    import axios from 'axios'\n    export default {\n        components: {\n//          SelectTree,\n          Treeselect,\n        },\n        data() {\n            return {\n                automationType: [\n                    {value: '', label: ''},\n                    {value: 'case', label: '普通用例'},\n                    {value: 'reuse', label: '可复用用例'},\n                    {value: 'list', label: '用例集'},\n                    {value: 'data', label: '数据用例'},\n                    {value: 'monitor', label: '接口监控'},\n                ],\n                listType: \"\",\n                filters: {\n                    name: '',\n                    type: '',\n                },\n                env: '',\n                automationlist: [],\n                total: 0,\n                pages: 0,\n                page: 1,\n                page_size: 20,\n                listLoading: false,\n                sels: [],//列表选中列\n                delLoading: false,\n                disDel: true,\n                TestStatus: false,\n                updateGroupFormVisible: false,\n                updateGroupForm: {\n                    firstGroup: null,\n                },\n                updateGroupFormRules: {\n                    firstGroup : [{ type: 'number', required: true, message: '请选择父分组', trigger: 'blur'}],\n                },\n                group: [],\n                updateGroupLoading: false,\n                update: true,\n\n                editFormVisible: false,//编辑界面是否显示\n                editFormTitle: \"\",\n                editLoading: false,\n                editFormRules: {\n                    name: [\n                        { required: true, message: '请输入名称', trigger: 'blur' },\n                        { min: 1, max: 1024, message: '长度在 1 到 1024 个字符', trigger: 'blur' }\n                    ],\n                    group: [\n                        { required: true, message: '请选择分组', trigger: 'blur'}\n                    ],\n                    description: [\n                        { required: false, message: '请输入描述', trigger: 'blur' },\n                        { max: 1024, message: '不能超过1024个字符', trigger: 'blur' }\n                    ]\n                },\n                //编辑界面数据\n                editForm: {\n                    name: '',\n                    group: null,\n                    description: '',\n                    params: '{}',\n                    type: 'case',\n                },\n                getResultTimer: '',\n                importAutomation:{\n                    visible: false,\n                    loading: false,\n                    rules: {\n                        fromGroup : [{ type: 'string', required: true, message: '请选择源分组', trigger: 'blur'}],\n                        toGroup : [{ type: 'string', required: true, message: '请选择导入分组', trigger: 'blur'}],\n                    },\n                    value: null,\n                    fromGroup: null,\n                    toGroup: null,\n                    fromDate: \"\",\n                    toDate: \"\",\n                    groups: [],\n                    fileName: \"\",\n                },\n                fileList: [],\n                formData: [],\n                role: Cookies.get('role'),\n                uploadFileUrl: test + \"/api/imports/uploadfile\",\n                downloadTemplateUrl: test + \"/api/imports/downloadtemplate\"\n            }\n        },\n        methods: {\n            handleUploadSuccess(res, file) {\n              this.importAutomation.fileName=file.name;\n            },\n            handleSearch(){\n                this.page=1;\n                this.getAutomationList();\n            },\n            // 获取用例列表\n            getAutomationList() {\n                this.listLoading = true;\n                let self = this;\n                sessionStorage.setItem(\"auto_name\",self.filters.name);\n                sessionStorage.setItem(\"auto_type\",self.filters.type);\n                let param = { project_id: this.$route.params.project_id, page: self.page, name: self.filters.name, type: self.filters.type};\n                if (this.$route.params.firstGroup) {\n                    param['first_group_id'] = this.$route.params.firstGroup;\n                }\n                axios.get(test+\"/api/automation/automation_list\", { params: param}).then(response => {\n                    self.listLoading = false;\n                    if (response.data.code === '999999') {\n                        self.total = response.data.data.total;\n                        self.pages = response.data.data.pages;\n                        self.page_size=response.data.data.page_size;\n                        self.automationlist=[];\n                        response.data.data.data.forEach((item) =>{\n                            item.result = false;\n                            self.automationlist.push(item)\n                        });\n                    }\n                    else {\n                        self.$message.error({\n                            message: response.data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            // 获取接口列表\n            getAutomationDomainList() {\n                this.importAutomation.loading = true;\n                let self = this;\n                let param = {};\n                axios.get(test+\"/api/imports/autodomainlist\", {params:param,headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                    let data=response.data;\n                    self.importAutomation.loading = false;\n                    if (data.code === '999999') {\n//                        alert(JSON.stringify(data.data));\n                        self.importAutomation.groups = data.data;\n                    }\n                    else {\n                        self.$message.error({\n                            message: data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            // 修改用例所属分组\n            updateGroupSubmit() {\n                let ids = this.sels.map(item => item.id);\n                let self = this;\n                this.$confirm('确认修改所属分组吗？', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    self.updateGroupLoading = true;\n                    //NProgress.start();\n                    let params = JSON.stringify({\n                        project_id: Number(this.$route.params.project_id),\n                        group_id: self.updateGroupForm.firstGroup,\n                        ids:ids\n                    });\n                    let header = {\n                        \"Content-Type\": \"application/json\",\n                        Authorization: 'Token '+sessionStorage.getItem('token')\n                    };\n                    axios.post(test+\"/api/automation/update_automation_group\", params,{headers:header}).then(response => {\n                        self.updateGroupLoading = false;\n                        if (response.data.code === '999999') {\n                            self.$message({\n                                message: '修改成功',\n                                center: true,\n                                type: 'success'\n                            });\n                            self.$router.push({ name: '分组自动化列表', params: { project_id: self.$route.params.project_id, firstGroup: self.updateGroupForm.firstGroup}});\n                        }\n                        else {\n                            self.$message.error({\n                                message: response.data.msg,\n                                center: true,\n                            })\n                        }\n                        self.updateGroupFormVisible = false;\n                        self.getAutomationList();\n                    }).catch(error=>{\n\n                    });\n                }).catch(() => {\n\n                });\n            },\n            importAutomationSubmit() {\n                let self = this;\n                this.$confirm('确认导入用例吗？', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    this.importAutomation.loading = true;\n                    //NProgress.start();\n                    let params = JSON.stringify({\n                        project_id:Number(this.$route.params.project_id),\n                        group_id: this.importAutomation.toGroup,\n                        fileName: this.importAutomation.fileName,\n                    });\n                    axios.post(test+\"/api/imports/automation_importfromexcel\", params,{headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                        let data=response.data;\n                        self.importAutomation.loading = false;\n                        if (data.code === '999999') {\n                            self.$message({\n                                message: data.msg,\n                                center: true,\n                                type: 'success'\n                            });\n                        }\n                        else {\n                            self.$message.error({\n                                message: data.msg,\n                                center: true,\n                            })\n                        }\n                        self.importAutomation.visible = false;\n                        self.getAutomationList();\n                    }).catch(error=>{\n\n                    });\n                }).catch(() => {\n\n                });\n            },\n            // 获取用例分组\n            getAutomationGroup() {\n                let self = this;\n                axios.get(test+\"/api/automation/group\", {params:{project_id: this.$route.params.project_id}}).then(response => {\n                    if (response.data.code === '999999') {\n                        self.group = response.data.data;\n                    }\n                    else {\n                        self.$message.error({\n                            message: response.data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            changeGroup() {\n                this.getAutomationGroup();\n                this.updateGroupFormVisible = true;\n            },\n            handleImportAutomation() {\n                this.getAutomationGroup();\n//                this.getAutomationDomainList();\n                this.importAutomation.visible = true;\n            },\n            //删除\n            handleDel: function (index, row) {\n                this.$confirm('确认删除用例[' + row.name + ']吗?', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    this.listLoading = true;\n                    //NProgress.start();\n                    let self = this;\n                    let param=JSON.stringify({\n                                project_id: Number(this.$route.params.project_id),\n                                ids: [row.id] });\n                    let header = {\n                        \"Content-Type\": \"application/json\",\n                        Authorization: 'Token '+sessionStorage.getItem('token')\n                    };\n                    axios.post(test+\"/api/automation/del_automation\",param,{headers:header}).then(response => {\n                        if (response.data.code === '999999') {\n                            self.$message({\n                                message: '删除成功',\n                                center: true,\n                                type: 'success'\n                            })\n                        }else {\n                            self.$message.error({\n                                message: response.data.msg,\n                                center: true,\n                            })\n                        }\n                        this.listLoading = true;\n                        self.getAutomationList();\n                    }).catch(error=>{\n                        this.listLoading = true;\n                    });\n                }).catch(() => {\n                });\n            },\n            handleCurrentChange(val) {\n                this.page = val;\n                this.getAutomationList()\n            },\n            selsChange: function (sels) {\n                if (sels.length>0) {\n                    this.sels = sels;\n                    this.update = false\n                } else {\n                    this.update = true\n                }\n            },\n            //批量删除\n            batchRemove: function () {\n                let ids = this.sels.map(item => item.id);\n                let self = this;\n                this.$confirm('确认删除选中记录吗？', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    self.listLoading = true;\n                    //NProgress.start();\n                    let param=JSON.stringify({ project_id: Number(this.$route.params.project_id), ids: ids});\n                    let header = {\n                        \"Content-Type\": \"application/json\",\n                        Authorization: 'Token '+sessionStorage.getItem('token')\n                    };\n                    axios.post(test+\"/api/automation/del_automation\",param,{headers:header}).then(response => {\n                        self.listLoading = false;\n                        if (response.data.code === '999999') {\n                            self.$message({\n                                message: '删除成功',\n                                center: true,\n                                type: 'success'\n                            })\n                        }\n                        else {\n                            self.$message.error({\n                                message: response.data.msg,\n                                center: true,\n                            })\n                        }\n                        self.getAutomationList();\n                    }).catch(error=>{\n\n                    });\n                }).catch(() => {\n\n                });\n            },\n            //显示编辑界面\n            handleEdit: function (index, row) {\n                this.getAutomationGroup();\n                this.editFormTitle=\"编辑\";\n                this.editFormVisible = true;\n                this.editForm = {\"id\":row.id,\"name\":row.name,\"type\":row.type,\"params\":row.params,\"group\":row.group,\"description\":row.description};\n            },\n            //显示新增页面,复制用例\n            handleCopy: function (index, row) {\n                this.getAutomationGroup();\n                this.editFormTitle=\"复制\";\n                this.editForm={\"copyId\":row.id,\"name\":row.name,\"type\":row.type,\"params\":row.params,\"group\":row.group,\"description\":row.description};\n                this.editFormVisible = true;\n            },\n            //显示新增界面\n            handleAdd: function () {\n                this.getAutomationGroup();\n                this.editFormTitle=\"新增\";\n                this.editFormVisible = true;\n            },\n            // 修改用例\n            editSubmit: function () {\n                if(this.editForm.id==null){\n                    this.addSubmit();\n                }else{\n                    let self = this;\n                    this.$refs.editForm.validate((valid) => {\n                        if (valid) {\n                            this.$confirm('确认提交吗？', '提示', {}).then(() => {\n                                self.editLoading = true;\n                                //NProgress.start();\n                                let params = JSON.stringify({\n                                    project_id: Number(this.$route.params.project_id),\n                                    id: Number(self.editForm.id),\n                                    type: self.editForm.type,\n                                    name: self.editForm.name,\n                                    params: self.editForm.params,\n                                    group_id: Number(this.editForm.group),\n                                    description: self.editForm.description });\n                                let headers={\"Content-Type\": \"application/json\",Authorization: 'Token '+sessionStorage.getItem('token')};\n                                axios.post(test+\"/api/automation/update_automation\", params,{headers:headers}).then(response => {\n                                    self.editLoading = false;\n                                    if (response.data.code === '999999') {\n                                        self.$message({\n                                            message: '修改成功',\n                                            center: true,\n                                            type: 'success'\n                                        });\n                                        self.$refs['editForm'].resetFields();\n                                        self.editFormVisible = false;\n                                        self.getAutomationList();\n                                    } else if (response.data.code === '999997'){\n                                        self.$message.error({\n                                            message: response.data.msg,\n                                            center: true,\n                                        });\n                                    } else {\n                                        self.$message.error({\n                                            message: response.data.msg,\n                                            center: true,\n                                        });\n                                    }\n                                }).catch(error=>{\n\n                                });\n                            }).catch(() => {});\n                        }\n                    });\n                }\n            },\n            //新增用例\n            addSubmit: function () {\n                this.$refs.editForm.validate((valid) => {\n                    if (valid) {\n                        let self = this;\n                        this.$confirm('确认提交吗？', '提示', {}).then(() => {\n                            self.editLoading = true;\n                            //NProgress.start();\n                            let param = {\n                                project_id: Number(this.$route.params.project_id),\n                                type: this.editForm.type,\n                                group_id: Number(this.editForm.group),\n                                name: self.editForm.name,\n                                params: self.editForm.params,\n                                description: self.editForm.description };\n                            if(this.editFormTitle==\"复制\"){\n                                param[\"copyId\"]=self.editForm.copyId;\n                            }\n                            param=JSON.stringify(param);\n                            let headers={\"Content-Type\": \"application/json\",Authorization: 'Token '+sessionStorage.getItem('token')};\n                            axios.post(test+\"/api/automation/add_automation\", param,{headers:headers}).then(response => {\n                                self.editLoading = false;\n                                if (response.data.code === '999999') {\n                                    self.$message({\n                                        message: '添加成功',\n                                        center: true,\n                                        type: 'success'\n                                    });\n                                    self.$refs['editForm'].resetFields();\n                                    self.editFormVisible = false;\n                                    self.getAutomationList()\n                                } else if (response.data.code === '999997'){\n                                    self.$message.error({\n                                        message: response.data.msg,\n                                        center: true,\n                                    })\n                                } else {\n                                    self.$message.error({\n                                        message: response.data.msg,\n                                        center: true,\n                                    });\n                                    self.$refs['editForm'].resetFields();\n                                    self.editFormVisible = false;\n                                    self.getAutomationList()\n                                }\n                            }).catch(error=>{\n\n                            });\n                        }).catch(() => {});\n                    }\n                });\n            },\n            init(){\n                if(sessionStorage.getItem(\"auto_name\")!=null){\n                    this.filters.name=sessionStorage.getItem(\"auto_name\");\n                }\n                if(sessionStorage.getItem(\"auto_type\")!=null){\n                    this.filters.type=sessionStorage.getItem(\"auto_type\");\n                }\n//                this.getAutomationGroup();\n                this.getAutomationList();\n                if (this.$route.params.firstGroup) {\n                    this.updateGroupForm.firstGroup = Number(this.$route.params.firstGroup);\n                    this.editForm.group=Number(this.$route.params.firstGroup);\n                }\n            },\n        },\n        mounted() {\n            this.init();\n        },\n        watch: {\n            '$route' (to, from) { //监听路由是否变化\n              if(to.query!= from.query){\n                this.init();//重新加载数据\n              }\n            }\n        },\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n    .api-title {\n        padding: 15px;\n        margin: 0px;\n        text-align: center;\n        border-radius:5px;\n        font-size: 15px;\n        color: aliceblue;\n        background-color: rgb(32, 160, 255);\n        font-family: PingFang SC;\n    }\n    .group .editGroup {\n        float:right;\n    }\n    .row-title {\n        margin: 35px;\n    }\n    .addGroup {\n        margin-top: 0px;\n        margin-bottom: 10px;\n        border-radius: 25px;\n    }\n    .api-view-a {\n        margin-left: 15px;\n        margin-right: 15px;\n        display: block;\n    }\n    .api-view-b {\n        margin-left: 15px;\n        margin-right: 15px;\n        display: none;\n    }\n    a{\n    text-decoration:none;\n    }\n</style>\n"],"sourceRoot":"src/views/project/auto"}]}