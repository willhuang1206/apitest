{"remainingRequest":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/thread-loader/dist/cjs.js!/Users/huangrong/workspace/apitest/apitest-web/node_modules/babel-loader/lib/index.js!/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/huangrong/workspace/apitest/apitest-web/src/views/project/auto/autoStepList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/huangrong/workspace/apitest/apitest-web/src/views/project/auto/autoStepList.vue","mtime":1590558683770},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"/Users/huangrong/workspace/apitest/apitest-web/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Treeselect from '@riophae/vue-treeselect'; // import the styles\n\nimport '@riophae/vue-treeselect/dist/vue-treeselect.css';\nimport { test, getProjectConfig, runAutomation } from \"../../../api/api\"; //    import SelectTree from \"../../../components/treeSelect.vue\";\n\nimport Sortable from 'sortablejs';\nimport $ from 'jquery';\nimport moment from \"moment\";\nimport axios from \"axios\";\nexport default {\n  components: {\n    Treeselect: Treeselect\n  },\n  //        inject: [\"reload\"],\n  data: function data() {\n    var _ref;\n\n    return _ref = {\n      automationType: [{\n        value: 'case',\n        label: '普通用例'\n      }, {\n        value: 'reuse',\n        label: '可复用用例'\n      }, {\n        value: 'list',\n        label: '用例集'\n      }, {\n        value: 'data',\n        label: '数据用例'\n      }, {\n        value: 'monitor',\n        label: '接口监控'\n      }],\n      currentType: \"\",\n      result_color: {\n        \"PASS\": \"color:green\",\n        \"FAIL\": \"color:red\"\n      },\n      stepType: [{\n        value: 'normal',\n        label: '普通'\n      }, {\n        value: 'project',\n        label: '项目'\n      }, {\n        value: 'global',\n        label: '全局'\n      }],\n      project: \"\",\n      automation: \"\",\n      StepList: [],\n      stepIds: [],\n      failIds: [],\n      failRerunShow: false,\n      ids: [],\n      listLoading: false,\n      running: false,\n      updateOrderStatus: false,\n      searchName: \"\",\n      total: 0,\n      page: 1,\n      env: '',\n      data: '',\n      group: [],\n      EnvList: [],\n      DataList: [],\n      commands: {},\n      groupData: [],\n      sels: [],\n      //列表选中列\n      AutomationResult: false,\n      StepResultDetails: [],\n      StepResultName: \"\",\n      result: {},\n      StepListLen: \"\",\n      StepListIndex: 0,\n      activeIndex: \"\",\n      editFormVisible: false,\n      //编辑界面是否显示\n      editFormTitle: \"\",\n      editLoading: false,\n      editFormRules: {\n        name: [{\n          required: true,\n          message: '请输入名称',\n          trigger: 'blur'\n        }, {\n          min: 1,\n          max: 1024,\n          message: '长度在 1 到 1024 个字符',\n          trigger: 'blur'\n        }],\n        type: [{\n          required: true,\n          message: '请选择类型',\n          trigger: 'blur'\n        }],\n        description: [{\n          required: false,\n          message: '请输入描述',\n          trigger: 'blur'\n        }, {\n          max: 1024,\n          message: '不能超过1024个字符',\n          trigger: 'blur'\n        }]\n      },\n      //编辑界面数据\n      editForm: {\n        name: '',\n        params: '{}',\n        steps: [],\n        description: '',\n        type: 'normal',\n        order: ''\n      },\n      //新增界面数据\n      addForm: {\n        name: '',\n        params: '{}',\n        steps: [{\n          \"type\": \"\",\n          \"name\": \"\",\n          \"actionId\": 0,\n          \"params\": \"{}\",\n          \"description\": \"\",\n          \"disable\": \"False\"\n        }],\n        description: '',\n        type: 'normal',\n        order: ''\n      },\n      automationForm: {\n        name: '',\n        type: '',\n        group: null,\n        params: '{}',\n        description: '',\n        id: ''\n      },\n      linkAutomation: {\n        visible: false,\n        loading: false,\n        list: [],\n        page: 1,\n        pages: 0,\n        total: 0,\n        selAutomations: []\n      },\n      linkApi: {\n        visible: false,\n        loading: false,\n        list: [],\n        page: 1,\n        pages: 0,\n        total: 0,\n        selApis: []\n      },\n      reuseSteps: {\n        visible: false,\n        loading: false,\n        list: [],\n        total: 0,\n        page: 1,\n        pages: 0,\n        selSteps: []\n      }\n    }, _defineProperty(_ref, \"result\", {\n      resulttrace: '',\n      ResultList: []\n    }), _defineProperty(_ref, \"getResultTimer\", ''), _defineProperty(_ref, \"getResultTimes\", 0), _defineProperty(_ref, \"project_id\", this.$route.params.project_id), _defineProperty(_ref, \"pageType\", ''), _ref;\n  },\n  methods: {\n    selsChange: function selsChange(sels) {\n      if (this.automationForm.type == \"monitor\") {\n        this.ids = sels.map(function (item) {\n          return item.id;\n        });\n      } else {\n        this.ids = sels.map(function (item) {\n          return item.stepId;\n        });\n      }\n    },\n    getStepRowClass: function getStepRowClass(_ref2) {\n      var row = _ref2.row;\n\n      if (!row.status) {\n        return 'disable-step';\n      }\n\n      return '';\n    },\n    handleSelect: function handleSelect(key, keyPath) {\n      this.activeIndex = key;\n      console.log(this.activeIndex);\n    },\n    // 获取用例分组\n    getAutomationGroupAndInfo: function getAutomationGroupAndInfo() {\n      var self = this;\n      axios.get(test + \"/api/automation/group\", {\n        params: {\n          project_id: this.$route.params.project_id\n        }\n      }).then(function (response) {\n        if (response.data.code === '999999') {\n          self.group = response.data.data;\n        } else {\n          self.$message.error({\n            message: response.data.msg,\n            center: true\n          });\n        }\n\n        self.getAutomationStepList();\n      }).catch(function (error) {});\n    },\n    getAutomationStepList: function getAutomationStepList() {\n      this.listLoading = true;\n      var self = this;\n      var params = {\n        project_id: this.$route.params.project_id,\n        page: self.page,\n        name: self.searchName,\n        automation_id: this.$route.params.automation_id\n      };\n      axios.get(test + \"/api/automation/step_list\", {\n        params: params\n      }).then(function (response) {\n        self.listLoading = false;\n        self.stepIds = [];\n\n        if (response.data.code === '999999') {\n          self.currentType = response.data.data.automation.type;\n          self.StepList = [];\n          self.result.ResultList = [];\n          self.automationForm = response.data.data.automation;\n          self.automationForm.group = response.data.data.automation.group;\n          response.data.data.steps.forEach(function (item) {\n            item.result = false;\n            self.StepList.push(item);\n\n            if (response.data.data.automation.type == 'list') {\n              self.stepIds.push(item.stepId);\n            } else if (response.data.data.automation.type == 'monitor') {\n              self.stepIds.push(item.id);\n            }\n          });\n          response.data.data.results.forEach(function (item) {\n            self.result.ResultList.push(item);\n          }); // self.ApiList = data.data.data\n        } else {\n          self.$message.error({\n            message: response.data.msg,\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    getCommandList: function getCommandList() {\n      this.listLoading = true;\n      var self = this;\n      axios.get(test + \"/api/automation/command_list\", {\n        params: {\n          project_id: this.$route.params.project_id,\n          automation_id: this.$route.params.automation_id\n        }\n      }).then(function (response) {\n        self.listLoading = false;\n\n        if (response.data.code === '999999') {\n          self.commands = {};\n          response.data.data.data.forEach(function (item) {\n            self.commands[item.name] = item;\n          }); // self.ApiList = data.data.data\n        } else {\n          self.$message.error({\n            message: response.data.msg,\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    getResult: function getResult(trace) {\n      var self = this;\n      var params = {\n        project_id: this.$route.params.project_id,\n        automation_id: this.$route.params.automation_id,\n        trace: trace\n      };\n\n      if (!self.running) {\n        self.StepList.forEach(function (item, index) {\n          item.testtime = \"\";\n          item.result = null;\n          item.details = [];\n        });\n      }\n\n      ;\n      axios.get(test + \"/api/automation/getresult\", {\n        params: params\n      }).then(function (response) {\n        self.getResultTimes++;\n\n        if (response.data.code === '999999') {\n          self.failIds = [];\n          response.data.data.details.forEach(function (item, index) {\n            self.StepList.forEach(function (step, stepIndex) {\n              if ((item.type == \"step\" || item.type == \"automation\") && item[\"id\"] == step[\"stepId\"] || item.type == \"api\" && item[\"id\"] == step[\"id\"]) {\n                step.result = item.status;\n                step.testtime = item.testtime;\n                step.details = item.details;\n                step.trace = item.trace;\n\n                if (item.status == \"FAIL\" && (item[\"type\"] == \"api\" || item[\"type\"] == \"automation\")) {\n                  self.failIds.push(item[\"id\"]);\n                }\n              }\n            });\n          });\n\n          if (response.data.data.status != \"RUNNING\" || self.getResultTimes > 100) {\n            self.getResultTimes = 0;\n            clearInterval(self.getResultTimer);\n            self.running = false;\n\n            if (self.failIds.length > 0) {\n              self.failRerunShow = true;\n            } else {\n              self.failRerunShow = false;\n            }\n          }\n        } else {\n          self.$message.error({\n            message: '获取失败',\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    StepTotal: function StepTotal() {\n      this.StepListLen = this.StepList.length;\n    },\n    handleLinkApi: function handleLinkApi() {\n      this.linkApi.visible = true;\n      this.linkApi.page = 1;\n      this.getApiList();\n    },\n    getApiList: function getApiList() {\n      var self = this;\n      self.linkApi.loading = true;\n      var params = {\n        project_id: this.$route.params.project_id,\n        page: self.linkApi.page,\n        name: self.linkApi.name,\n        exclude: JSON.stringify(self.stepIds)\n      };\n      axios.get(test + \"/api/api/api_list\", {\n        params: params\n      }).then(function (response) {\n        self.linkApi.loading = false;\n\n        if (response.data.code === '999999') {\n          self.linkApi.list = response.data.data.data;\n          self.linkApi.total = response.data.data.total;\n          self.linkApi.pages = response.data.data.pages;\n        } else {\n          self.$message.error({\n            message: response.data.msg,\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    //取消关联\n    handleUnlinkApi: function handleUnlinkApi(index, row) {\n      var _this2 = this;\n\n      this.$confirm('确认取消关联接口[' + row.name + ']吗?', '提示', {\n        type: 'warning'\n      }).then(function () {\n        _this2.listLoading = true;\n        var self = _this2;\n        var params = JSON.stringify({\n          project_id: Number(_this2.$route.params.project_id),\n          automation_id: Number(_this2.$route.params.automation_id),\n          ids: [row.id]\n        });\n        var headers = {\n          \"Content-Type\": \"application/json\",\n          Authorization: 'Token ' + sessionStorage.getItem('token')\n        };\n        axios.post(test + \"/api/automation/unlink_api\", params, {\n          headers: headers\n        }).then(function (response) {\n          self.listLoading = false;\n\n          if (response.data.code === '999999') {\n            self.$message({\n              message: '取消关联成功',\n              center: true,\n              type: 'success'\n            });\n          } else {\n            self.$message.error({\n              message: response.data.msg,\n              center: true\n            });\n          }\n\n          self.getAutomationStepList();\n        }).catch(function (error) {});\n      }).catch(function () {});\n    },\n    //取消关联\n    handleUnlinkAutomation: function handleUnlinkAutomation(index, row) {\n      var _this3 = this;\n\n      this.$confirm('确认取消关联用例[' + row.name + ']吗?', '提示', {\n        type: 'warning'\n      }).then(function () {\n        _this3.listLoading = true; //NProgress.start();\n\n        var self = _this3;\n        var params = JSON.stringify({\n          project_id: Number(_this3.$route.params.project_id),\n          automation_id: Number(_this3.$route.params.automation_id),\n          ids: [row.stepId]\n        });\n        var headers = {\n          \"Content-Type\": \"application/json\",\n          Authorization: 'Token ' + sessionStorage.getItem('token')\n        };\n        axios.post(test + \"/api/automation/unlink_automation\", params, {\n          headers: headers\n        }).then(function (response) {\n          self.listLoading = false;\n\n          if (response.data.code === '999999') {\n            self.$message({\n              message: '取消关联成功',\n              center: true,\n              type: 'success'\n            });\n          } else {\n            self.$message.error({\n              message: response.data.msg,\n              center: true\n            });\n          }\n\n          self.getAutomationStepList();\n        }).catch(function (error) {});\n      }).catch(function () {});\n    },\n    handleChangeStatus: function handleChangeStatus(index, row) {\n      var self = this;\n      this.listLoading = true;\n      var headers = {\n        \"Content-Type\": \"application/json\",\n        Authorization: 'Token ' + sessionStorage.getItem('token')\n      };\n      var params = {\n        project_id: Number(this.$route.params.project_id),\n        id: row.id,\n        status: !row.status,\n        type: row.type\n      };\n      var successMsg = '禁用成功';\n\n      if (!row.status) {\n        successMsg = '启用成功';\n      }\n\n      axios.post(test + \"/api/automation/stepstatus_update\", params, {\n        headers: headers\n      }).then(function (response) {\n        self.listLoading = false;\n\n        if (response.data.code === '999999') {\n          self.$message({\n            message: successMsg,\n            center: true,\n            type: 'success'\n          });\n          row.status = !row.status;\n        } else {\n          self.$message.error({\n            message: response.data.msg,\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    linkApiSubmit: function linkApiSubmit() {\n      var _this4 = this;\n\n      var ids = this.linkApi.selApis.map(function (item) {\n        return item.id;\n      });\n      var self = this;\n      this.$confirm('确认关联选中的接口吗？', '提示', {\n        type: 'warning'\n      }).then(function () {\n        self.listLoading = true; //NProgress.start();\n\n        var params = JSON.stringify({\n          project_id: Number(_this4.$route.params.project_id),\n          automation_id: Number(_this4.$route.params.automation_id),\n          ids: ids\n        });\n        var headers = {\n          \"Content-Type\": \"application/json\",\n          Authorization: 'Token ' + sessionStorage.getItem('token')\n        };\n        axios.post(test + \"/api/automation/link_api\", params, {\n          headers: headers\n        }).then(function (response) {\n          self.listLoading = false;\n\n          if (response.data.code === '999999') {\n            self.$message({\n              message: '关联成功',\n              center: true,\n              type: 'success'\n            });\n          } else {\n            self.$message.error({\n              message: response.data.msg,\n              center: true\n            });\n          }\n\n          self.linkApi.visible = false;\n          self.getAutomationStepList();\n        }).catch(function (error) {});\n      }).catch(function () {});\n    },\n    getAutomationList: function getAutomationList() {\n      var self = this;\n      self.linkAutomation.loading = true;\n      var params = {\n        project_id: this.$route.params.project_id,\n        type: \"case\",\n        page: self.linkAutomation.page,\n        exclude: JSON.stringify(self.stepIds)\n      };\n\n      if (this.linkAutomation.name != \"\") {\n        params[\"name\"] = this.linkAutomation.name;\n      }\n\n      var headers = {\n        Authorization: 'Token ' + sessionStorage.getItem('token')\n      };\n      axios.get(test + \"/api/automation/automation_list\", {\n        params: params,\n        headers: headers\n      }).then(function (response) {\n        self.linkAutomation.loading = false;\n\n        if (response.data.code === '999999') {\n          self.linkAutomation.list = response.data.data.data;\n          self.linkAutomation.total = response.data.data.total;\n          self.linkAutomation.pages = response.data.data.pages;\n        } else {\n          self.$message.error({\n            message: response.data.msg,\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    //显示新增界面\n    handleLinkAutomation: function handleLinkAutomation() {\n      this.linkAutomation.visible = true;\n      this.linkAutomation.page = 1;\n      this.getAutomationList();\n    },\n    linkAutomationSubmit: function linkAutomationSubmit() {\n      var _this5 = this;\n\n      var ids = this.linkAutomation.selAutomations.map(function (item) {\n        return item.id;\n      });\n      var self = this;\n      this.$confirm('确认关联选中的用例吗？', '提示', {\n        type: 'warning'\n      }).then(function () {\n        self.listLoading = true; //NProgress.start();\n\n        var params = JSON.stringify({\n          project_id: Number(_this5.$route.params.project_id),\n          automation_id: Number(_this5.$route.params.automation_id),\n          ids: ids\n        });\n        var headers = {\n          \"Content-Type\": \"application/json\",\n          Authorization: 'Token ' + sessionStorage.getItem('token')\n        };\n        axios.post(test + \"/api/automation/link_automation\", params, {\n          headers: headers\n        }).then(function (response) {\n          self.listLoading = false;\n\n          if (response.data.code === '999999') {\n            self.$message({\n              message: '关联成功',\n              center: true,\n              type: 'success'\n            });\n          } else {\n            self.$message.error({\n              message: response.data.msg,\n              center: true\n            });\n          }\n\n          self.linkAutomation.visible = false;\n          self.getAutomationStepList();\n        }).catch(function (error) {});\n      }).catch(function () {});\n    },\n    RunAutomation: function RunAutomation(ids) {\n      if (this.env) {\n        var self = this;\n        var data = {\n          project_id: Number(this.$route.params.project_id),\n          automation_id: Number(this.$route.params.automation_id),\n          params: this.automationForm.params,\n          env: this.env,\n          data: this.data\n        };\n\n        if (ids && ids.length > 0) {\n          data[\"ids\"] = ids;\n        }\n\n        var header = {\n          \"Content-Type\": \"application/json\",\n          Authorization: 'Token ' + sessionStorage.getItem('token')\n        };\n        runAutomation(header, data).then(function (data) {\n          if (data.code === '999999') {\n            self.$message({\n              message: '开始执行',\n              center: true,\n              type: \"success\"\n            }), self.StepList.forEach(function (item, index) {\n              item.testtime = \"\";\n              item.result = null;\n              item.details = [];\n            });\n            self.result.ResultList.splice(0, 0, {\n              \"testTime\": data.data.testtime,\n              \"trace\": data.data.trace,\n              \"result\": data.data.status\n            });\n\n            if (data.data.status == \"RUNNING\") {\n              self.running = true;\n              self.getResultTimes = 0;\n              self.getResultTimer = setInterval(function () {\n                //                                        self.getAutomationStepList();\n                self.getResult(data.data.trace);\n              }, 3000);\n            }\n          } else {\n            self.$message.error({\n              message: data.msg,\n              center: true\n            });\n          }\n        });\n      } else {\n        this.$message({\n          message: '请选择测试环境',\n          center: true,\n          type: 'warning'\n        });\n      }\n    },\n    handleDel: function handleDel(index, row) {\n      var _this6 = this;\n\n      this.$confirm('确认删除步骤[' + row.name + ']吗?', '提示', {\n        type: 'warning'\n      }).then(function () {\n        _this6.listLoading = true;\n        var self = _this6;\n        var params = JSON.stringify({\n          project_id: Number(_this6.$route.params.project_id),\n          automation_id: Number(_this6.$route.params.automation_id),\n          ids: [{\n            \"order\": index + 1,\n            \"id\": row.stepId\n          }]\n        });\n        var headers = {\n          \"Content-Type\": \"application/json\",\n          Authorization: 'Token ' + sessionStorage.getItem('token')\n        };\n        axios.post(test + \"/api/automation/del_step\", params, {\n          headers: headers\n        }).then(function (response) {\n          self.listLoading = false;\n\n          if (response.data.code === '999999') {\n            self.$message({\n              message: '删除成功',\n              center: true,\n              type: 'success'\n            });\n          } else {\n            self.$message.error({\n              message: response.data.msg,\n              center: true\n            });\n          }\n\n          self.getAutomationStepList();\n        }).catch(function (error) {});\n      }).catch(function () {});\n    },\n    resultShow: function resultShow(row) {\n      this.AutomationResult = true;\n      this.StepResultDetails = row.details;\n      this.StepResultName = row.name;\n    },\n    handleCurrentChangeStep: function handleCurrentChangeStep(val) {\n      this.reuseSteps.page = val;\n      this.getReuseStepList();\n    },\n    handleCurrentChangeAutomation: function handleCurrentChangeAutomation(val) {\n      this.linkAutomation.page = val;\n      this.getAutomationList();\n    },\n    handleCurrentChangeApi: function handleCurrentChangeApi(val) {\n      this.linkApi.page = val;\n      this.getApiList();\n    },\n    selStepsChange: function selStepsChange(sels) {\n      this.reuseSteps.selSteps = sels;\n    },\n    selApisChange: function selApisChange(sels) {\n      this.linkApi.selApis = sels;\n    },\n    selAutomationsChange: function selAutomationsChange(sels) {\n      this.linkAutomation.selAutomations = sels;\n    },\n    addReuseSteps: function addReuseSteps() {\n      var _this7 = this;\n\n      var ids = this.reuseSteps.selSteps.map(function (item) {\n        return item.id;\n      });\n      var self = this;\n      this.$confirm('确认添加选中的步骤吗？', '提示', {\n        type: 'warning'\n      }).then(function () {\n        self.listLoading = true;\n        var params = JSON.stringify({\n          project_id: Number(_this7.$route.params.project_id),\n          automation_id: Number(_this7.$route.params.automation_id),\n          ids: ids\n        });\n        var headers = {\n          \"Content-Type\": \"application/json\",\n          Authorization: 'Token ' + sessionStorage.getItem('token')\n        };\n        axios.post(test + \"/api/automation/add_reuse_steps\", params, {\n          headers: headers\n        }).then(function (response) {\n          self.listLoading = false;\n\n          if (response.data.code === '999999') {\n            self.$message({\n              message: '添加成功',\n              center: true,\n              type: 'success'\n            });\n          } else {\n            self.$message.error({\n              message: response.data.msg,\n              center: true\n            });\n          }\n\n          self.reuseSteps.visible = false;\n          self.getAutomationStepList();\n        }).catch(function (error) {});\n      }).catch(function () {});\n    },\n    getEnv: function getEnv() {\n      var self = this;\n      var headers = {\n        Authorization: 'Token ' + sessionStorage.getItem('token')\n      };\n      getProjectConfig(headers, {\n        project_id: self.$route.params.project_id,\n        page: self.page,\n        name: \"\",\n        type: \"env\"\n      }).then(function (data) {\n        if (data.code === '999999') {\n          self.EnvList = [];\n          data.data.data.forEach(function (item) {\n            if (item.status) {\n              self.EnvList.push(item);\n            }\n          });\n        } else {\n          self.$message.error({\n            message: data.msg,\n            center: true\n          });\n        }\n      });\n    },\n    getData: function getData() {\n      var self = this;\n      var headers = {\n        Authorization: 'Token ' + sessionStorage.getItem('token')\n      };\n      getProjectConfig(headers, {\n        project_id: this.$route.params.project_id,\n        page: self.page,\n        name: \"\",\n        type: \"data\"\n      }).then(function (data) {\n        if (data.code === '999999') {\n          self.DataList = [];\n          data.data.data.forEach(function (item) {\n            if (item.status) {\n              self.DataList.push(item);\n            }\n          });\n        } else {\n          self.$message.error({\n            message: data.msg,\n            center: true\n          });\n        }\n      });\n    },\n    //显示编辑界面\n    handleEdit: function handleEdit(index, row) {\n      this.editFormVisible = true;\n\n      if (this.pageType == 'update') {\n        this.editFormTitle = \"修改步骤\";\n      } else {\n        this.editFormTitle = \"查看步骤\";\n      }\n\n      this.editForm = {\n        \"id\": row.stepId,\n        \"name\": row.name,\n        \"type\": row.type,\n        \"params\": row.params,\n        \"steps\": JSON.parse(row.steps),\n        \"description\": row.description\n      };\n      this.editForm.order = index + 1;\n    },\n    actiontableshow: function actiontableshow() {\n      var _this = this;\n\n      var tbody = document.querySelector('.actiontable .el-table__body-wrapper tbody');\n\n      if (tbody != null) {\n        Sortable.create(tbody, {\n          onEnd: function onEnd(_ref3) {\n            var newIndex = _ref3.newIndex,\n                oldIndex = _ref3.oldIndex;\n\n            var currRow = _this.editForm.steps.splice(oldIndex, 1)[0];\n\n            _this.editForm.steps.splice(newIndex, 0, currRow);\n          }\n        });\n      }\n    },\n    handleCopy: function handleCopy(index, row) {\n      this.editFormVisible = true;\n      this.editFormTitle = \"复制步骤\";\n      this.editForm = {\n        \"name\": row.name,\n        \"type\": row.type,\n        \"params\": row.params,\n        \"steps\": JSON.parse(row.steps),\n        \"description\": row.description\n      };\n      this.editForm.order = this.StepList.length + 1;\n    },\n    //显示新增界面\n    handleAdd: function handleAdd() {\n      this.editFormVisible = true;\n      this.editFormTitle = \"添加步骤\";\n      this.editForm = this.addForm;\n      this.editForm.order = this.StepList.length + 1;\n    },\n    //显示新增界面\n    handleAddReuse: function handleAddReuse() {\n      this.reuseSteps.visible = true;\n      this.reuseSteps.page = 1;\n      this.getReuseStepList();\n    },\n    getReuseStepList: function getReuseStepList() {\n      var self = this;\n      var params = {\n        project_id: this.$route.params.project_id,\n        page: self.reuseSteps.page\n      };\n      var headers = {\n        Authorization: 'Token ' + sessionStorage.getItem('token')\n      };\n      self.reuseSteps.loading = true;\n      axios.get(test + \"/api/automation/step_list\", {\n        params: params,\n        headers: headers\n      }).then(function (response) {\n        self.reuseSteps.loading = false;\n\n        if (response.data.code === '999999') {\n          self.reuseSteps.list = response.data.data.data;\n          self.reuseSteps.total = response.data.data.total;\n          self.reuseSteps.pages = response.data.data.pages;\n        } else {\n          self.$message.error({\n            message: response.data.msg,\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    // 修改用例\n    editSubmit: function editSubmit() {\n      var _this8 = this;\n\n      if (this.editForm.id == null) {\n        this.addSubmit();\n      } else {\n        var self = this;\n        var steps = this.editForm.steps;\n\n        if (steps.length == 1 && steps[0][\"name\"] == \"\") {\n          steps = [];\n        }\n\n        this.$refs.editForm.validate(function (valid) {\n          if (valid) {\n            _this8.$confirm('确认提交吗？', '提示', {}).then(function () {\n              self.editLoading = true; //NProgress.start();\n\n              var params = JSON.stringify({\n                project_id: Number(_this8.$route.params.project_id),\n                automation_id: Number(_this8.$route.params.automation_id),\n                id: Number(self.editForm.id),\n                type: self.editForm.type,\n                name: self.editForm.name,\n                params: self.editForm.params,\n                steps: JSON.stringify(steps),\n                description: self.editForm.description,\n                order: self.editForm.order\n              });\n              var headers = {\n                \"Content-Type\": \"application/json\",\n                Authorization: 'Token ' + sessionStorage.getItem('token')\n              };\n              axios.post(test + \"/api/automation/update_step\", params, {\n                headers: headers\n              }).then(function (response) {\n                self.editLoading = false;\n\n                if (response.data.code === '999999') {\n                  self.$message({\n                    message: '修改成功',\n                    center: true,\n                    type: 'success'\n                  });\n                  self.$refs['editForm'].resetFields();\n                  self.editFormVisible = false;\n                  self.getAutomationStepList();\n                } else if (response.data.code === '999997') {\n                  self.$message.error({\n                    message: response.data.msg,\n                    center: true\n                  });\n                } else {\n                  self.$message.error({\n                    message: response.data.msg,\n                    center: true\n                  });\n                }\n              }).catch(function (error) {});\n            }).catch(function () {});\n          }\n        });\n      }\n    },\n    //新增用例\n    addSubmit: function addSubmit() {\n      var _this9 = this;\n\n      this.$refs.editForm.validate(function (valid) {\n        if (valid) {\n          var self = _this9;\n          var steps = _this9.editForm.steps;\n\n          if (steps.length == 1 && steps[0][\"name\"] == \"\") {\n            steps = [];\n          }\n\n          _this9.$confirm('确认提交吗？', '提示', {}).then(function () {\n            self.editLoading = true; //NProgress.start();\n\n            var params = JSON.stringify({\n              project_id: Number(_this9.$route.params.project_id),\n              type: _this9.editForm.type,\n              automation_id: Number(_this9.$route.params.automation_id),\n              name: self.editForm.name,\n              params: self.editForm.params,\n              steps: JSON.stringify(steps),\n              description: self.editForm.description,\n              order: self.editForm.order\n            });\n            var headers = {\n              \"Content-Type\": \"application/json\",\n              Authorization: 'Token ' + sessionStorage.getItem('token')\n            };\n            axios.post(test + \"/api/automation/add_step\", params, {\n              headers: headers\n            }).then(function (response) {\n              self.editLoading = false;\n\n              if (response.data.code === '999999') {\n                self.$message({\n                  message: '添加成功',\n                  center: true,\n                  type: 'success'\n                });\n                self.$refs['editForm'].resetFields();\n                self.editFormVisible = false;\n                self.getAutomationStepList();\n              } else if (response.data.code === '999997') {\n                self.$message.error({\n                  message: response.data.msg,\n                  center: true\n                });\n              } else {\n                self.$message.error({\n                  message: response.data.msg,\n                  center: true\n                });\n                self.$refs['editForm'].resetFields();\n                self.editFormVisible = false;\n                self.getAutomationStepList();\n              }\n            }).catch(function (error) {});\n          }).catch(function () {});\n        }\n      });\n    },\n    // 修改用例\n    updateAutomation: function updateAutomation() {\n      var _this10 = this;\n\n      var self = this;\n      this.$refs.automationForm.validate(function (valid) {\n        if (valid) {\n          //                        this.$confirm('确认保存吗？', '提示', {}).then(() => {\n          var orders = [];\n\n          _this10.StepList.forEach(function (item) {\n            orders.push(item[\"id\"]);\n          });\n\n          var params = JSON.stringify({\n            project_id: Number(_this10.$route.params.project_id),\n            id: Number(self.automationForm.id),\n            type: self.automationForm.type,\n            name: self.automationForm.name,\n            params: self.automationForm.params,\n            group_id: Number(_this10.automationForm.group),\n            description: self.automationForm.description,\n            orders: orders\n          });\n          var headers = {\n            \"Content-Type\": \"application/json\",\n            Authorization: 'Token ' + sessionStorage.getItem('token')\n          };\n          axios.post(test + \"/api/automation/update_automation\", params, {\n            headers: headers\n          }).then(function (response) {\n            if (response.data.code === '999999') {\n              self.$message({\n                message: '保存成功',\n                center: true,\n                type: 'success'\n              });\n            } else {\n              self.$message.error({\n                message: response.data.msg,\n                center: true\n              });\n            }\n          }).catch(function (error) {}); //                        }).catch(() => {});\n        }\n      });\n    },\n    addCommand: function addCommand(index) {\n      this.editForm.steps.splice(index + 1, 0, {\n        \"type\": \"\",\n        \"name\": \"\",\n        \"actionId\": 0,\n        \"params\": \"{}\",\n        \"description\": \"\",\n        \"disable\": \"False\"\n      });\n    },\n    delCommand: function delCommand(index) {\n      this.editForm.steps.splice(index, 1);\n    },\n    changeCommand: function changeCommand(index) {\n      var command = this.commands[this.editForm.steps[index].name];\n      this.editForm.steps[index].name = command.name;\n      this.editForm.steps[index].type = command.type;\n      this.editForm.steps[index].actionId = command.actionId;\n      this.editForm.steps[index].params = command.value;\n      this.editForm.steps[index].description = command.desc;\n    },\n    rowDrop: function rowDrop() {\n      try {\n        var tbody = document.querySelector('.steptable .el-table__body-wrapper tbody');\n\n        var _this = this;\n\n        Sortable.create(tbody, {\n          onEnd: function onEnd(_ref4) {\n            var newIndex = _ref4.newIndex,\n                oldIndex = _ref4.oldIndex;\n\n            var currRow = _this.StepList.splice(oldIndex, 1)[0];\n\n            _this.StepList.splice(newIndex, 0, currRow);\n          }\n        });\n      } catch (err) {\n        alert(err);\n      }\n    },\n    updateOrder: function updateOrder() {\n      if (this.pageType == 'update') this.rowDrop();\n      this.updateOrderStatus = true;\n    },\n    init: function init() {\n      this.pageType = this.$route.params.type;\n      this.getAutomationGroupAndInfo();\n\n      if (this.pageType == 'update') {\n        this.getCommandList();\n      } else {\n        this.getEnv();\n        this.getData();\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.init();\n  },\n  watch: {\n    '$route': function $route(to, from) {\n      //监听路由是否变化\n      if (to.query != from.query) {\n        this.reload();\n        if (this.pageType == 'update') this.rowDrop(); //                 this.$router.go(0)\n      }\n    }\n  }\n};",null]}