{"remainingRequest":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/thread-loader/dist/cjs.js!/Users/huangrong/workspace/apitest/apitest-web/node_modules/babel-loader/lib/index.js!/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/huangrong/workspace/apitest/apitest-web/src/views/project/api/fastTest.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/huangrong/workspace/apitest/apitest-web/src/views/project/api/fastTest.vue","mtime":1588815975519},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _typeof from \"/Users/huangrong/workspace/apitest/apitest-web/node_modules/@babel/runtime-corejs2/helpers/esm/typeof\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport $ from 'jquery';\nimport VuePopper from \"element-ui/src/utils/vue-popper\";\nimport { test } from '@/api/api';\nimport ApiRequest from \"./apiRequest.vue\";\nimport axios from 'axios';\nexport default {\n  components: {\n    VuePopper: VuePopper,\n    ApiRequest: ApiRequest\n  },\n  data: function data() {\n    return {\n      type: [{\n        value: 'http',\n        label: '普通http'\n      }, {\n        value: 'jyb',\n        label: '加油宝app'\n      }, {\n        value: 'service',\n        label: '微服务'\n      }],\n      request: [{\n        value: 'get',\n        label: 'GET'\n      }, {\n        value: 'post',\n        label: 'POST'\n      }, {\n        value: 'put',\n        label: 'PUT'\n      }, {\n        value: 'delete',\n        label: 'DELETE'\n      }],\n      Http: [{\n        value: 'http',\n        label: 'HTTP'\n      }, {\n        value: 'https',\n        label: 'HTTPS'\n      }],\n      loadingSend: false,\n      result: true,\n      activeNames: ['2', '3', '4'],\n      Host: [{\n        name: \"\",\n        host: \"\"\n      }],\n      id: \"\",\n      form: {\n        url: \"\",\n        method: 'POST',\n        http: 'HTTP',\n        type: 'http',\n        addr: '',\n        contentType: \"\",\n        statusCode: \"\",\n        resultData: \"\",\n        resultHead: \"\",\n        parameters: [],\n        parameter: {},\n        headDic: {},\n        headers: []\n      },\n      formRules: {\n        env: [{\n          required: false,\n          message: '请选择测试环境',\n          trigger: 'blur'\n        }],\n        addr: [{\n          required: true,\n          message: '请输入地址',\n          trigger: 'blur'\n        }]\n      },\n      resultShow: true,\n      format: false\n    };\n  },\n  methods: {\n    isJsonString: function isJsonString(str) {\n      try {\n        if (_typeof(JSON.parse(str)) === \"object\") {\n          return true;\n        }\n      } catch (e) {}\n\n      return false;\n    },\n    getHost: function getHost() {\n      var self = this;\n      axios.get(test + \"/api/project/config_list\", {\n        params: {\n          project_id: this.$route.params.project_id,\n          page: this.page,\n          type: 'env'\n        },\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: 'Token ' + sessionStorage.getItem('token')\n        }\n      }).then(function (response) {\n        var data = response.data;\n\n        if (data.code === '999999') {\n          data.data.data.forEach(function (item) {\n            if (item.status) {\n              self.Host.push(item);\n            }\n          });\n        } else {\n          self.$message.error({\n            message: data.msg,\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    fastTest: function fastTest() {\n      var _this = this;\n\n      this.$refs.form.validate(function (valid) {\n        if (valid) {\n          _this.loadingSend = true;\n          var self = _this;\n          var head = _this.$refs.apiRequest.head;\n          self.form.statusCode = '';\n          self.form.resultData = '';\n          self.form.resultHead = '';\n          self.form.headDic = {};\n          self.form.headers = [];\n\n          for (var i = 0; i < head.length; i++) {\n            var a = head[i][\"name\"];\n\n            if (a) {\n              self.form.headDic[a] = head[i][\"value\"];\n              self.form.headers.push({\n                \"name\": a,\n                \"value\": head[i][\"value\"]\n              });\n            }\n          }\n\n          var address = self.form.addr;\n          var url = \"\";\n          var env = \"\";\n\n          if (address.indexOf(\"http://\") === 0 || address.indexOf(\"https://\") === 0) {\n            url = address;\n            if (self.form.env != \"\") env = self.form.env;\n          } else {\n            url = self.form.http + \"://\" + self.form.env + address;\n          }\n\n          self.form.contentType = self.$refs.apiRequest.requestParameterType;\n          self.form.parameter = self.$refs.apiRequest.getParameters();\n          self.form.parameters = self.$refs.apiRequest.parameters;\n          var param = {\n            project_id: self.$route.params.project_id,\n            type: self.form.type,\n            method: self.form.method,\n            contentType: self.form.contentType,\n            url: url,\n            headers: self.form.headDic,\n            data: self.form.parameter\n          };\n          axios.post(test + \"/api/api/run_api\", param, {\n            headers: {\n              \"Content-Type\": \"application/json\",\n              Authorization: 'Token ' + sessionStorage.getItem('token')\n            }\n          }).then(function (response) {\n            var data = response.data;\n            self.loadingSend = false;\n            self.form.statusCode = data[\"data\"][\"result\"][0];\n            self.form.resultData = data[\"data\"][\"result\"][1];\n            self.form.resultHead = data[\"data\"][\"result\"][2]; //                            $(\"#formResult\").text(JSON.stringify(self.form.resultData));\n          }).catch(function (error) {\n            self.loadingSend = false;\n            self.$message.error({\n              message: \"执行失败,请重试.\",\n              center: true\n            });\n          });\n        }\n      });\n    },\n    showBody: function showBody() {\n      this.resultShow = true;\n    },\n    showHeader: function showHeader() {\n      this.resultShow = false;\n    },\n    handleChange: function handleChange(val) {},\n    typeChanged: function typeChanged() {\n      this.$refs.apiRequest.form.type = this.form.type;\n    },\n    addrChanged: function addrChanged() {\n      this.$refs.apiRequest.form.addr = this.form.addr;\n    }\n  },\n  mounted: function mounted() {\n    this.$refs.apiRequest.addEmptyHead();\n    this.$refs.apiRequest.addEmptyParameter();\n    this.getHost();\n  }\n};",null]}