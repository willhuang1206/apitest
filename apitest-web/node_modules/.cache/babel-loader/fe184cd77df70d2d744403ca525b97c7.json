{"remainingRequest":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/thread-loader/dist/cjs.js!/Users/huangrong/workspace/apitest/apitest-web/node_modules/babel-loader/lib/index.js!/Users/huangrong/workspace/apitest/apitest-web/src/api/api.js","dependencies":[{"path":"/Users/huangrong/workspace/apitest/apitest-web/src/api/api.js","mtime":1590737930710},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import axios from 'axios';\nimport router from 'vue-router';\nimport Cookies from 'js-cookie';\nimport { MessageBox } from 'element-ui'; //export const test = 'http://127.0.0.1:8092';\n\nexport var test = 'http://apitest.xyz.com';\nexport var requestLogout = function requestLogout(params) {\n  return axios.get(\"\".concat(test, \"/api/user/logout\"), params).then(function (res) {\n    return res.data;\n  });\n}; // 获取全局配置列表\n\nexport var getProjectConfig = function getProjectConfig(headers, params) {\n  return axios.get(\"\".concat(test, \"/api/project/config_list\"), {\n    params: params,\n    headers: headers\n  }).then(function (res) {\n    return res.data;\n  });\n}; // 获取全局配置列表\n\nexport var getGlobalPublish = function getGlobalPublish(headers, params) {\n  return axios.get(\"\".concat(test, \"/api/global/publish_list\"), {\n    params: params,\n    headers: headers\n  }).then(function (res) {\n    return res.data;\n  });\n}; // 获取项目动态\n\nexport var getProjectDynamicList = function getProjectDynamicList(headers, params) {\n  return axios.get(\"\".concat(test, \"/api/dynamic/dynamic\"), {\n    params: params,\n    headers: headers\n  }).then(function (res) {\n    return res.data;\n  });\n}; // 运行自动化用例\n\nexport var runAutomation = function runAutomation(headers, params) {\n  return axios.post(\"\".concat(test, \"/api/automation/run\"), params, {\n    headers: headers\n  }).then(function (res) {\n    return res.data;\n  });\n}; // 默认超时设置\n\naxios.defaults.timeout = 10000; // 相对路径设置\n\naxios.defaults.baseURL = '';\naxios.defaults.crossDomain = true;\naxios.defaults.withCredentials = true; //http request 拦截器\n\naxios.interceptors.request.use(function (config) {\n  // 获取token\n  var ticket = Cookies.get('ticket'); // 添加token到headers\n\n  if (ticket) {\n    config.headers.Authorization = ticket;\n  } ////参数处理\n  //if(config.method === 'get' && config.url !== '/api/user/login'){\n  //  config.params = config.params;\n  //}else if(config.url !== '/api/user/login'){\n  //  config.data = config.data || {};\n  //  config.params = config.params || {'ticket': ticket};\n  //}\n\n\n  return config;\n}, function (err) {\n  return Promise.reject(err);\n}); //http response 拦截器\n\naxios.interceptors.response.use(function (response) {\n  return response;\n}, function (error) {\n  if (error.response) {\n    switch (error.response.status) {\n      case 403:\n        // 返回 401 清除token信息并跳转到登录页面\n        sessionStorage.removeItem('token');\n        Cookies.remove('ticket'); //router.replace({\n        //    path: 'login',\n        //    query: {redirect: router.currentRoute.fullPath}\n        //});\n\n        MessageBox.alert(\"登录信息超时,请重新登录!\", \"登录超时\", {\n          confirmButtonText: \"跳转登录页面\",\n          callback: function callback(action) {\n            window.location.href = \"/\";\n          }\n        });\n\n      case 406:\n        // 返回 401 清除token信息并跳转到登录页面\n        //router.replace({\n        //    path: 'login',\n        //    query: {redirect: router.currentRoute.fullPath}\n        //});\n        MessageBox.alert(\"没有权限执行该操作!\", \"没有权限\", {\n          confirmButtonText: \"关闭\",\n          callback: function callback(action) {\n            history.go(0);\n          }\n        });\n    }\n  }\n\n  return Promise.reject(error.response.data); // 返回接口返回的错误信息\n});\n/**\n * fetch 请求方法\n * @param url\n * @param params\n * @returns {Promise}\n */\n\nexport function fetch(url) {\n  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new Promise(function (resolve, reject) {\n    axios.get(url, {\n      params: params\n    }).then(function (response) {\n      resolve(response.data);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n/**\n * post 请求方法\n * @param url\n * @param data\n * @returns {Promise}\n */\n\nexport function post(url) {\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new Promise(function (resolve, reject) {\n    axios.post(url, data).then(function (response) {\n      resolve(response.data);\n    }, function (err) {\n      reject(err);\n    });\n  });\n}\n/**\n * patch 方法封装\n * @param url\n * @param data\n * @returns {Promise}\n */\n\nexport function patch(url) {\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new Promise(function (resolve, reject) {\n    axios.patch(url, data).then(function (response) {\n      resolve(response.data);\n    }, function (err) {\n      reject(err);\n    });\n  });\n}\n/**\n * put 方法封装\n * @param url\n * @param data\n * @returns {Promise}\n */\n\nexport function put(url) {\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new Promise(function (resolve, reject) {\n    axios.put(url, data).then(function (response) {\n      resolve(response.data);\n    }, function (err) {\n      reject(err);\n    });\n  });\n}",null]}