{"remainingRequest":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/thread-loader/dist/cjs.js!/Users/huangrong/workspace/apitest/apitest-web/node_modules/babel-loader/lib/index.js!/Users/huangrong/workspace/apitest/apitest-web/mock/index.js","dependencies":[{"path":"/Users/huangrong/workspace/apitest/apitest-web/mock/index.js","mtime":1590722071782},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-web/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.constructor\";\nimport _createForOfIteratorHelper from \"/Users/huangrong/workspace/apitest/apitest-web/node_modules/@babel/runtime-corejs2/helpers/esm/createForOfIteratorHelper\";\nimport _toConsumableArray from \"/Users/huangrong/workspace/apitest/apitest-web/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport Mock from 'mockjs';\nimport { param2Obj } from \"../src/utils\";\nimport user from \"./user\";\nimport role from \"./role\";\nimport article from \"./article\";\nimport search from \"./remote-search\";\nvar mocks = [].concat(_toConsumableArray(user), _toConsumableArray(role), _toConsumableArray(article), _toConsumableArray(search)); // for front mock\n// please use it cautiously, it will redefine XMLHttpRequest,\n// which will cause many of your third-party libraries to be invalidated(like progress event).\n\nexport function mockXHR() {\n  // mock patch\n  // https://github.com/nuysoft/Mock/issues/300\n  Mock.XHR.prototype.proxy_send = Mock.XHR.prototype.send;\n\n  Mock.XHR.prototype.send = function () {\n    if (this.custom.xhr) {\n      this.custom.xhr.withCredentials = this.withCredentials || false;\n\n      if (this.responseType) {\n        this.custom.xhr.responseType = this.responseType;\n      }\n    }\n\n    this.proxy_send.apply(this, arguments);\n  };\n\n  function XHR2ExpressReqWrap(respond) {\n    return function (options) {\n      var result = null;\n\n      if (respond instanceof Function) {\n        var body = options.body,\n            type = options.type,\n            url = options.url; // https://expressjs.com/en/4x/api.html#req\n\n        result = respond({\n          method: type,\n          body: JSON.parse(body),\n          query: param2Obj(url)\n        });\n      } else {\n        result = respond;\n      }\n\n      return Mock.mock(result);\n    };\n  }\n\n  var _iterator = _createForOfIteratorHelper(mocks),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var i = _step.value;\n      Mock.mock(new RegExp(i.url), i.type || 'get', XHR2ExpressReqWrap(i.response));\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\nexport default mocks;",null]}