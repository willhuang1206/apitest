{"remainingRequest":"/Users/huangrong/workspace/apitest/apitest-vue/node_modules/babel-loader/lib/index.js!/Users/huangrong/workspace/apitest/apitest-vue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/huangrong/workspace/apitest/apitest-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/huangrong/workspace/apitest/apitest-vue/src/views/project/auto/taskList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/huangrong/workspace/apitest/apitest-vue/src/views/project/auto/taskList.vue","mtime":1588820978807},{"path":"/Users/huangrong/workspace/apitest/apitest-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-vue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangrong/workspace/apitest/apitest-vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/huangrong/workspace/apitest/apitest-vue/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.number.constructor\");\n\nrequire(\"core-js/modules/es6.function.name\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nvar _api = require(\"../../../api/api\");\n\nvar _jquery = _interopRequireDefault(require(\"jquery\"));\n\nvar _moment = _interopRequireDefault(require(\"moment\"));\n\nvar _axios = _interopRequireDefault(require(\"axios\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  data: function data() {\n    return {\n      status: [{\n        value: true,\n        label: '启动'\n      }, {\n        value: false,\n        label: '停止'\n      }],\n      sendEmail: [{\n        value: 0,\n        label: '不发送'\n      }, {\n        value: 1,\n        label: '发送'\n      }],\n      filters: {\n        name: ''\n      },\n      env: '',\n      EnvList: [],\n      automationlist: [],\n      memberData: [],\n      tasklist: [],\n      total: 0,\n      page: 1,\n      pages: 0,\n      listLoading: false,\n      editLoading: false,\n      sels: [],\n      //列表选中列\n      taskVShow: false,\n      taskVType: \"add\",\n      formTitle: \"定时任务\",\n      delLoading: false,\n      disDel: true,\n      form: {\n        id: \"\",\n        name: \"\",\n        env: \"\",\n        automations: [],\n        params: \"\",\n        crontab: \"\",\n        status: \"true\",\n        sendEmail: 0,\n        emails: []\n      },\n      formRules: {\n        name: [{\n          required: true,\n          message: '请输入任务名称',\n          trigger: 'blur'\n        }, {\n          min: 1,\n          max: 50,\n          message: '长度在 1 到 50 个字符',\n          trigger: 'blur'\n        }],\n        env: [{\n          required: true,\n          message: '请选择执行环境'\n        }],\n        automation: [{\n          required: true,\n          message: '请选择执行的用例集'\n        }],\n        crontab: [{\n          required: true,\n          message: '请输入crontab表达式'\n        }]\n      }\n    };\n  },\n  methods: {\n    // 获取用例列表\n    getAutomationList: function getAutomationList() {\n      var self = this;\n      var param = {\n        project_id: this.$route.params.project_id,\n        page: self.page,\n        page_size: 1000\n      };\n\n      _axios.default.get(_api.test + \"/api/automation/automation_list\", {\n        params: param,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: 'Token ' + sessionStorage.getItem('token')\n        }\n      }).then(function (response) {\n        var data = response.data;\n\n        if (data.code === '999999') {\n          self.automationlist = [];\n          data.data.data.forEach(function (item) {\n            self.automationlist.push(item);\n          });\n        } else {\n          self.$message.error({\n            message: data.msg,\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    // 获取成员列表\n    getProjectMember: function getProjectMember() {\n      var self = this;\n      var params = {\n        project_id: this.$route.params.project_id,\n        page: self.page,\n        page_size: 100\n      };\n      var headers = {\n        \"Content-Type\": \"application/json\",\n        Authorization: 'Token ' + sessionStorage.getItem('token')\n      };\n\n      _axios.default.get(\"\".concat(_api.test, \"/api/member/project_member\"), {\n        params: params,\n        headers: headers\n      }).then(function (res) {\n        var _res$data = res.data,\n            msg = _res$data.msg,\n            code = _res$data.code,\n            data = _res$data.data;\n\n        if (code === '999999') {\n          self.memberData = data.data;\n        } else {\n          self.$message.error({\n            message: msg,\n            center: true\n          });\n        }\n      });\n    },\n    handleSearch: function handleSearch() {\n      this.page = 1;\n      this.getTaskList();\n    },\n    // 获取用例列表\n    getTaskList: function getTaskList() {\n      var self = this;\n      self.listLoading = true;\n      var param = {\n        project_id: this.$route.params.project_id,\n        page: self.page,\n        name: self.filters.name\n      };\n\n      _axios.default.get(_api.test + \"/api/automation/task_list\", {\n        params: param,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: 'Token ' + sessionStorage.getItem('token')\n        }\n      }).then(function (response) {\n        var data = response.data;\n        self.listLoading = false;\n\n        if (data.code === '999999') {\n          self.total = data.data.total;\n          self.pages = data.data.pages;\n          self.tasklist = [];\n          data.data.data.forEach(function (item) {\n            self.tasklist.push(item);\n          });\n        } else {\n          self.$message.error({\n            message: data.msg,\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    //删除\n    handleDel: function handleDel(index, row) {\n      var _this = this;\n\n      this.$confirm('确认删除任务[' + row.name + ']吗?', '提示', {\n        type: 'warning'\n      }).then(function () {\n        var self = _this;\n        self.listLoading = true;\n        var param = JSON.stringify({\n          project_id: Number(_this.$route.params.project_id),\n          ids: [row.id]\n        });\n\n        _axios.default.post(_api.test + \"/api/automation/del_task\", param, {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: 'Token ' + sessionStorage.getItem('token')\n          }\n        }).then(function (response) {\n          self.listLoading = false;\n          var data = response.data;\n\n          if (data.code === '999999') {\n            self.$message({\n              message: '删除成功',\n              center: true,\n              type: 'success'\n            });\n          } else {\n            self.$message.error({\n              message: data.msg,\n              center: true\n            });\n          }\n\n          self.getTaskList();\n        }).catch(function (error) {});\n      }).catch(function () {});\n    },\n    handleCurrentChange: function handleCurrentChange(val) {\n      this.page = val;\n      this.getTaskList();\n    },\n    selsChange: function selsChange(sels) {\n      if (sels.length > 0) {\n        this.sels = sels;\n        this.update = false;\n      } else {\n        this.update = true;\n      }\n    },\n    //批量删除\n    batchRemove: function batchRemove() {\n      var _this2 = this;\n\n      var ids = this.sels.map(function (item) {\n        return item.id;\n      });\n      var self = this;\n      this.$confirm('确认删除选中任务吗？', '提示', {\n        type: 'warning'\n      }).then(function () {\n        self.listLoading = true; //NProgress.start();\n\n        _axios.default.post(_api.test + \"/api/automation/del_task\", JSON.stringify({\n          project_id: Number(_this2.$route.params.project_id),\n          ids: ids\n        }), {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: 'Token ' + sessionStorage.getItem('token')\n          }\n        }).then(function (response) {\n          var data = response.data;\n          self.listLoading = false;\n\n          if (data.code === '999999') {\n            self.$message({\n              message: '删除成功',\n              center: true,\n              type: 'success'\n            });\n          } else {\n            self.$message.error({\n              message: data.msg,\n              center: true\n            });\n          }\n\n          self.getTaskList();\n        }).catch(function (error) {});\n      }).catch(function () {});\n    },\n    //显示编辑界面\n    handleEdit: function handleEdit(index, row) {\n      this.formTitle = \"编辑\";\n      this.taskVType = \"edit\";\n      this.taskVShow = true;\n      this.form = Object.assign({}, row); //                this.form = {\"id\":row.id,\"name\":row.name,\"type\":row.type,\"params\":row.params,\"group\":row.group,\"description\":row.description};\n    },\n    //显示新增界面\n    handleAdd: function handleAdd() {\n      this.formTitle = \"新增\";\n      this.taskVType = \"add\";\n      this.taskVShow = true;\n      this.form = {\n        name: \"\",\n        env: \"\",\n        automations: [],\n        params: \"{}\",\n        crontab: \"0 * * * *\",\n        status: true,\n        sendEmail: 0,\n        emails: []\n      };\n    },\n    //显示新增页面,复制用例\n    handleCopy: function handleCopy(index, row) {\n      this.formTitle = \"复制\"; //this.form={\"name\":row.name,\"type\":row.type,\"params\":row.params,\"group\":row.group,\"description\":row.description};\n\n      var form = Object.assign({}, row);\n      delete form[\"id\"];\n      this.form = form;\n      this.taskVShow = true;\n      this.taskVType = \"copy\";\n    },\n    // 修改任务\n    editSubmit: function editSubmit() {\n      var _this3 = this;\n\n      if (this.form.automations.length == 0) {\n        this.$message.error({\n          message: \"请选择用例!\",\n          center: true\n        });\n        return;\n      }\n\n      var self = this;\n      this.$refs.form.validate(function (valid) {\n        if (valid) {\n          _this3.$confirm('确认提交吗？', '提示', {}).then(function () {\n            self.editLoading = true; //NProgress.start();\n\n            var param = {\n              project_id: Number(_this3.$route.params.project_id),\n              automations: JSON.stringify(self.form.automations),\n              name: self.form.name,\n              params: self.form.params,\n              env: self.form.env,\n              crontab: self.form.crontab,\n              //                                startTime: self.form.timeArray[0],\n              //                                endTime: self.form.timeArray[1],\n              status: self.form.status,\n              sendEmail: self.form.sendEmail,\n              emails: JSON.stringify(self.form.emails)\n            };\n            var url = _api.test + \"/api/automation/add_task\";\n\n            if (self.form.id != null) {\n              param[\"id\"] = Number(self.form.id);\n              url = _api.test + \"/api/automation/update_task\";\n            }\n\n            _axios.default.post(url, param, {\n              headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: 'Token ' + sessionStorage.getItem('token')\n              }\n            }).then(function (response) {\n              var data = response.data;\n              self.editLoading = false;\n\n              if (data.code === '999999') {\n                self.$message({\n                  message: '执行成功',\n                  center: true,\n                  type: 'success'\n                });\n                self.$refs['form'].resetFields();\n                self.taskVShow = false;\n                self.getTaskList();\n              } else if (data.code === '999997') {\n                self.$message.error({\n                  message: data.msg,\n                  center: true\n                });\n              } else {\n                self.$message.error({\n                  message: data.msg,\n                  center: true\n                });\n              }\n            }).catch(function (error) {});\n          }).catch(function () {});\n        }\n      });\n    },\n    // 改变任务状态\n    handleChangeStatus: function handleChangeStatus(index, row) {\n      var self = this;\n      var url = \"\";\n      var message = \"\";\n      this.listLoading = true;\n      var param = JSON.stringify({\n        project_id: Number(this.$route.params.project_id),\n        id: row.id\n      });\n\n      if (row.status) {\n        url = _api.test + \"/api/automation/stop_task\";\n        message = '禁用成功';\n      } else {\n        url = _api.test + \"/api/automation/start_task\";\n        message = '启用成功';\n      }\n\n      _axios.default.post(url, param, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: 'Token ' + sessionStorage.getItem('token')\n        }\n      }).then(function (response) {\n        var _response$data = response.data,\n            msg = _response$data.msg,\n            code = _response$data.code,\n            data = _response$data.data;\n        self.listLoading = false;\n\n        if (code === '999999') {\n          self.$message({\n            message: message,\n            center: true,\n            type: 'success'\n          });\n          row.status = !row.status;\n        } else {\n          self.$message.error({\n            message: msg,\n            center: true\n          });\n        }\n      }).catch(function (error) {});\n    },\n    handleRun: function handleRun(index, row) {\n      this.formTitle = \"执行\";\n      this.taskVShow = true;\n      this.taskVType = \"run\";\n      this.form = Object.assign({}, row);\n    },\n    runSubmit: function runSubmit() {\n      var _this4 = this;\n\n      this.$confirm('确认执行定时任务[' + this.form.name + ']吗?', '提示', {}).then(function () {\n        var self = _this4;\n        var url = \"\";\n        var message = \"\";\n        _this4.listLoading = true;\n        var param = {\n          project_id: Number(_this4.$route.params.project_id),\n          id: self.form.id,\n          sendEmail: self.form.sendEmail,\n          emails: self.form.emails\n        };\n\n        _axios.default.post(_api.test + \"/api/automation/execute_task\", param, {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: 'Token ' + sessionStorage.getItem('token')\n          }\n        }).then(function (response) {\n          var _response$data2 = response.data,\n              msg = _response$data2.msg,\n              code = _response$data2.code,\n              data = _response$data2.data;\n          self.listLoading = false;\n          self.taskVShow = false;\n\n          if (code === '999999') {\n            self.$message({\n              message: \"开始执行\",\n              center: true,\n              type: 'success'\n            });\n          } else {\n            self.$message.error({\n              message: msg,\n              center: true\n            });\n          }\n        }).catch(function (error) {});\n      }).catch(function () {});\n    },\n    getEnv: function getEnv() {\n      var self = this;\n      var headers = {\n        Authorization: 'Token ' + sessionStorage.getItem('token')\n      };\n      (0, _api.getProjectConfig)(headers, {\n        project_id: self.$route.params.project_id,\n        page: self.page,\n        name: \"\",\n        type: \"env\"\n      }).then(function (data) {\n        if (data.code === '999999') {\n          data.data.data.forEach(function (item) {\n            if (item.status) {\n              self.EnvList.push(item);\n            }\n          });\n        } else {\n          self.$message.error({\n            message: data.msg,\n            center: true\n          });\n        }\n      });\n    },\n    init: function init() {\n      this.getTaskList();\n      this.getAutomationList();\n      this.getProjectMember();\n      this.getEnv();\n    }\n  },\n  mounted: function mounted() {\n    this.init();\n  },\n  watch: {\n    '$route': function $route(to, from) {\n      //监听路由是否变化\n      if (to.query != from.query) {\n        this.init(); //重新加载数据\n      }\n    }\n  }\n};\nexports.default = _default;",{"version":3,"sources":["taskList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;AAyHA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eACA;AACA,EAAA,IADA,kBACA;AACA,WAAA;AACA,MAAA,MAAA,EAAA,CAAA;AAAA,QAAA,KAAA,EAAA,IAAA;AAAA,QAAA,KAAA,EAAA;AAAA,OAAA,EACA;AAAA,QAAA,KAAA,EAAA,KAAA;AAAA,QAAA,KAAA,EAAA;AAAA,OADA,CADA;AAGA,MAAA,SAAA,EAAA,CAAA;AAAA,QAAA,KAAA,EAAA,CAAA;AAAA,QAAA,KAAA,EAAA;AAAA,OAAA,EACA;AAAA,QAAA,KAAA,EAAA,CAAA;AAAA,QAAA,KAAA,EAAA;AAAA,OADA,CAHA;AAKA,MAAA,OAAA,EAAA;AACA,QAAA,IAAA,EAAA;AADA,OALA;AAQA,MAAA,GAAA,EAAA,EARA;AASA,MAAA,OAAA,EAAA,EATA;AAUA,MAAA,cAAA,EAAA,EAVA;AAWA,MAAA,UAAA,EAAA,EAXA;AAYA,MAAA,QAAA,EAAA,EAZA;AAaA,MAAA,KAAA,EAAA,CAbA;AAcA,MAAA,IAAA,EAAA,CAdA;AAeA,MAAA,KAAA,EAAA,CAfA;AAgBA,MAAA,WAAA,EAAA,KAhBA;AAiBA,MAAA,WAAA,EAAA,KAjBA;AAkBA,MAAA,IAAA,EAAA,EAlBA;AAkBA;AACA,MAAA,SAAA,EAAA,KAnBA;AAoBA,MAAA,SAAA,EAAA,KApBA;AAqBA,MAAA,SAAA,EAAA,MArBA;AAsBA,MAAA,UAAA,EAAA,KAtBA;AAuBA,MAAA,MAAA,EAAA,IAvBA;AAwBA,MAAA,IAAA,EAAA;AACA,QAAA,EAAA,EAAA,EADA;AAEA,QAAA,IAAA,EAAA,EAFA;AAGA,QAAA,GAAA,EAAA,EAHA;AAIA,QAAA,WAAA,EAAA,EAJA;AAKA,QAAA,MAAA,EAAA,EALA;AAMA,QAAA,OAAA,EAAA,EANA;AAOA,QAAA,MAAA,EAAA,MAPA;AAQA,QAAA,SAAA,EAAA,CARA;AASA,QAAA,MAAA,EAAA;AATA,OAxBA;AAmCA,MAAA,SAAA,EAAA;AACA,QAAA,IAAA,EAAA,CACA;AAAA,UAAA,QAAA,EAAA,IAAA;AAAA,UAAA,OAAA,EAAA,SAAA;AAAA,UAAA,OAAA,EAAA;AAAA,SADA,EAEA;AAAA,UAAA,GAAA,EAAA,CAAA;AAAA,UAAA,GAAA,EAAA,EAAA;AAAA,UAAA,OAAA,EAAA,gBAAA;AAAA,UAAA,OAAA,EAAA;AAAA,SAFA,CADA;AAKA,QAAA,GAAA,EAAA,CACA;AAAA,UAAA,QAAA,EAAA,IAAA;AAAA,UAAA,OAAA,EAAA;AAAA,SADA,CALA;AAQA,QAAA,UAAA,EAAA,CACA;AAAA,UAAA,QAAA,EAAA,IAAA;AAAA,UAAA,OAAA,EAAA;AAAA,SADA,CARA;AAWA,QAAA,OAAA,EAAA,CACA;AAAA,UAAA,QAAA,EAAA,IAAA;AAAA,UAAA,OAAA,EAAA;AAAA,SADA;AAXA;AAnCA,KAAA;AAmDA,GArDA;AAsDA,EAAA,OAAA,EAAA;AACA;AACA,IAAA,iBAFA,+BAEA;AACA,UAAA,IAAA,GAAA,IAAA;AACA,UAAA,KAAA,GAAA;AAAA,QAAA,UAAA,EAAA,KAAA,MAAA,CAAA,MAAA,CAAA,UAAA;AAAA,QAAA,IAAA,EAAA,IAAA,CAAA,IAAA;AAAA,QAAA,SAAA,EAAA;AAAA,OAAA;;AACA,qBAAA,GAAA,CAAA,YAAA,iCAAA,EAAA;AAAA,QAAA,MAAA,EAAA,KAAA;AAAA,QAAA,OAAA,EAAA;AAAA,0BAAA,kBAAA;AAAA,UAAA,aAAA,EAAA,WAAA,cAAA,CAAA,OAAA,CAAA,OAAA;AAAA;AAAA,OAAA,EAAA,IAAA,CAAA,UAAA,QAAA,EAAA;AACA,YAAA,IAAA,GAAA,QAAA,CAAA,IAAA;;AACA,YAAA,IAAA,CAAA,IAAA,KAAA,QAAA,EAAA;AACA,UAAA,IAAA,CAAA,cAAA,GAAA,EAAA;AACA,UAAA,IAAA,CAAA,IAAA,CAAA,IAAA,CAAA,OAAA,CAAA,UAAA,IAAA,EAAA;AACA,YAAA,IAAA,CAAA,cAAA,CAAA,IAAA,CAAA,IAAA;AACA,WAFA;AAGA,SALA,MAMA;AACA,UAAA,IAAA,CAAA,QAAA,CAAA,KAAA,CAAA;AACA,YAAA,OAAA,EAAA,IAAA,CAAA,GADA;AAEA,YAAA,MAAA,EAAA;AAFA,WAAA;AAIA;AACA,OAdA,EAcA,KAdA,CAcA,UAAA,KAAA,EAAA,CAEA,CAhBA;AAiBA,KAtBA;AAuBA;AACA,IAAA,gBAxBA,8BAwBA;AACA,UAAA,IAAA,GAAA,IAAA;AACA,UAAA,MAAA,GAAA;AACA,QAAA,UAAA,EAAA,KAAA,MAAA,CAAA,MAAA,CAAA,UADA;AAEA,QAAA,IAAA,EAAA,IAAA,CAAA,IAFA;AAGA,QAAA,SAAA,EAAA;AAHA,OAAA;AAKA,UAAA,OAAA,GAAA;AACA,wBAAA,kBADA;AAEA,QAAA,aAAA,EAAA,WAAA,cAAA,CAAA,OAAA,CAAA,OAAA;AAFA,OAAA;;AAIA,qBAAA,GAAA,WAAA,SAAA,iCAAA;AAAA,QAAA,MAAA,EAAA,MAAA;AAAA,QAAA,OAAA,EAAA;AAAA,OAAA,EAAA,IAAA,CAAA,UAAA,GAAA,EAAA;AAAA,wBACA,GAAA,CAAA,IADA;AAAA,YACA,GADA,aACA,GADA;AAAA,YACA,IADA,aACA,IADA;AAAA,YACA,IADA,aACA,IADA;;AAEA,YAAA,IAAA,KAAA,QAAA,EAAA;AACA,UAAA,IAAA,CAAA,UAAA,GAAA,IAAA,CAAA,IAAA;AACA,SAFA,MAGA;AACA,UAAA,IAAA,CAAA,QAAA,CAAA,KAAA,CAAA;AACA,YAAA,OAAA,EAAA,GADA;AAEA,YAAA,MAAA,EAAA;AAFA,WAAA;AAIA;AACA,OAXA;AAYA,KA/CA;AAgDA,IAAA,YAhDA,0BAgDA;AACA,WAAA,IAAA,GAAA,CAAA;AACA,WAAA,WAAA;AACA,KAnDA;AAoDA;AACA,IAAA,WArDA,yBAqDA;AACA,UAAA,IAAA,GAAA,IAAA;AACA,MAAA,IAAA,CAAA,WAAA,GAAA,IAAA;AACA,UAAA,KAAA,GAAA;AAAA,QAAA,UAAA,EAAA,KAAA,MAAA,CAAA,MAAA,CAAA,UAAA;AAAA,QAAA,IAAA,EAAA,IAAA,CAAA,IAAA;AAAA,QAAA,IAAA,EAAA,IAAA,CAAA,OAAA,CAAA;AAAA,OAAA;;AACA,qBAAA,GAAA,CAAA,YAAA,2BAAA,EAAA;AAAA,QAAA,MAAA,EAAA,KAAA;AAAA,QAAA,OAAA,EAAA;AAAA,0BAAA,kBAAA;AAAA,UAAA,aAAA,EAAA,WAAA,cAAA,CAAA,OAAA,CAAA,OAAA;AAAA;AAAA,OAAA,EAAA,IAAA,CAAA,UAAA,QAAA,EAAA;AACA,YAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AACA,QAAA,IAAA,CAAA,WAAA,GAAA,KAAA;;AACA,YAAA,IAAA,CAAA,IAAA,KAAA,QAAA,EAAA;AACA,UAAA,IAAA,CAAA,KAAA,GAAA,IAAA,CAAA,IAAA,CAAA,KAAA;AACA,UAAA,IAAA,CAAA,KAAA,GAAA,IAAA,CAAA,IAAA,CAAA,KAAA;AACA,UAAA,IAAA,CAAA,QAAA,GAAA,EAAA;AACA,UAAA,IAAA,CAAA,IAAA,CAAA,IAAA,CAAA,OAAA,CAAA,UAAA,IAAA,EAAA;AACA,YAAA,IAAA,CAAA,QAAA,CAAA,IAAA,CAAA,IAAA;AACA,WAFA;AAGA,SAPA,MAOA;AACA,UAAA,IAAA,CAAA,QAAA,CAAA,KAAA,CAAA;AACA,YAAA,OAAA,EAAA,IAAA,CAAA,GADA;AAEA,YAAA,MAAA,EAAA;AAFA,WAAA;AAIA;AACA,OAhBA,EAgBA,KAhBA,CAgBA,UAAA,KAAA,EAAA,CAEA,CAlBA;AAmBA,KA5EA;AA6EA;AACA,IAAA,SAAA,EAAA,mBAAA,KAAA,EAAA,GAAA,EAAA;AAAA;;AACA,WAAA,QAAA,CAAA,YAAA,GAAA,CAAA,IAAA,GAAA,KAAA,EAAA,IAAA,EAAA;AACA,QAAA,IAAA,EAAA;AADA,OAAA,EAEA,IAFA,CAEA,YAAA;AACA,YAAA,IAAA,GAAA,KAAA;AACA,QAAA,IAAA,CAAA,WAAA,GAAA,IAAA;AACA,YAAA,KAAA,GAAA,IAAA,CAAA,SAAA,CAAA;AACA,UAAA,UAAA,EAAA,MAAA,CAAA,KAAA,CAAA,MAAA,CAAA,MAAA,CAAA,UAAA,CADA;AAEA,UAAA,GAAA,EAAA,CAAA,GAAA,CAAA,EAAA;AAFA,SAAA,CAAA;;AAGA,uBAAA,IAAA,CAAA,YAAA,0BAAA,EAAA,KAAA,EAAA;AAAA,UAAA,OAAA,EAAA;AAAA,4BAAA,kBAAA;AAAA,YAAA,aAAA,EAAA,WAAA,cAAA,CAAA,OAAA,CAAA,OAAA;AAAA;AAAA,SAAA,EAAA,IAAA,CAAA,UAAA,QAAA,EAAA;AACA,UAAA,IAAA,CAAA,WAAA,GAAA,KAAA;AACA,cAAA,IAAA,GAAA,QAAA,CAAA,IAAA;;AACA,cAAA,IAAA,CAAA,IAAA,KAAA,QAAA,EAAA;AACA,YAAA,IAAA,CAAA,QAAA,CAAA;AACA,cAAA,OAAA,EAAA,MADA;AAEA,cAAA,MAAA,EAAA,IAFA;AAGA,cAAA,IAAA,EAAA;AAHA,aAAA;AAKA,WANA,MAMA;AACA,YAAA,IAAA,CAAA,QAAA,CAAA,KAAA,CAAA;AACA,cAAA,OAAA,EAAA,IAAA,CAAA,GADA;AAEA,cAAA,MAAA,EAAA;AAFA,aAAA;AAIA;;AACA,UAAA,IAAA,CAAA,WAAA;AACA,SAhBA,EAgBA,KAhBA,CAgBA,UAAA,KAAA,EAAA,CAEA,CAlBA;AAmBA,OA3BA,EA2BA,KA3BA,CA2BA,YAAA,CACA,CA5BA;AA6BA,KA5GA;AA6GA,IAAA,mBA7GA,+BA6GA,GA7GA,EA6GA;AACA,WAAA,IAAA,GAAA,GAAA;AACA,WAAA,WAAA;AACA,KAhHA;AAiHA,IAAA,UAAA,EAAA,oBAAA,IAAA,EAAA;AACA,UAAA,IAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,aAAA,IAAA,GAAA,IAAA;AACA,aAAA,MAAA,GAAA,KAAA;AACA,OAHA,MAGA;AACA,aAAA,MAAA,GAAA,IAAA;AACA;AACA,KAxHA;AAyHA;AACA,IAAA,WAAA,EAAA,uBAAA;AAAA;;AACA,UAAA,GAAA,GAAA,KAAA,IAAA,CAAA,GAAA,CAAA,UAAA,IAAA;AAAA,eAAA,IAAA,CAAA,EAAA;AAAA,OAAA,CAAA;AACA,UAAA,IAAA,GAAA,IAAA;AACA,WAAA,QAAA,CAAA,YAAA,EAAA,IAAA,EAAA;AACA,QAAA,IAAA,EAAA;AADA,OAAA,EAEA,IAFA,CAEA,YAAA;AACA,QAAA,IAAA,CAAA,WAAA,GAAA,IAAA,CADA,CAEA;;AACA,uBAAA,IAAA,CAAA,YAAA,0BAAA,EAAA,IAAA,CAAA,SAAA,CAAA;AAAA,UAAA,UAAA,EAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,UAAA,CAAA;AAAA,UAAA,GAAA,EAAA;AAAA,SAAA,CAAA,EAAA;AAAA,UAAA,OAAA,EAAA;AAAA,4BAAA,kBAAA;AAAA,YAAA,aAAA,EAAA,WAAA,cAAA,CAAA,OAAA,CAAA,OAAA;AAAA;AAAA,SAAA,EAAA,IAAA,CAAA,UAAA,QAAA,EAAA;AACA,cAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AACA,UAAA,IAAA,CAAA,WAAA,GAAA,KAAA;;AACA,cAAA,IAAA,CAAA,IAAA,KAAA,QAAA,EAAA;AACA,YAAA,IAAA,CAAA,QAAA,CAAA;AACA,cAAA,OAAA,EAAA,MADA;AAEA,cAAA,MAAA,EAAA,IAFA;AAGA,cAAA,IAAA,EAAA;AAHA,aAAA;AAKA,WANA,MAOA;AACA,YAAA,IAAA,CAAA,QAAA,CAAA,KAAA,CAAA;AACA,cAAA,OAAA,EAAA,IAAA,CAAA,GADA;AAEA,cAAA,MAAA,EAAA;AAFA,aAAA;AAIA;;AACA,UAAA,IAAA,CAAA,WAAA;AACA,SAjBA,EAiBA,KAjBA,CAiBA,UAAA,KAAA,EAAA,CAEA,CAnBA;AAoBA,OAzBA,EAyBA,KAzBA,CAyBA,YAAA,CAEA,CA3BA;AA4BA,KAzJA;AA0JA;AACA,IAAA,UAAA,EAAA,oBAAA,KAAA,EAAA,GAAA,EAAA;AACA,WAAA,SAAA,GAAA,IAAA;AACA,WAAA,SAAA,GAAA,MAAA;AACA,WAAA,SAAA,GAAA,IAAA;AACA,WAAA,IAAA,GAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,GAAA,CAAA,CAJA,CAKA;AACA,KAjKA;AAkKA;AACA,IAAA,SAAA,EAAA,qBAAA;AACA,WAAA,SAAA,GAAA,IAAA;AACA,WAAA,SAAA,GAAA,KAAA;AACA,WAAA,SAAA,GAAA,IAAA;AACA,WAAA,IAAA,GAAA;AAAA,QAAA,IAAA,EAAA,EAAA;AAAA,QAAA,GAAA,EAAA,EAAA;AAAA,QAAA,WAAA,EAAA,EAAA;AAAA,QAAA,MAAA,EAAA,IAAA;AAAA,QAAA,OAAA,EAAA,WAAA;AAAA,QAAA,MAAA,EAAA,IAAA;AAAA,QAAA,SAAA,EAAA,CAAA;AAAA,QAAA,MAAA,EAAA;AAAA,OAAA;AACA,KAxKA;AAyKA;AACA,IAAA,UAAA,EAAA,oBAAA,KAAA,EAAA,GAAA,EAAA;AACA,WAAA,SAAA,GAAA,IAAA,CADA,CAEA;;AACA,UAAA,IAAA,GAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,GAAA,CAAA;AACA,aAAA,IAAA,CAAA,IAAA,CAAA;AACA,WAAA,IAAA,GAAA,IAAA;AACA,WAAA,SAAA,GAAA,IAAA;AACA,WAAA,SAAA,GAAA,MAAA;AACA,KAlLA;AAmLA;AACA,IAAA,UAAA,EAAA,sBAAA;AAAA;;AACA,UAAA,KAAA,IAAA,CAAA,WAAA,CAAA,MAAA,IAAA,CAAA,EAAA;AACA,aAAA,QAAA,CAAA,KAAA,CAAA;AACA,UAAA,OAAA,EAAA,QADA;AAEA,UAAA,MAAA,EAAA;AAFA,SAAA;AAIA;AACA;;AACA,UAAA,IAAA,GAAA,IAAA;AACA,WAAA,KAAA,CAAA,IAAA,CAAA,QAAA,CAAA,UAAA,KAAA,EAAA;AACA,YAAA,KAAA,EAAA;AACA,UAAA,MAAA,CAAA,QAAA,CAAA,QAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,CAAA,YAAA;AACA,YAAA,IAAA,CAAA,WAAA,GAAA,IAAA,CADA,CAEA;;AACA,gBAAA,KAAA,GAAA;AACA,cAAA,UAAA,EAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,UAAA,CADA;AAEA,cAAA,WAAA,EAAA,IAAA,CAAA,SAAA,CAAA,IAAA,CAAA,IAAA,CAAA,WAAA,CAFA;AAGA,cAAA,IAAA,EAAA,IAAA,CAAA,IAAA,CAAA,IAHA;AAIA,cAAA,MAAA,EAAA,IAAA,CAAA,IAAA,CAAA,MAJA;AAKA,cAAA,GAAA,EAAA,IAAA,CAAA,IAAA,CAAA,GALA;AAMA,cAAA,OAAA,EAAA,IAAA,CAAA,IAAA,CAAA,OANA;AAOA;AACA;AACA,cAAA,MAAA,EAAA,IAAA,CAAA,IAAA,CAAA,MATA;AAUA,cAAA,SAAA,EAAA,IAAA,CAAA,IAAA,CAAA,SAVA;AAWA,cAAA,MAAA,EAAA,IAAA,CAAA,SAAA,CAAA,IAAA,CAAA,IAAA,CAAA,MAAA;AAXA,aAAA;AAYA,gBAAA,GAAA,GAAA,YAAA,0BAAA;;AACA,gBAAA,IAAA,CAAA,IAAA,CAAA,EAAA,IAAA,IAAA,EAAA;AACA,cAAA,KAAA,CAAA,IAAA,CAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA,EAAA,CAAA;AACA,cAAA,GAAA,GAAA,YAAA,6BAAA;AACA;;AACA,2BAAA,IAAA,CAAA,GAAA,EAAA,KAAA,EAAA;AAAA,cAAA,OAAA,EAAA;AAAA,gCAAA,kBAAA;AAAA,gBAAA,aAAA,EAAA,WAAA,cAAA,CAAA,OAAA,CAAA,OAAA;AAAA;AAAA,aAAA,EAAA,IAAA,CAAA,UAAA,QAAA,EAAA;AACA,kBAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AACA,cAAA,IAAA,CAAA,WAAA,GAAA,KAAA;;AACA,kBAAA,IAAA,CAAA,IAAA,KAAA,QAAA,EAAA;AACA,gBAAA,IAAA,CAAA,QAAA,CAAA;AACA,kBAAA,OAAA,EAAA,MADA;AAEA,kBAAA,MAAA,EAAA,IAFA;AAGA,kBAAA,IAAA,EAAA;AAHA,iBAAA;AAKA,gBAAA,IAAA,CAAA,KAAA,CAAA,MAAA,EAAA,WAAA;AACA,gBAAA,IAAA,CAAA,SAAA,GAAA,KAAA;AACA,gBAAA,IAAA,CAAA,WAAA;AACA,eATA,MASA,IAAA,IAAA,CAAA,IAAA,KAAA,QAAA,EAAA;AACA,gBAAA,IAAA,CAAA,QAAA,CAAA,KAAA,CAAA;AACA,kBAAA,OAAA,EAAA,IAAA,CAAA,GADA;AAEA,kBAAA,MAAA,EAAA;AAFA,iBAAA;AAIA,eALA,MAKA;AACA,gBAAA,IAAA,CAAA,QAAA,CAAA,KAAA,CAAA;AACA,kBAAA,OAAA,EAAA,IAAA,CAAA,GADA;AAEA,kBAAA,MAAA,EAAA;AAFA,iBAAA;AAIA;AACA,aAvBA,EAuBA,KAvBA,CAuBA,UAAA,KAAA,EAAA,CAAA,CAvBA;AAwBA,WA5CA,EA4CA,KA5CA,CA4CA,YAAA,CAAA,CA5CA;AA6CA;AACA,OAhDA;AAiDA,KA9OA;AA+OA;AACA,IAAA,kBAAA,EAAA,4BAAA,KAAA,EAAA,GAAA,EAAA;AACA,UAAA,IAAA,GAAA,IAAA;AACA,UAAA,GAAA,GAAA,EAAA;AACA,UAAA,OAAA,GAAA,EAAA;AACA,WAAA,WAAA,GAAA,IAAA;AACA,UAAA,KAAA,GAAA,IAAA,CAAA,SAAA,CAAA;AAAA,QAAA,UAAA,EAAA,MAAA,CAAA,KAAA,MAAA,CAAA,MAAA,CAAA,UAAA,CAAA;AAAA,QAAA,EAAA,EAAA,GAAA,CAAA;AAAA,OAAA,CAAA;;AACA,UAAA,GAAA,CAAA,MAAA,EAAA;AACA,QAAA,GAAA,GAAA,YAAA,2BAAA;AACA,QAAA,OAAA,GAAA,MAAA;AACA,OAHA,MAGA;AACA,QAAA,GAAA,GAAA,YAAA,4BAAA;AACA,QAAA,OAAA,GAAA,MAAA;AACA;;AACA,qBAAA,IAAA,CAAA,GAAA,EAAA,KAAA,EAAA;AAAA,QAAA,OAAA,EAAA;AAAA,0BAAA,kBAAA;AAAA,UAAA,aAAA,EAAA,WAAA,cAAA,CAAA,OAAA,CAAA,OAAA;AAAA;AAAA,OAAA,EAAA,IAAA,CAAA,UAAA,QAAA,EAAA;AAAA,6BACA,QAAA,CAAA,IADA;AAAA,YACA,GADA,kBACA,GADA;AAAA,YACA,IADA,kBACA,IADA;AAAA,YACA,IADA,kBACA,IADA;AAEA,QAAA,IAAA,CAAA,WAAA,GAAA,KAAA;;AACA,YAAA,IAAA,KAAA,QAAA,EAAA;AACA,UAAA,IAAA,CAAA,QAAA,CAAA;AACA,YAAA,OAAA,EAAA,OADA;AAEA,YAAA,MAAA,EAAA,IAFA;AAGA,YAAA,IAAA,EAAA;AAHA,WAAA;AAKA,UAAA,GAAA,CAAA,MAAA,GAAA,CAAA,GAAA,CAAA,MAAA;AACA,SAPA,MAQA;AACA,UAAA,IAAA,CAAA,QAAA,CAAA,KAAA,CAAA;AACA,YAAA,OAAA,EAAA,GADA;AAEA,YAAA,MAAA,EAAA;AAFA,WAAA;AAIA;AACA,OAjBA,EAiBA,KAjBA,CAiBA,UAAA,KAAA,EAAA,CAEA,CAnBA;AAoBA,KAjRA;AAkRA,IAAA,SAAA,EAAA,mBAAA,KAAA,EAAA,GAAA,EAAA;AACA,WAAA,SAAA,GAAA,IAAA;AACA,WAAA,SAAA,GAAA,IAAA;AACA,WAAA,SAAA,GAAA,KAAA;AACA,WAAA,IAAA,GAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,GAAA,CAAA;AACA,KAvRA;AAwRA,IAAA,SAAA,EAAA,qBAAA;AAAA;;AACA,WAAA,QAAA,CAAA,cAAA,KAAA,IAAA,CAAA,IAAA,GAAA,KAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,CAAA,YAAA;AACA,YAAA,IAAA,GAAA,MAAA;AACA,YAAA,GAAA,GAAA,EAAA;AACA,YAAA,OAAA,GAAA,EAAA;AACA,QAAA,MAAA,CAAA,WAAA,GAAA,IAAA;AACA,YAAA,KAAA,GAAA;AAAA,UAAA,UAAA,EAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,UAAA,CAAA;AAAA,UAAA,EAAA,EAAA,IAAA,CAAA,IAAA,CAAA,EAAA;AAAA,UAAA,SAAA,EAAA,IAAA,CAAA,IAAA,CAAA,SAAA;AAAA,UAAA,MAAA,EAAA,IAAA,CAAA,IAAA,CAAA;AAAA,SAAA;;AACA,uBAAA,IAAA,CAAA,YAAA,8BAAA,EAAA,KAAA,EAAA;AAAA,UAAA,OAAA,EAAA;AAAA,4BAAA,kBAAA;AAAA,YAAA,aAAA,EAAA,WAAA,cAAA,CAAA,OAAA,CAAA,OAAA;AAAA;AAAA,SAAA,EAAA,IAAA,CAAA,UAAA,QAAA,EAAA;AAAA,gCACA,QAAA,CAAA,IADA;AAAA,cACA,GADA,mBACA,GADA;AAAA,cACA,IADA,mBACA,IADA;AAAA,cACA,IADA,mBACA,IADA;AAEA,UAAA,IAAA,CAAA,WAAA,GAAA,KAAA;AACA,UAAA,IAAA,CAAA,SAAA,GAAA,KAAA;;AACA,cAAA,IAAA,KAAA,QAAA,EAAA;AACA,YAAA,IAAA,CAAA,QAAA,CAAA;AACA,cAAA,OAAA,EAAA,MADA;AAEA,cAAA,MAAA,EAAA,IAFA;AAGA,cAAA,IAAA,EAAA;AAHA,aAAA;AAKA,WANA,MAOA;AACA,YAAA,IAAA,CAAA,QAAA,CAAA,KAAA,CAAA;AACA,cAAA,OAAA,EAAA,GADA;AAEA,cAAA,MAAA,EAAA;AAFA,aAAA;AAIA;AACA,SAjBA,EAiBA,KAjBA,CAiBA,UAAA,KAAA,EAAA,CAEA,CAnBA;AAoBA,OA1BA,EA0BA,KA1BA,CA0BA,YAAA,CAAA,CA1BA;AA2BA,KApTA;AAqTA,IAAA,MArTA,oBAqTA;AACA,UAAA,IAAA,GAAA,IAAA;AACA,UAAA,OAAA,GAAA;AACA,QAAA,aAAA,EAAA,WAAA,cAAA,CAAA,OAAA,CAAA,OAAA;AADA,OAAA;AAGA,iCAAA,OAAA,EAAA;AAAA,QAAA,UAAA,EAAA,IAAA,CAAA,MAAA,CAAA,MAAA,CAAA,UAAA;AAAA,QAAA,IAAA,EAAA,IAAA,CAAA,IAAA;AAAA,QAAA,IAAA,EAAA,EAAA;AAAA,QAAA,IAAA,EAAA;AAAA,OAAA,EAAA,IAAA,CAAA,UAAA,IAAA,EAAA;AACA,YAAA,IAAA,CAAA,IAAA,KAAA,QAAA,EAAA;AACA,UAAA,IAAA,CAAA,IAAA,CAAA,IAAA,CAAA,OAAA,CAAA,UAAA,IAAA,EAAA;AACA,gBAAA,IAAA,CAAA,MAAA,EAAA;AACA,cAAA,IAAA,CAAA,OAAA,CAAA,IAAA,CAAA,IAAA;AACA;AACA,WAJA;AAKA,SANA,MAMA;AACA,UAAA,IAAA,CAAA,QAAA,CAAA,KAAA,CAAA;AACA,YAAA,OAAA,EAAA,IAAA,CAAA,GADA;AAEA,YAAA,MAAA,EAAA;AAFA,WAAA;AAIA;AACA,OAbA;AAcA,KAxUA;AAyUA,IAAA,IAzUA,kBAyUA;AACA,WAAA,WAAA;AACA,WAAA,iBAAA;AACA,WAAA,gBAAA;AACA,WAAA,MAAA;AACA;AA9UA,GAtDA;AAsYA,EAAA,OAtYA,qBAsYA;AACA,SAAA,IAAA;AACA,GAxYA;AAyYA,EAAA,KAAA,EAAA;AACA,YADA,kBACA,EADA,EACA,IADA,EACA;AAAA;AACA,UAAA,EAAA,CAAA,KAAA,IAAA,IAAA,CAAA,KAAA,EAAA;AACA,aAAA,IAAA,GADA,CACA;AACA;AACA;AALA;AAzYA,C","sourcesContent":["<template>\n    <div style=\"margin:35px\">\n        <!--工具条-->\n        <el-col :span=\"24\" class=\"toolbar\" style=\"padding-bottom: 0px;\">\n            <el-form :inline=\"true\" :model=\"filters\" @submit.native.prevent>\n                <el-form-item>\n                    <el-input v-model.trim=\"filters.name\" placeholder=\"名称\" @keyup.enter.native=\"handleSearch\"></el-input>\n                </el-form-item>\n                <el-form-item>\n                    <el-button type=\"primary\" @click=\"handleSearch\">查询</el-button>\n                </el-form-item>\n                <el-form-item>\n                    <el-button type=\"primary\" @click=\"handleAdd\">新增</el-button>\n                </el-form-item>\n                <!--<el-form-item v-show=\"listType!=='list'\">-->\n                    <!--<el-button type=\"primary\" @click.native=\"Download\">下载自动化</el-button>-->\n                <!--</el-form-item>-->\n                <!--<el-button v-show=\"listType!=='list'\" type=\"primary\" @click.native=\"getTask\"><div>设置定时任务</div></el-button>-->\n            </el-form>\n        </el-col>\n        <el-dialog width=\"40%\" :title=\"formTitle\" :visible.sync=\"taskVShow\"  :close-on-click-modal=\"false\">\n            <el-form ref=\"form\" :model=\"form\" label-width=\"100px\" :rules=\"formRules\">\n                <el-form-item label=\"任务名称：\" prop=\"name\">\n                    <el-input :disabled=\"taskVType==='run'\" v-model.trim=\"form.name\" placeholder=\"请输入任务名称\"></el-input>\n                </el-form-item>\n                <el-form-item label=\"用例：\" prop=\"automations\">\n                    <el-select :disabled=\"taskVType==='run'\" style=\"width:100%\" filterable multiple v-model=\"form.automations\" placeholder=\"请选择\">\n                        <el-option v-for=\"item in automationlist\" :key=\"item.id\" :label=\"item.name\" :value=\"item.id\"></el-option>\n                    </el-select>\n                </el-form-item>\n                <!--<el-form-item label=\"参数\" prop='params'>-->\n                    <!--<el-input type=\"textarea\" :rows=\"3\" v-model.trim=\"form.params\"></el-input>-->\n                <!--</el-form-item>-->\n                <el-form-item label=\"执行环境\" prop='env'>\n                    <el-select :disabled=\"taskVType==='run'\" v-model=\"form.env\"  placeholder=\"执行环境\">\n                        <el-option v-for=\"(item,index) in EnvList\" :key=\"index+''\" :label=\"item.name\" :value=\"item.name\"></el-option>\n                    </el-select>\n                </el-form-item>\n                <el-form-item label=\"Crontab\" prop='crontab'>\n                    <el-input :disabled=\"taskVType==='run'\" type=\"textarea\" :rows=\"3\" v-model.trim=\"form.crontab\"></el-input>\n                </el-form-item>\n                <el-form-item label=\"状态:\" prop='status'>\n                    <el-select :disabled=\"taskVType==='run'\" v-model=\"form.status\" placeholder=\"状态\">\n                        <el-option v-for=\"(item,index) in status\" :key=\"index+''\" :label=\"item.label\" :value=\"item.value\"></el-option>\n                    </el-select>\n                </el-form-item>\n                <el-form-item label=\"结果反馈:\" prop='sendEmail'>\n                    <el-select v-model=\"form.sendEmail\" placeholder=\"结果反馈\">\n                        <el-option v-for=\"(item,index) in sendEmail\" :key=\"index+''\" :label=\"item.label\" :value=\"item.value\"></el-option>\n                    </el-select>\n                </el-form-item>\n                <el-form-item label=\"收件人\" prop='emails'>\n                    <!--<el-input type=\"textarea\" :rows=\"3\" v-model.trim=\"form.emails\"></el-input>-->\n                    <el-select style=\"width:100%\" filterable multiple v-model=\"form.emails\" placeholder=\"请选择\">\n                        <el-option v-for=\"item in memberData\" :key=\"item.userEmail\" :label=\"item.username\" :value=\"item.userEmail\"></el-option>\n                    </el-select>\n                </el-form-item>\n                <!--<el-form-item label=\"执行时间：\" prop=\"timeArray\">-->\n                    <!--<el-date-picker  v-model=\"form.timeArray\" type=\"datetimerange\" :picker-options=\"pickerOptions2\"-->\n                                     <!--range-separator=\"   至   \" start-placeholder=\"开始日期\" end-placeholder=\"结束日期\" align=\"right\" ></el-date-picker>-->\n                <!--</el-form-item>-->\n                <el-form-item>\n                    <el-button @click.native=\"taskVShow = false\">取消</el-button>\n                    <el-button type=\"primary\" v-show=\"taskVType!=='run'\" :loading=\"editLoading\" @click.native=\"editSubmit\">保存</el-button>\n                    <el-button type=\"primary\" v-show=\"taskVType==='run'\" :loading=\"editLoading\" @click.native=\"runSubmit\">执行</el-button>\n                </el-form-item>\n            </el-form>\n        </el-dialog>\n\n        <!--列表-->\n        <el-table :data=\"tasklist\" stripe border highlight-current-row v-loading=\"listLoading\" @selection-change=\"selsChange\" style=\"width: 100%;\">\n            <el-table-column type=\"selection\" min-width=\"5%\">\n            </el-table-column>\n            <el-table-column prop=\"id\" sortable label=\"ID\" min-width=\"5%\">\n            </el-table-column>\n            <el-table-column prop=\"name\" sortable label=\"任务名称\" min-width=\"15%\" show-overflow-tooltip>\n            </el-table-column>\n            <el-table-column prop=\"automationName\" label=\"用例名称\" min-width=\"15%\" show-overflow-tooltip>\n            </el-table-column>\n            <el-table-column prop=\"crontab\" label=\"执行时间\" min-width=\"10%\" show-overflow-tooltip>\n            </el-table-column>\n            <el-table-column prop=\"env\" sortable label=\"执行环境\" min-width=\"10%\" show-overflow-tooltip>\n            </el-table-column>\n            <el-table-column prop=\"status\" label=\"状态\" min-width=\"5%\" show-overflow-tooltip>\n                <template slot-scope=\"scope\">\n                    <img v-show=\"scope.row.status\" src=\"@/assets/icon-yes.svg\"/>\n                    <img v-show=\"!scope.row.status\" src=\"@/assets/icon-no.svg\"/>\n                </template>\n            </el-table-column>\n            <el-table-column label=\"操作\" min-width=\"25%\">\n                <template slot-scope=\"scope\">\n                  <!--<el-button-group>-->\n                    <!--<el-button size=\"mini\" @click=\"handleEdit(scope.$index, scope.row)\">修改</el-button>-->\n                    <!--<el-button type=\"primary\" size=\"mini\" @click=\"handleCopy(scope.$index, scope.row)\">复制</el-button>-->\n                    <!--<el-button type=\"danger\" size=\"mini\" @click=\"handleDel(scope.$index, scope.row)\">删除</el-button>-->\n                    <!--<el-button type=\"info\" size=\"mini\" @click=\"handleChangeStatus(scope.$index, scope.row)\">{{scope.row.status===false?'启动':'停止'}}</el-button>-->\n                    <!--<el-button type=\"success\" size=\"mini\" @click=\"handleRun(scope.$index, scope.row)\">执行</el-button>-->\n                  <!--</el-button-group>-->\n                  <el-dropdown>\n                    <el-button type=\"primary\" size=\"small\" @click=\"handleEdit(scope.$index, scope.row)\" plain>修改<i class=\"el-icon-arrow-down el-icon--right\"></i></el-button>\n                    <el-dropdown-menu slot=\"dropdown\">\n                      <el-dropdown-item><el-button type=\"success\" size=\"small\" @click=\"handleRun(scope.$index, scope.row)\" plain>执行</el-button></el-dropdown-item>\n                      <el-dropdown-item><el-button type=\"info\" size=\"small\" @click=\"handleChangeStatus(scope.$index, scope.row)\" plain>{{scope.row.status===false?'启用':'禁用'}}</el-button></el-dropdown-item>\n                      <el-dropdown-item><el-button type=\"primary\" size=\"small\" @click=\"handleCopy(scope.$index, scope.row)\" plain>复制</el-button></el-dropdown-item>\n                      <el-dropdown-item><el-button type=\"danger\" size=\"small\" @click=\"handleDel(scope.$index, scope.row)\" plain>删除</el-button></el-dropdown-item>\n                    </el-dropdown-menu>\n                  </el-dropdown>\n                </template>\n            </el-table-column>\n        </el-table>\n\n        <!--工具条-->\n        <el-col :span=\"24\" class=\"toolbar\">\n            <el-button type=\"danger\" @click=\"batchRemove\" :disabled=\"this.sels.length===0\">批量删除</el-button>\n            <el-pagination layout=\"total, prev, pager, next\" @current-change=\"handleCurrentChange\" :current-page.sync=\"page\" :total=\"total\" :page-size=\"20\" :page-count=\"pages\" style=\"float:right;\">\n            </el-pagination>\n        </el-col>\n    </div>\n</template>\n\n<script>\n    import { test,getProjectConfig } from '../../../api/api'\n    import $ from 'jquery'\n    import moment from \"moment\"\n    import axios from \"axios\"\n    export default {\n        data() {\n            return {\n                status: [{value: true, label: '启动'},\n                    {value: false, label: '停止'}],\n                sendEmail: [{value: 0, label: '不发送'},\n                    {value: 1, label: '发送'}],\n                filters: {\n                    name: ''\n                },\n                env: '',\n                EnvList: [],\n                automationlist: [],\n                memberData: [],\n                tasklist: [],\n                total: 0,\n                page: 1,\n                pages: 0,\n                listLoading: false,\n                editLoading: false,\n                sels: [],//列表选中列\n                taskVShow: false,\n                taskVType: \"add\",\n                formTitle: \"定时任务\",\n                delLoading: false,\n                disDel: true,\n                form: {\n                    id: \"\",\n                    name: \"\",\n                    env: \"\",\n                    automations: [],\n                    params: \"\",\n                    crontab: \"\",\n                    status: \"true\",\n                    sendEmail: 0,\n                    emails: [],\n                },\n                formRules: {\n                    name: [\n                        { required: true, message: '请输入任务名称', trigger: 'blur' },\n                        { min: 1, max: 50, message: '长度在 1 到 50 个字符', trigger: 'blur' }\n                    ],\n                    env: [\n                        { required: true, message: '请选择执行环境'},\n                    ],\n                    automation: [\n                        { required: true, message: '请选择执行的用例集'},\n                    ],\n                    crontab: [\n                        { required: true, message: '请输入crontab表达式'},\n                    ],\n                },\n            }\n        },\n        methods: {\n            // 获取用例列表\n            getAutomationList() {\n                let self = this;\n                let param = { project_id: this.$route.params.project_id, page: self.page, page_size:1000};\n                axios.get(test+\"/api/automation/automation_list\",{params:param,headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                    let data=response.data;\n                    if (data.code === '999999') {\n                        self.automationlist=[];\n                        data.data.data.forEach((item) =>{\n                            self.automationlist.push(item)\n                        });\n                    }\n                    else {\n                        self.$message.error({\n                            message: data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            // 获取成员列表\n            getProjectMember() {\n                let self = this;\n                let params = {\n                    project_id: this.$route.params.project_id,\n                    page: self.page,\n                    page_size: 100\n                };\n                let headers = {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: 'Token '+sessionStorage.getItem('token')\n                };\n                axios.get(`${test}/api/member/project_member`, { params: params, headers:headers}).then(res => {\n                    let {msg, code, data} = res.data;\n                    if (code === '999999') {\n                        self.memberData = data.data\n                    }\n                    else {\n                        self.$message.error({\n                            message: msg,\n                            center: true,\n                        })\n                    }\n                })\n            },\n            handleSearch(){\n                this.page=1;\n                this.getTaskList();\n            },\n            // 获取用例列表\n            getTaskList() {\n                let self = this;\n                self.listLoading=true;\n                let param = { project_id: this.$route.params.project_id, page: self.page, name: self.filters.name};\n                axios.get(test+\"/api/automation/task_list\",{params:param,headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                    let data=response.data;\n                    self.listLoading=false;\n                    if (data.code === '999999') {\n                        self.total = data.data.total;\n                        self.pages=data.data.pages;\n                        self.tasklist=[];\n                        data.data.data.forEach((item) =>{\n                            self.tasklist.push(item)\n                        });\n                    }else {\n                        self.$message.error({\n                            message: data.msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            //删除\n            handleDel: function (index, row) {\n                this.$confirm('确认删除任务[' + row.name + ']吗?', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    let self = this;\n                    self.listLoading = true;\n                    let param=JSON.stringify({\n                                project_id: Number(this.$route.params.project_id),\n                                ids: [row.id] });\n                    axios.post(test+\"/api/automation/del_task\",param,{headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                        self.listLoading = false;\n                        let data=response.data;\n                        if (data.code === '999999') {\n                            self.$message({\n                                message: '删除成功',\n                                center: true,\n                                type: 'success'\n                            })\n                        } else {\n                            self.$message.error({\n                                message: data.msg,\n                                center: true,\n                            })\n                        }\n                        self.getTaskList();\n                    }).catch(error=>{\n\n                    });\n                }).catch(() => {\n                });\n            },\n            handleCurrentChange(val) {\n                this.page = val;\n                this.getTaskList()\n            },\n            selsChange: function (sels) {\n                if (sels.length>0) {\n                    this.sels = sels;\n                    this.update = false;\n                } else {\n                    this.update = true;\n                }\n            },\n            //批量删除\n            batchRemove: function () {\n                let ids = this.sels.map(item => item.id);\n                let self = this;\n                this.$confirm('确认删除选中任务吗？', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    self.listLoading = true;\n                    //NProgress.start();\n                    axios.post(test+\"/api/automation/del_task\",JSON.stringify({ project_id: Number(this.$route.params.project_id), ids: ids}),{headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                        let data=response.data;\n                        self.listLoading = false;\n                        if (data.code === '999999') {\n                            self.$message({\n                                message: '删除成功',\n                                center: true,\n                                type: 'success'\n                            })\n                        }\n                        else {\n                            self.$message.error({\n                                message: data.msg,\n                                center: true,\n                            })\n                        }\n                        self.getTaskList();\n                    }).catch(error=>{\n\n                    });\n                }).catch(() => {\n\n                });\n            },\n            //显示编辑界面\n            handleEdit: function (index, row) {\n                this.formTitle=\"编辑\";\n                this.taskVType=\"edit\";\n                this.taskVShow = true;\n                this.form=Object.assign({}, row);\n//                this.form = {\"id\":row.id,\"name\":row.name,\"type\":row.type,\"params\":row.params,\"group\":row.group,\"description\":row.description};\n            },\n            //显示新增界面\n            handleAdd: function () {\n                this.formTitle=\"新增\";\n                this.taskVType=\"add\";\n                this.taskVShow = true;\n                this.form={name: \"\", env: \"\", automations: [], params: \"{}\", crontab: \"0 * * * *\", status: true, sendEmail: 0, emails: []};\n            },\n            //显示新增页面,复制用例\n            handleCopy: function (index, row) {\n                this.formTitle=\"复制\";\n                //this.form={\"name\":row.name,\"type\":row.type,\"params\":row.params,\"group\":row.group,\"description\":row.description};\n                let form=(Object.assign({}, row));\n                delete form[\"id\"];\n                this.form=form;\n                this.taskVShow = true;\n                this.taskVType=\"copy\";\n            },\n            // 修改任务\n            editSubmit: function () {\n                if(this.form.automations.length==0){\n                    this.$message.error({\n                        message: \"请选择用例!\",\n                        center: true,\n                    })\n                    return;\n                }\n                let self = this;\n                this.$refs.form.validate((valid) => {\n                    if (valid) {\n                        this.$confirm('确认提交吗？', '提示', {}).then(() => {\n                            self.editLoading = true;\n                            //NProgress.start();\n                            let param = {\n                              project_id: Number(this.$route.params.project_id),\n                              automations: JSON.stringify(self.form.automations),\n                              name: self.form.name,\n                              params: self.form.params,\n                              env: self.form.env,\n                              crontab: self.form.crontab,\n//                                startTime: self.form.timeArray[0],\n//                                endTime: self.form.timeArray[1],\n                              status: self.form.status,\n                              sendEmail: self.form.sendEmail,\n                              emails: JSON.stringify(self.form.emails)};\n                            let url=test+\"/api/automation/add_task\";\n                            if(self.form.id!=null){\n                                param[\"id\"]=Number(self.form.id);\n                                url=test+\"/api/automation/update_task\";\n                            }\n                            axios.post(url,param,{headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                                let data=response.data;\n                                self.editLoading = false;\n                                if (data.code === '999999') {\n                                    self.$message({\n                                        message: '执行成功',\n                                        center: true,\n                                        type: 'success'\n                                    });\n                                    self.$refs['form'].resetFields();\n                                    self.taskVShow = false;\n                                    self.getTaskList()\n                                } else if (data.code === '999997'){\n                                    self.$message.error({\n                                        message: data.msg,\n                                        center: true,\n                                    })\n                                } else {\n                                    self.$message.error({\n                                        message: data.msg,\n                                        center: true,\n                                    })\n                                }\n                            }).catch(error=>{});\n                        }).catch(() => {});\n                    }\n                });\n            },\n            // 改变任务状态\n            handleChangeStatus: function(index, row) {\n                let self = this;\n                let url=\"\";\n                let message=\"\";\n                this.listLoading = true;\n                let param = JSON.stringify({ project_id: Number(this.$route.params.project_id),id: row.id});\n                if (row.status) {\n                    url=test+\"/api/automation/stop_task\";\n                    message='禁用成功';\n                } else {\n                    url=test+\"/api/automation/start_task\";\n                    message='启用成功';\n                }\n                axios.post(url,param,{headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                    let { msg, code, data }=response.data;\n                    self.listLoading = false;\n                    if (code === '999999') {\n                        self.$message({\n                            message: message,\n                            center: true,\n                            type: 'success'\n                        });\n                        row.status = !row.status;\n                    }\n                    else {\n                        self.$message.error({\n                            message: msg,\n                            center: true,\n                        })\n                    }\n                }).catch(error=>{\n\n                });\n            },\n            handleRun: function(index, row) {\n                this.formTitle=\"执行\";\n                this.taskVShow = true;\n                this.taskVType=\"run\";\n                this.form=Object.assign({}, row);\n            },\n            runSubmit: function() {\n                this.$confirm('确认执行定时任务[' + this.form.name + ']吗?', '提示', {}).then(() => {\n                    let self = this;\n                    let url=\"\";\n                    let message=\"\";\n                    this.listLoading = true;\n                    let param = { project_id: Number(this.$route.params.project_id),id:self.form.id,sendEmail:self.form.sendEmail,emails:self.form.emails};\n                    axios.post(test+\"/api/automation/execute_task\",param,{headers:{\"Content-Type\": \"application/json\", Authorization: 'Token ' + sessionStorage.getItem('token')}}).then(response => {\n                        let { msg, code, data }=response.data;\n                        self.listLoading = false;\n                        self.taskVShow = false;\n                        if (code === '999999') {\n                            self.$message({\n                                message: \"开始执行\",\n                                center: true,\n                                type: 'success'\n                            });\n                        }\n                        else {\n                            self.$message.error({\n                                message: msg,\n                                center: true,\n                            })\n                        }\n                    }).catch(error=>{\n\n                    });\n                }).catch(() => {});\n            },\n            getEnv() {\n                let self = this;\n                let headers = {\n                    Authorization: 'Token '+sessionStorage.getItem('token')\n                };\n                getProjectConfig(headers, {project_id: self.$route.params.project_id,page: self.page, name: \"\", type: \"env\"}).then(data => {\n                    if (data.code === '999999') {\n                        data.data.data.forEach((item) => {\n                            if (item.status) {\n                                self.EnvList.push(item)\n                            }\n                        })\n                    }else {\n                        self.$message.error({\n                            message: data.msg,\n                            center: true,\n                        })\n                    }\n                });\n            },\n            init(){\n                this.getTaskList();\n                this.getAutomationList();\n                this.getProjectMember();\n                this.getEnv();\n            },\n        },\n        mounted() {\n            this.init();\n        },\n        watch: {\n            '$route' (to, from) { //监听路由是否变化\n              if(to.query!= from.query){\n                this.init();//重新加载数据\n              }\n            }\n        },\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n    .api-title {\n        padding: 15px;\n        margin: 0px;\n        text-align: center;\n        border-radius:5px;\n        font-size: 15px;\n        color: aliceblue;\n        background-color: rgb(32, 160, 255);\n        font-family: PingFang SC;\n    }\n    .group .editGroup {\n        float:right;\n    }\n    .row-title {\n        margin: 35px;\n    }\n    .addGroup {\n        margin-top: 0px;\n        margin-bottom: 10px;\n        border-radius: 25px;\n    }\n    .api-view-a {\n        margin-left: 15px;\n        margin-right: 15px;\n        display: block;\n    }\n    .api-view-b {\n        margin-left: 15px;\n        margin-right: 15px;\n        display: none;\n    }\n</style>\n"],"sourceRoot":"src/views/project/auto"}]}